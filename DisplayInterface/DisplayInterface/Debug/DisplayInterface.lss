
DisplayInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001516  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001383  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a5  00000000  00000000  0000294b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012d1  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000045c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010140  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000284  00000000  00000000  00014858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003d7a  00000000  00000000  00014adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
       6:	00 00       	nop
       8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
       a:	00 00       	nop
       c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
       e:	00 00       	nop
      10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
      12:	00 00       	nop
      14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
      16:	00 00       	nop
      18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
      22:	00 00       	nop
      24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c0       	rjmp	.+36     	; 0x7a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c0       	rjmp	.+32     	; 0x7a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c0       	rjmp	.+28     	; 0x7a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c c0       	rjmp	.+24     	; 0x7a <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c0       	rjmp	.+20     	; 0x7a <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61
      74:	1c d3       	rcall	.+1592   	; 0x6ae <main>
      76:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <_exit>

0000007a <__bad_interrupt>:
      7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <board_init>:
#include <conf_board.h>
#include "gpio.h"
#include "led.h"

void board_init(void)
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	6a 97       	sbiw	r28, 0x1a	; 26
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	8d e0       	ldi	r24, 0x0D	; 13
      92:	89 83       	std	Y+1, r24	; 0x01
      94:	83 e0       	ldi	r24, 0x03	; 3
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	9b 83       	std	Y+3, r25	; 0x03
      9a:	8a 83       	std	Y+2, r24	; 0x02
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	88 2f       	mov	r24, r24
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	9d 83       	std	Y+5, r25	; 0x05
      a4:	8c 83       	std	Y+4, r24	; 0x04
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
      a6:	8c 81       	ldd	r24, Y+4	; 0x04
      a8:	9d 81       	ldd	r25, Y+5	; 0x05
      aa:	9c 01       	movw	r18, r24
      ac:	27 70       	andi	r18, 0x07	; 7
      ae:	33 27       	eor	r19, r19
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	02 c0       	rjmp	.+4      	; 0xba <board_init+0x3e>
      b6:	88 0f       	add	r24, r24
      b8:	99 1f       	adc	r25, r25
      ba:	2a 95       	dec	r18
      bc:	e2 f7       	brpl	.-8      	; 0xb6 <board_init+0x3a>
      be:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	88 2f       	mov	r24, r24
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	9f 83       	std	Y+7, r25	; 0x07
      c8:	8e 83       	std	Y+6, r24	; 0x06
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
      ca:	8e 81       	ldd	r24, Y+6	; 0x06
      cc:	9f 81       	ldd	r25, Y+7	; 0x07
      ce:	96 95       	lsr	r25
      d0:	87 95       	ror	r24
      d2:	96 95       	lsr	r25
      d4:	87 95       	ror	r24
      d6:	96 95       	lsr	r25
      d8:	87 95       	ror	r24
      da:	88 87       	std	Y+8, r24	; 0x08
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
      dc:	88 85       	ldd	r24, Y+8	; 0x08
      de:	28 2f       	mov	r18, r24
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	c9 01       	movw	r24, r18
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	82 0f       	add	r24, r18
      ea:	93 1f       	adc	r25, r19
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	9a 87       	std	Y+10, r25	; 0x0a
      f0:	89 87       	std	Y+9, r24	; 0x09
      f2:	4b 87       	std	Y+11, r20	; 0x0b
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	9d 87       	std	Y+13, r25	; 0x0d
      fa:	8c 87       	std	Y+12, r24	; 0x0c
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
      fc:	8c 85       	ldd	r24, Y+12	; 0x0c
      fe:	9d 85       	ldd	r25, Y+13	; 0x0d
     100:	81 70       	andi	r24, 0x01	; 1
     102:	99 27       	eor	r25, r25
     104:	89 2b       	or	r24, r25
     106:	89 f1       	breq	.+98     	; 0x16a <board_init+0xee>
		if (flags & IOPORT_INIT_HIGH) {
     108:	8c 85       	ldd	r24, Y+12	; 0x0c
     10a:	9d 85       	ldd	r25, Y+13	; 0x0d
     10c:	82 70       	andi	r24, 0x02	; 2
     10e:	99 27       	eor	r25, r25
     110:	89 2b       	or	r24, r25
     112:	71 f0       	breq	.+28     	; 0x130 <board_init+0xb4>
			*((uint8_t *)port + 2) |= pin_mask;
     114:	89 85       	ldd	r24, Y+9	; 0x09
     116:	9a 85       	ldd	r25, Y+10	; 0x0a
     118:	02 96       	adiw	r24, 0x02	; 2
     11a:	29 85       	ldd	r18, Y+9	; 0x09
     11c:	3a 85       	ldd	r19, Y+10	; 0x0a
     11e:	2e 5f       	subi	r18, 0xFE	; 254
     120:	3f 4f       	sbci	r19, 0xFF	; 255
     122:	f9 01       	movw	r30, r18
     124:	30 81       	ld	r19, Z
     126:	2b 85       	ldd	r18, Y+11	; 0x0b
     128:	23 2b       	or	r18, r19
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
     12e:	0f c0       	rjmp	.+30     	; 0x14e <board_init+0xd2>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     130:	89 85       	ldd	r24, Y+9	; 0x09
     132:	9a 85       	ldd	r25, Y+10	; 0x0a
     134:	02 96       	adiw	r24, 0x02	; 2
     136:	29 85       	ldd	r18, Y+9	; 0x09
     138:	3a 85       	ldd	r19, Y+10	; 0x0a
     13a:	2e 5f       	subi	r18, 0xFE	; 254
     13c:	3f 4f       	sbci	r19, 0xFF	; 255
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	32 2f       	mov	r19, r18
     144:	2b 85       	ldd	r18, Y+11	; 0x0b
     146:	20 95       	com	r18
     148:	23 23       	and	r18, r19
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	9a 85       	ldd	r25, Y+10	; 0x0a
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	29 85       	ldd	r18, Y+9	; 0x09
     156:	3a 85       	ldd	r19, Y+10	; 0x0a
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	f9 01       	movw	r30, r18
     15e:	30 81       	ld	r19, Z
     160:	2b 85       	ldd	r18, Y+11	; 0x0b
     162:	23 2b       	or	r18, r19
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
     168:	32 c0       	rjmp	.+100    	; 0x1ce <board_init+0x152>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     16a:	89 85       	ldd	r24, Y+9	; 0x09
     16c:	9a 85       	ldd	r25, Y+10	; 0x0a
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	29 85       	ldd	r18, Y+9	; 0x09
     172:	3a 85       	ldd	r19, Y+10	; 0x0a
     174:	2f 5f       	subi	r18, 0xFF	; 255
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	32 2f       	mov	r19, r18
     17e:	2b 85       	ldd	r18, Y+11	; 0x0b
     180:	20 95       	com	r18
     182:	23 23       	and	r18, r19
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     188:	8c 85       	ldd	r24, Y+12	; 0x0c
     18a:	9d 85       	ldd	r25, Y+13	; 0x0d
     18c:	84 70       	andi	r24, 0x04	; 4
     18e:	99 27       	eor	r25, r25
     190:	89 2b       	or	r24, r25
     192:	71 f0       	breq	.+28     	; 0x1b0 <board_init+0x134>
			*((uint8_t *)port + 2) |= pin_mask;
     194:	89 85       	ldd	r24, Y+9	; 0x09
     196:	9a 85       	ldd	r25, Y+10	; 0x0a
     198:	02 96       	adiw	r24, 0x02	; 2
     19a:	29 85       	ldd	r18, Y+9	; 0x09
     19c:	3a 85       	ldd	r19, Y+10	; 0x0a
     19e:	2e 5f       	subi	r18, 0xFE	; 254
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	f9 01       	movw	r30, r18
     1a4:	30 81       	ld	r19, Z
     1a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1a8:	23 2b       	or	r18, r19
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <board_init+0x152>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	02 96       	adiw	r24, 0x02	; 2
     1b6:	29 85       	ldd	r18, Y+9	; 0x09
     1b8:	3a 85       	ldd	r19, Y+10	; 0x0a
     1ba:	2e 5f       	subi	r18, 0xFE	; 254
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	f9 01       	movw	r30, r18
     1c0:	20 81       	ld	r18, Z
     1c2:	32 2f       	mov	r19, r18
     1c4:	2b 85       	ldd	r18, Y+11	; 0x0b
     1c6:	20 95       	com	r18
     1c8:	23 23       	and	r18, r19
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
     1ce:	8f e0       	ldi	r24, 0x0F	; 15
     1d0:	8e 87       	std	Y+14, r24	; 0x0e
     1d2:	84 e0       	ldi	r24, 0x04	; 4
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	98 8b       	std	Y+16, r25	; 0x10
     1d8:	8f 87       	std	Y+15, r24	; 0x0f
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     1da:	8e 85       	ldd	r24, Y+14	; 0x0e
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	9a 8b       	std	Y+18, r25	; 0x12
     1e2:	89 8b       	std	Y+17, r24	; 0x11
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     1e4:	89 89       	ldd	r24, Y+17	; 0x11
     1e6:	9a 89       	ldd	r25, Y+18	; 0x12
     1e8:	9c 01       	movw	r18, r24
     1ea:	27 70       	andi	r18, 0x07	; 7
     1ec:	33 27       	eor	r19, r19
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <board_init+0x17c>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	2a 95       	dec	r18
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <board_init+0x178>
     1fc:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     1fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	9c 8b       	std	Y+20, r25	; 0x14
     206:	8b 8b       	std	Y+19, r24	; 0x13
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     208:	8b 89       	ldd	r24, Y+19	; 0x13
     20a:	9c 89       	ldd	r25, Y+20	; 0x14
     20c:	96 95       	lsr	r25
     20e:	87 95       	ror	r24
     210:	96 95       	lsr	r25
     212:	87 95       	ror	r24
     214:	96 95       	lsr	r25
     216:	87 95       	ror	r24
     218:	8d 8b       	std	Y+21, r24	; 0x15
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     21a:	8d 89       	ldd	r24, Y+21	; 0x15
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	c9 01       	movw	r24, r18
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	82 0f       	add	r24, r18
     228:	93 1f       	adc	r25, r19
     22a:	80 96       	adiw	r24, 0x20	; 32
     22c:	9f 8b       	std	Y+23, r25	; 0x17
     22e:	8e 8b       	std	Y+22, r24	; 0x16
     230:	48 8f       	std	Y+24, r20	; 0x18
     232:	8f 85       	ldd	r24, Y+15	; 0x0f
     234:	98 89       	ldd	r25, Y+16	; 0x10
     236:	9a 8f       	std	Y+26, r25	; 0x1a
     238:	89 8f       	std	Y+25, r24	; 0x19
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     23a:	89 8d       	ldd	r24, Y+25	; 0x19
     23c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     23e:	81 70       	andi	r24, 0x01	; 1
     240:	99 27       	eor	r25, r25
     242:	89 2b       	or	r24, r25
     244:	89 f1       	breq	.+98     	; 0x2a8 <board_init+0x22c>
		if (flags & IOPORT_INIT_HIGH) {
     246:	89 8d       	ldd	r24, Y+25	; 0x19
     248:	9a 8d       	ldd	r25, Y+26	; 0x1a
     24a:	82 70       	andi	r24, 0x02	; 2
     24c:	99 27       	eor	r25, r25
     24e:	89 2b       	or	r24, r25
     250:	71 f0       	breq	.+28     	; 0x26e <board_init+0x1f2>
			*((uint8_t *)port + 2) |= pin_mask;
     252:	8e 89       	ldd	r24, Y+22	; 0x16
     254:	9f 89       	ldd	r25, Y+23	; 0x17
     256:	02 96       	adiw	r24, 0x02	; 2
     258:	2e 89       	ldd	r18, Y+22	; 0x16
     25a:	3f 89       	ldd	r19, Y+23	; 0x17
     25c:	2e 5f       	subi	r18, 0xFE	; 254
     25e:	3f 4f       	sbci	r19, 0xFF	; 255
     260:	f9 01       	movw	r30, r18
     262:	30 81       	ld	r19, Z
     264:	28 8d       	ldd	r18, Y+24	; 0x18
     266:	23 2b       	or	r18, r19
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	0f c0       	rjmp	.+30     	; 0x28c <board_init+0x210>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     26e:	8e 89       	ldd	r24, Y+22	; 0x16
     270:	9f 89       	ldd	r25, Y+23	; 0x17
     272:	02 96       	adiw	r24, 0x02	; 2
     274:	2e 89       	ldd	r18, Y+22	; 0x16
     276:	3f 89       	ldd	r19, Y+23	; 0x17
     278:	2e 5f       	subi	r18, 0xFE	; 254
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	32 2f       	mov	r19, r18
     282:	28 8d       	ldd	r18, Y+24	; 0x18
     284:	20 95       	com	r18
     286:	23 23       	and	r18, r19
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     28c:	8e 89       	ldd	r24, Y+22	; 0x16
     28e:	9f 89       	ldd	r25, Y+23	; 0x17
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	2e 89       	ldd	r18, Y+22	; 0x16
     294:	3f 89       	ldd	r19, Y+23	; 0x17
     296:	2f 5f       	subi	r18, 0xFF	; 255
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	f9 01       	movw	r30, r18
     29c:	30 81       	ld	r19, Z
     29e:	28 8d       	ldd	r18, Y+24	; 0x18
     2a0:	23 2b       	or	r18, r19
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
     2a6:	32 c0       	rjmp	.+100    	; 0x30c <board_init+0x290>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     2a8:	8e 89       	ldd	r24, Y+22	; 0x16
     2aa:	9f 89       	ldd	r25, Y+23	; 0x17
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	2e 89       	ldd	r18, Y+22	; 0x16
     2b0:	3f 89       	ldd	r19, Y+23	; 0x17
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	32 2f       	mov	r19, r18
     2bc:	28 8d       	ldd	r18, Y+24	; 0x18
     2be:	20 95       	com	r18
     2c0:	23 23       	and	r18, r19
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     2c6:	89 8d       	ldd	r24, Y+25	; 0x19
     2c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ca:	84 70       	andi	r24, 0x04	; 4
     2cc:	99 27       	eor	r25, r25
     2ce:	89 2b       	or	r24, r25
     2d0:	71 f0       	breq	.+28     	; 0x2ee <board_init+0x272>
			*((uint8_t *)port + 2) |= pin_mask;
     2d2:	8e 89       	ldd	r24, Y+22	; 0x16
     2d4:	9f 89       	ldd	r25, Y+23	; 0x17
     2d6:	02 96       	adiw	r24, 0x02	; 2
     2d8:	2e 89       	ldd	r18, Y+22	; 0x16
     2da:	3f 89       	ldd	r19, Y+23	; 0x17
     2dc:	2e 5f       	subi	r18, 0xFE	; 254
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	f9 01       	movw	r30, r18
     2e2:	30 81       	ld	r19, Z
     2e4:	28 8d       	ldd	r18, Y+24	; 0x18
     2e6:	23 2b       	or	r18, r19
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	0f c0       	rjmp	.+30     	; 0x30c <board_init+0x290>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     2ee:	8e 89       	ldd	r24, Y+22	; 0x16
     2f0:	9f 89       	ldd	r25, Y+23	; 0x17
     2f2:	02 96       	adiw	r24, 0x02	; 2
     2f4:	2e 89       	ldd	r18, Y+22	; 0x16
     2f6:	3f 89       	ldd	r19, Y+23	; 0x17
     2f8:	2e 5f       	subi	r18, 0xFE	; 254
     2fa:	3f 4f       	sbci	r19, 0xFF	; 255
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	32 2f       	mov	r19, r18
     302:	28 8d       	ldd	r18, Y+24	; 0x18
     304:	20 95       	com	r18
     306:	23 23       	and	r18, r19
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
	ioport_configure_pin(LED0, IOPORT_DIR_OUTPUT |  IOPORT_INIT_HIGH);

	/* On board Switch initialization */
	ioport_configure_pin(GPIO_PUSH_BUTTON_0,
	IOPORT_DIR_INPUT | IOPORT_PULL_UP);
}
     30c:	6a 96       	adiw	r28, 0x1a	; 26
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
	arch_ioport_init();
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	2f 97       	sbiw	r28, 0x0f	; 15
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	9e 87       	std	Y+14, r25	; 0x0e
     342:	8d 87       	std	Y+13, r24	; 0x0d
     344:	6f 87       	std	Y+15, r22	; 0x0f
     346:	8d 85       	ldd	r24, Y+13	; 0x0d
     348:	9e 85       	ldd	r25, Y+14	; 0x0e
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	8f 85       	ldd	r24, Y+15	; 0x0f
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	9d 83       	std	Y+5, r25	; 0x05
     358:	8c 83       	std	Y+4, r24	; 0x04
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
     35e:	96 95       	lsr	r25
     360:	87 95       	ror	r24
     362:	96 95       	lsr	r25
     364:	87 95       	ror	r24
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	8e 83       	std	Y+6, r24	; 0x06
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     36c:	8e 81       	ldd	r24, Y+6	; 0x06
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	c9 01       	movw	r24, r18
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
     37c:	80 96       	adiw	r24, 0x20	; 32
 */
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
     37e:	98 87       	std	Y+8, r25	; 0x08
     380:	8f 83       	std	Y+7, r24	; 0x07
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	9a 87       	std	Y+10, r25	; 0x0a
     388:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     38a:	89 85       	ldd	r24, Y+9	; 0x09
     38c:	9a 85       	ldd	r25, Y+10	; 0x0a
     38e:	9c 01       	movw	r18, r24
     390:	27 70       	andi	r18, 0x07	; 7
     392:	33 27       	eor	r19, r19
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <ioport_set_pin_mode+0x72>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	2a 95       	dec	r18
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <ioport_set_pin_mode+0x6e>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	9c 87       	std	Y+12, r25	; 0x0c
     3a8:	8b 87       	std	Y+11, r24	; 0x0b
	if (mode == IOPORT_MODE_PULLUP) {
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	88 23       	and	r24, r24
     3ae:	61 f4       	brne	.+24     	; 0x3c8 <ioport_set_pin_mode+0x9c>
		base->PORTDATA |=  mask_pin;
     3b0:	8f 81       	ldd	r24, Y+7	; 0x07
     3b2:	98 85       	ldd	r25, Y+8	; 0x08
     3b4:	fc 01       	movw	r30, r24
     3b6:	92 81       	ldd	r25, Z+2	; 0x02
     3b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ba:	29 2f       	mov	r18, r25
     3bc:	28 2b       	or	r18, r24
     3be:	8f 81       	ldd	r24, Y+7	; 0x07
     3c0:	98 85       	ldd	r25, Y+8	; 0x08
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
     3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <ioport_set_pin_mode+0xba>
	} else if (mode == IOPORT_MODE_PULLDOWN) {
     3c8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	61 f4       	brne	.+24     	; 0x3e6 <ioport_set_pin_mode+0xba>
		base->PORTDATA &= ~mask_pin;
     3ce:	8f 81       	ldd	r24, Y+7	; 0x07
     3d0:	98 85       	ldd	r25, Y+8	; 0x08
     3d2:	fc 01       	movw	r30, r24
     3d4:	92 81       	ldd	r25, Z+2	; 0x02
     3d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d8:	80 95       	com	r24
     3da:	29 2f       	mov	r18, r25
     3dc:	28 23       	and	r18, r24
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	fc 01       	movw	r30, r24
     3e4:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_mode(pin, mode);
}
     3e6:	2f 96       	adiw	r28, 0x0f	; 15
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	61 97       	sbiw	r28, 0x11	; 17
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	9f 87       	std	Y+15, r25	; 0x0f
     40e:	8e 87       	std	Y+14, r24	; 0x0e
     410:	79 8b       	std	Y+17, r23	; 0x11
     412:	68 8b       	std	Y+16, r22	; 0x10
     414:	8e 85       	ldd	r24, Y+14	; 0x0e
     416:	9f 85       	ldd	r25, Y+15	; 0x0f
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	88 89       	ldd	r24, Y+16	; 0x10
     41e:	99 89       	ldd	r25, Y+17	; 0x11
     420:	9c 83       	std	Y+4, r25	; 0x04
     422:	8b 83       	std	Y+3, r24	; 0x03
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	8d 83       	std	Y+5, r24	; 0x05
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     42c:	8d 81       	ldd	r24, Y+5	; 0x05
     42e:	9e 81       	ldd	r25, Y+6	; 0x06
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8f 83       	std	Y+7, r24	; 0x07
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     43e:	8f 81       	ldd	r24, Y+7	; 0x07
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	c9 01       	movw	r24, r18
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	80 96       	adiw	r24, 0x20	; 32
 * \param mode dir, \refer ioport_direction
 */
__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     450:	99 87       	std	Y+9, r25	; 0x09
     452:	88 87       	std	Y+8, r24	; 0x08

	if (dir == IOPORT_DIR_OUTPUT) {
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	d9 f4       	brne	.+54     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	9b 87       	std	Y+11, r25	; 0x0b
     462:	8a 87       	std	Y+10, r24	; 0x0a
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     464:	8a 85       	ldd	r24, Y+10	; 0x0a
     466:	9b 85       	ldd	r25, Y+11	; 0x0b
     468:	9c 01       	movw	r18, r24
     46a:	27 70       	andi	r18, 0x07	; 7
     46c:	33 27       	eor	r19, r19
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     47c:	28 2f       	mov	r18, r24
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
     47e:	88 85       	ldd	r24, Y+8	; 0x08
     480:	99 85       	ldd	r25, Y+9	; 0x09
     482:	fc 01       	movw	r30, r24
     484:	81 81       	ldd	r24, Z+1	; 0x01
     486:	28 2b       	or	r18, r24
     488:	88 85       	ldd	r24, Y+8	; 0x08
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	fc 01       	movw	r30, r24
     48e:	21 83       	std	Z+1, r18	; 0x01
     490:	25 c0       	rjmp	.+74     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	89 2b       	or	r24, r25
     498:	09 f5       	brne	.+66     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	9d 87       	std	Y+13, r25	; 0x0d
     4a0:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a6:	9c 01       	movw	r18, r24
     4a8:	27 70       	andi	r18, 0x07	; 7
     4aa:	33 27       	eor	r19, r19
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	2a 95       	dec	r18
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9c 01       	movw	r18, r24
     4c0:	20 95       	com	r18
     4c2:	30 95       	com	r19
     4c4:	88 85       	ldd	r24, Y+8	; 0x08
     4c6:	99 85       	ldd	r25, Y+9	; 0x09
     4c8:	fc 01       	movw	r30, r24
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
     4cc:	98 2f       	mov	r25, r24
     4ce:	82 2f       	mov	r24, r18
     4d0:	89 23       	and	r24, r25
     4d2:	28 2f       	mov	r18, r24
     4d4:	88 85       	ldd	r24, Y+8	; 0x08
     4d6:	99 85       	ldd	r25, Y+9	; 0x09
     4d8:	fc 01       	movw	r30, r24
     4da:	21 83       	std	Z+1, r18	; 0x01
	arch_ioport_set_pin_dir(pin, dir);
}
     4dc:	61 96       	adiw	r28, 0x11	; 17
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2d 97       	sbiw	r28, 0x0d	; 13
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	9c 87       	std	Y+12, r25	; 0x0c
     504:	8b 87       	std	Y+11, r24	; 0x0b
     506:	6d 87       	std	Y+13, r22	; 0x0d
     508:	8b 85       	ldd	r24, Y+11	; 0x0b
     50a:	9c 85       	ldd	r25, Y+12	; 0x0c
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	8d 85       	ldd	r24, Y+13	; 0x0d
     512:	8b 83       	std	Y+3, r24	; 0x03
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	8c 83       	std	Y+4, r24	; 0x04
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	c9 01       	movw	r24, r18
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
     536:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	8d 83       	std	Y+5, r24	; 0x05

	if (level) {
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	88 23       	and	r24, r24
     540:	d9 f0       	breq	.+54     	; 0x578 <ioport_set_pin_level+0x8a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     542:	8d 81       	ldd	r24, Y+5	; 0x05
     544:	9e 81       	ldd	r25, Y+6	; 0x06
     546:	fc 01       	movw	r30, r24
     548:	42 81       	ldd	r20, Z+2	; 0x02
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	98 87       	std	Y+8, r25	; 0x08
     550:	8f 83       	std	Y+7, r24	; 0x07
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     552:	8f 81       	ldd	r24, Y+7	; 0x07
     554:	98 85       	ldd	r25, Y+8	; 0x08
     556:	9c 01       	movw	r18, r24
     558:	27 70       	andi	r18, 0x07	; 7
     55a:	33 27       	eor	r19, r19
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <ioport_set_pin_level+0x78>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	2a 95       	dec	r18
     568:	e2 f7       	brpl	.-8      	; 0x562 <ioport_set_pin_level+0x74>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     56a:	24 2f       	mov	r18, r20
     56c:	28 2b       	or	r18, r24
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	9e 81       	ldd	r25, Y+6	; 0x06
     572:	fc 01       	movw	r30, r24
     574:	22 83       	std	Z+2, r18	; 0x02
     576:	1c c0       	rjmp	.+56     	; 0x5b0 <ioport_set_pin_level+0xc2>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	9e 81       	ldd	r25, Y+6	; 0x06
     57c:	fc 01       	movw	r30, r24
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	48 2f       	mov	r20, r24
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	9a 87       	std	Y+10, r25	; 0x0a
     588:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	9a 85       	ldd	r25, Y+10	; 0x0a
     58e:	9c 01       	movw	r18, r24
     590:	27 70       	andi	r18, 0x07	; 7
     592:	33 27       	eor	r19, r19
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <ioport_set_pin_level+0xb0>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	2a 95       	dec	r18
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <ioport_set_pin_level+0xac>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     5a2:	80 95       	com	r24
     5a4:	84 23       	and	r24, r20
     5a6:	28 2f       	mov	r18, r24
     5a8:	8d 81       	ldd	r24, Y+5	; 0x05
     5aa:	9e 81       	ldd	r25, Y+6	; 0x06
     5ac:	fc 01       	movw	r30, r24
     5ae:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_level(pin, level);
}
     5b0:	2d 96       	adiw	r28, 0x0d	; 13
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	2b 97       	sbiw	r28, 0x0b	; 11
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	9b 87       	std	Y+11, r25	; 0x0b
     5d8:	8a 87       	std	Y+10, r24	; 0x0a
     5da:	8a 85       	ldd	r24, Y+10	; 0x0a
     5dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	9c 83       	std	Y+4, r25	; 0x04
     5e8:	8b 83       	std	Y+3, r24	; 0x03
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
     5f2:	96 95       	lsr	r25
     5f4:	87 95       	ror	r24
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
     5fa:	8d 83       	std	Y+5, r24	; 0x05
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	c9 01       	movw	r24, r18
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	80 96       	adiw	r24, 0x20	; 32
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     60e:	9f 83       	std	Y+7, r25	; 0x07
     610:	8e 83       	std	Y+6, r24	; 0x06
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     612:	8e 81       	ldd	r24, Y+6	; 0x06
     614:	9f 81       	ldd	r25, Y+7	; 0x07
     616:	fc 01       	movw	r30, r24
     618:	40 81       	ld	r20, Z
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	99 87       	std	Y+9, r25	; 0x09
     620:	88 87       	std	Y+8, r24	; 0x08
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     622:	88 85       	ldd	r24, Y+8	; 0x08
     624:	99 85       	ldd	r25, Y+9	; 0x09
     626:	9c 01       	movw	r18, r24
     628:	27 70       	andi	r18, 0x07	; 7
     62a:	33 27       	eor	r19, r19
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <ioport_get_pin_level+0x74>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	2a 95       	dec	r18
     638:	e2 f7       	brpl	.-8      	; 0x632 <ioport_get_pin_level+0x70>
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     63a:	94 2f       	mov	r25, r20
     63c:	98 23       	and	r25, r24
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	99 23       	and	r25, r25
     642:	09 f4       	brne	.+2      	; 0x646 <ioport_get_pin_level+0x84>
     644:	80 e0       	ldi	r24, 0x00	; 0
	return arch_ioport_get_pin_level(pin);
}
     646:	2b 96       	adiw	r28, 0x0b	; 11
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <SPI_MasterInit>:
#define WIDTH			132
#define LENGTH			131
#define START_OFFSET	1
// From page 218 of data sheet
void SPI_MasterInit(void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB3)|(1<<DDB5);//|(1<<DDB2); // modified to make SS output
     660:	84 e2       	ldi	r24, 0x24	; 36
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	28 e2       	ldi	r18, 0x28	; 40
     666:	fc 01       	movw	r30, r24
     668:	20 83       	st	Z, r18
	
	// To prevent it from getting pulled out of Master mode
	ioport_set_pin_mode(SS_PIN, IOPORT_MODE_PULLUP);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	8a e0       	ldi	r24, 0x0A	; 10
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	5d de       	rcall	.-838    	; 0x32c <ioport_set_pin_mode>
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     672:	8c e4       	ldi	r24, 0x4C	; 76
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	21 e5       	ldi	r18, 0x51	; 81
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <SPI_MasterTransmit>:

// from page 218 of data sheet
void SPI_MasterTransmit(uint8_t cData)
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	1f 92       	push	r1
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Start transmission */
	SPDR = cData;
     68e:	8e e4       	ldi	r24, 0x4E	; 78
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	29 81       	ldd	r18, Y+1	; 0x01
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     698:	00 00       	nop
     69a:	8d e4       	ldi	r24, 0x4D	; 77
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	88 23       	and	r24, r24
     6a4:	d4 f7       	brge	.-12     	; 0x69a <SPI_MasterTransmit+0x18>
	;
}
     6a6:	0f 90       	pop	r0
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <main>:


int main (void)
{
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	cc 57       	subi	r28, 0x7C	; 124
     6bc:	d0 46       	sbci	r29, 0x60	; 96
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
	
	
	uint8_t transmitByte;
	uint8_t display[24576];
	
	board_init();
     6c8:	d9 dc       	rcall	.-1614   	; 0x7c <board_init>
	ioport_init();
     6ca:	29 de       	rcall	.-942    	; 0x31e <ioport_init>

	SPI_MasterInit();
     6cc:	c5 df       	rcall	.-118    	; 0x658 <SPI_MasterInit>

	PRR = 0x00;
     6ce:	84 e6       	ldi	r24, 0x64	; 100
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	10 82       	st	Z, r1

	ioport_set_pin_dir(BACK_LIGHT, IOPORT_DIR_OUTPUT);
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	89 e0       	ldi	r24, 0x09	; 9
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	8c de       	rcall	.-744    	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_DC, IOPORT_DIR_OUTPUT);
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	87 de       	rcall	.-754    	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_RST, IOPORT_DIR_OUTPUT);
     6ea:	61 e0       	ldi	r22, 0x01	; 1
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	8f e1       	ldi	r24, 0x1F	; 31
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	82 de       	rcall	.-764    	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_CS, IOPORT_DIR_OUTPUT);
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	8e e1       	ldi	r24, 0x1E	; 30
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	7d de       	rcall	.-774    	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(CARD_CS, IOPORT_DIR_OUTPUT);
     6fe:	61 e0       	ldi	r22, 0x01	; 1
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8d e1       	ldi	r24, 0x1D	; 29
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	78 de       	rcall	.-784    	; 0x3f8 <ioport_set_pin_dir>
	
	
	
	ioport_set_pin_level(TFT_DC, 0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	88 e0       	ldi	r24, 0x08	; 8
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	ef de       	rcall	.-546    	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(TFT_CS, 0);  // serial interface initializes when CS is high pg 33
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8e e1       	ldi	r24, 0x1E	; 30
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	eb de       	rcall	.-554    	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(CARD_CS, 1);  // Turn off card 
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	8d e1       	ldi	r24, 0x1D	; 29
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	e7 de       	rcall	.-562    	; 0x4ee <ioport_set_pin_level>

	ioport_set_pin_level(TFT_RST, 1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	8f e1       	ldi	r24, 0x1F	; 31
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	e3 de       	rcall	.-570    	; 0x4ee <ioport_set_pin_level>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	aa ef       	ldi	r26, 0xFA	; 250
     72e:	b3 e4       	ldi	r27, 0x43	; 67
     730:	8b 8f       	std	Y+27, r24	; 0x1b
     732:	9c 8f       	std	Y+28, r25	; 0x1c
     734:	ad 8f       	std	Y+29, r26	; 0x1d
     736:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	4a e7       	ldi	r20, 0x7A	; 122
     73e:	53 e4       	ldi	r21, 0x43	; 67
     740:	6b 8d       	ldd	r22, Y+27	; 0x1b
     742:	7c 8d       	ldd	r23, Y+28	; 0x1c
     744:	8d 8d       	ldd	r24, Y+29	; 0x1d
     746:	9e 8d       	ldd	r25, Y+30	; 0x1e
     748:	2f d6       	rcall	.+3166   	; 0x13a8 <__mulsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	8f 8f       	std	Y+31, r24	; 0x1f
     750:	98 a3       	std	Y+32, r25	; 0x20
     752:	a9 a3       	std	Y+33, r26	; 0x21
     754:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e8       	ldi	r20, 0x80	; 128
     75c:	5f e3       	ldi	r21, 0x3F	; 63
     75e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     760:	78 a1       	ldd	r23, Y+32	; 0x20
     762:	89 a1       	ldd	r24, Y+33	; 0x21
     764:	9a a1       	ldd	r25, Y+34	; 0x22
     766:	9f d5       	rcall	.+2878   	; 0x12a6 <__cmpsf2>
     768:	88 23       	and	r24, r24
     76a:	2c f4       	brge	.+10     	; 0x776 <main+0xc8>
		__ticks = 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	9c a3       	std	Y+36, r25	; 0x24
     772:	8b a3       	std	Y+35, r24	; 0x23
     774:	3b c0       	rjmp	.+118    	; 0x7ec <main+0x13e>
	else if (__tmp > 65535)
     776:	20 e0       	ldi	r18, 0x00	; 0
     778:	3f ef       	ldi	r19, 0xFF	; 255
     77a:	4f e7       	ldi	r20, 0x7F	; 127
     77c:	57 e4       	ldi	r21, 0x47	; 71
     77e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     780:	78 a1       	ldd	r23, Y+32	; 0x20
     782:	89 a1       	ldd	r24, Y+33	; 0x21
     784:	9a a1       	ldd	r25, Y+34	; 0x22
     786:	0c d6       	rcall	.+3096   	; 0x13a0 <__gesf2>
     788:	18 16       	cp	r1, r24
     78a:	3c f5       	brge	.+78     	; 0x7da <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	40 e2       	ldi	r20, 0x20	; 32
     792:	51 e4       	ldi	r21, 0x41	; 65
     794:	6b 8d       	ldd	r22, Y+27	; 0x1b
     796:	7c 8d       	ldd	r23, Y+28	; 0x1c
     798:	8d 8d       	ldd	r24, Y+29	; 0x1d
     79a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     79c:	05 d6       	rcall	.+3082   	; 0x13a8 <__mulsf3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	83 d5       	rcall	.+2822   	; 0x12ae <__fixunssfsi>
     7a8:	dc 01       	movw	r26, r24
     7aa:	cb 01       	movw	r24, r22
     7ac:	9c a3       	std	Y+36, r25	; 0x24
     7ae:	8b a3       	std	Y+35, r24	; 0x23
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <main+0x122>
     7b2:	89 e1       	ldi	r24, 0x19	; 25
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9e a3       	std	Y+38, r25	; 0x26
     7b8:	8d a3       	std	Y+37, r24	; 0x25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ba:	8d a1       	ldd	r24, Y+37	; 0x25
     7bc:	9e a1       	ldd	r25, Y+38	; 0x26
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	f1 f7       	brne	.-4      	; 0x7be <main+0x110>
     7c2:	9e a3       	std	Y+38, r25	; 0x26
     7c4:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7c6:	8b a1       	ldd	r24, Y+35	; 0x23
     7c8:	9c a1       	ldd	r25, Y+36	; 0x24
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	9c a3       	std	Y+36, r25	; 0x24
     7ce:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7d0:	8b a1       	ldd	r24, Y+35	; 0x23
     7d2:	9c a1       	ldd	r25, Y+36	; 0x24
     7d4:	89 2b       	or	r24, r25
     7d6:	69 f7       	brne	.-38     	; 0x7b2 <main+0x104>
     7d8:	13 c0       	rjmp	.+38     	; 0x800 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7da:	6f 8d       	ldd	r22, Y+31	; 0x1f
     7dc:	78 a1       	ldd	r23, Y+32	; 0x20
     7de:	89 a1       	ldd	r24, Y+33	; 0x21
     7e0:	9a a1       	ldd	r25, Y+34	; 0x22
     7e2:	65 d5       	rcall	.+2762   	; 0x12ae <__fixunssfsi>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9c a3       	std	Y+36, r25	; 0x24
     7ea:	8b a3       	std	Y+35, r24	; 0x23
     7ec:	8b a1       	ldd	r24, Y+35	; 0x23
     7ee:	9c a1       	ldd	r25, Y+36	; 0x24
     7f0:	98 a7       	std	Y+40, r25	; 0x28
     7f2:	8f a3       	std	Y+39, r24	; 0x27
     7f4:	8f a1       	ldd	r24, Y+39	; 0x27
     7f6:	98 a5       	ldd	r25, Y+40	; 0x28
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <main+0x14a>
     7fc:	98 a7       	std	Y+40, r25	; 0x28
     7fe:	8f a3       	std	Y+39, r24	; 0x27
	_delay_ms(500);
	ioport_set_pin_level(TFT_RST, 0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	8f e1       	ldi	r24, 0x1F	; 31
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	73 de       	rcall	.-794    	; 0x4ee <ioport_set_pin_level>
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	aa ef       	ldi	r26, 0xFA	; 250
     80e:	b3 e4       	ldi	r27, 0x43	; 67
     810:	89 a7       	std	Y+41, r24	; 0x29
     812:	9a a7       	std	Y+42, r25	; 0x2a
     814:	ab a7       	std	Y+43, r26	; 0x2b
     816:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	4a e7       	ldi	r20, 0x7A	; 122
     81e:	53 e4       	ldi	r21, 0x43	; 67
     820:	69 a5       	ldd	r22, Y+41	; 0x29
     822:	7a a5       	ldd	r23, Y+42	; 0x2a
     824:	8b a5       	ldd	r24, Y+43	; 0x2b
     826:	9c a5       	ldd	r25, Y+44	; 0x2c
     828:	bf d5       	rcall	.+2942   	; 0x13a8 <__mulsf3>
     82a:	dc 01       	movw	r26, r24
     82c:	cb 01       	movw	r24, r22
     82e:	8d a7       	std	Y+45, r24	; 0x2d
     830:	9e a7       	std	Y+46, r25	; 0x2e
     832:	af a7       	std	Y+47, r26	; 0x2f
     834:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	5f e3       	ldi	r21, 0x3F	; 63
     83e:	6d a5       	ldd	r22, Y+45	; 0x2d
     840:	7e a5       	ldd	r23, Y+46	; 0x2e
     842:	8f a5       	ldd	r24, Y+47	; 0x2f
     844:	98 a9       	ldd	r25, Y+48	; 0x30
     846:	2f d5       	rcall	.+2654   	; 0x12a6 <__cmpsf2>
     848:	88 23       	and	r24, r24
     84a:	2c f4       	brge	.+10     	; 0x856 <main+0x1a8>
		__ticks = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9a ab       	std	Y+50, r25	; 0x32
     852:	89 ab       	std	Y+49, r24	; 0x31
     854:	3b c0       	rjmp	.+118    	; 0x8cc <main+0x21e>
	else if (__tmp > 65535)
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	3f ef       	ldi	r19, 0xFF	; 255
     85a:	4f e7       	ldi	r20, 0x7F	; 127
     85c:	57 e4       	ldi	r21, 0x47	; 71
     85e:	6d a5       	ldd	r22, Y+45	; 0x2d
     860:	7e a5       	ldd	r23, Y+46	; 0x2e
     862:	8f a5       	ldd	r24, Y+47	; 0x2f
     864:	98 a9       	ldd	r25, Y+48	; 0x30
     866:	9c d5       	rcall	.+2872   	; 0x13a0 <__gesf2>
     868:	18 16       	cp	r1, r24
     86a:	3c f5       	brge	.+78     	; 0x8ba <main+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e2       	ldi	r20, 0x20	; 32
     872:	51 e4       	ldi	r21, 0x41	; 65
     874:	69 a5       	ldd	r22, Y+41	; 0x29
     876:	7a a5       	ldd	r23, Y+42	; 0x2a
     878:	8b a5       	ldd	r24, Y+43	; 0x2b
     87a:	9c a5       	ldd	r25, Y+44	; 0x2c
     87c:	95 d5       	rcall	.+2858   	; 0x13a8 <__mulsf3>
     87e:	dc 01       	movw	r26, r24
     880:	cb 01       	movw	r24, r22
     882:	bc 01       	movw	r22, r24
     884:	cd 01       	movw	r24, r26
     886:	13 d5       	rcall	.+2598   	; 0x12ae <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	9a ab       	std	Y+50, r25	; 0x32
     88e:	89 ab       	std	Y+49, r24	; 0x31
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <main+0x202>
     892:	89 e1       	ldi	r24, 0x19	; 25
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	9c ab       	std	Y+52, r25	; 0x34
     898:	8b ab       	std	Y+51, r24	; 0x33
     89a:	8b a9       	ldd	r24, Y+51	; 0x33
     89c:	9c a9       	ldd	r25, Y+52	; 0x34
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <main+0x1f0>
     8a2:	9c ab       	std	Y+52, r25	; 0x34
     8a4:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	89 a9       	ldd	r24, Y+49	; 0x31
     8a8:	9a a9       	ldd	r25, Y+50	; 0x32
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	9a ab       	std	Y+50, r25	; 0x32
     8ae:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b0:	89 a9       	ldd	r24, Y+49	; 0x31
     8b2:	9a a9       	ldd	r25, Y+50	; 0x32
     8b4:	89 2b       	or	r24, r25
     8b6:	69 f7       	brne	.-38     	; 0x892 <main+0x1e4>
     8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ba:	6d a5       	ldd	r22, Y+45	; 0x2d
     8bc:	7e a5       	ldd	r23, Y+46	; 0x2e
     8be:	8f a5       	ldd	r24, Y+47	; 0x2f
     8c0:	98 a9       	ldd	r25, Y+48	; 0x30
     8c2:	f5 d4       	rcall	.+2538   	; 0x12ae <__fixunssfsi>
     8c4:	dc 01       	movw	r26, r24
     8c6:	cb 01       	movw	r24, r22
     8c8:	9a ab       	std	Y+50, r25	; 0x32
     8ca:	89 ab       	std	Y+49, r24	; 0x31
     8cc:	89 a9       	ldd	r24, Y+49	; 0x31
     8ce:	9a a9       	ldd	r25, Y+50	; 0x32
     8d0:	9e ab       	std	Y+54, r25	; 0x36
     8d2:	8d ab       	std	Y+53, r24	; 0x35
     8d4:	8d a9       	ldd	r24, Y+53	; 0x35
     8d6:	9e a9       	ldd	r25, Y+54	; 0x36
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	f1 f7       	brne	.-4      	; 0x8d8 <main+0x22a>
     8dc:	9e ab       	std	Y+54, r25	; 0x36
     8de:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(500);
	ioport_set_pin_level(TFT_RST, 1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	8f e1       	ldi	r24, 0x1F	; 31
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	03 de       	rcall	.-1018   	; 0x4ee <ioport_set_pin_level>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	aa ef       	ldi	r26, 0xFA	; 250
     8ee:	b3 e4       	ldi	r27, 0x43	; 67
     8f0:	8f ab       	std	Y+55, r24	; 0x37
     8f2:	98 af       	std	Y+56, r25	; 0x38
     8f4:	a9 af       	std	Y+57, r26	; 0x39
     8f6:	ba af       	std	Y+58, r27	; 0x3a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	4a e7       	ldi	r20, 0x7A	; 122
     8fe:	53 e4       	ldi	r21, 0x43	; 67
     900:	6f a9       	ldd	r22, Y+55	; 0x37
     902:	78 ad       	ldd	r23, Y+56	; 0x38
     904:	89 ad       	ldd	r24, Y+57	; 0x39
     906:	9a ad       	ldd	r25, Y+58	; 0x3a
     908:	4f d5       	rcall	.+2718   	; 0x13a8 <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	8b af       	std	Y+59, r24	; 0x3b
     910:	9c af       	std	Y+60, r25	; 0x3c
     912:	ad af       	std	Y+61, r26	; 0x3d
     914:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	5f e3       	ldi	r21, 0x3F	; 63
     91e:	6b ad       	ldd	r22, Y+59	; 0x3b
     920:	7c ad       	ldd	r23, Y+60	; 0x3c
     922:	8d ad       	ldd	r24, Y+61	; 0x3d
     924:	9e ad       	ldd	r25, Y+62	; 0x3e
     926:	bf d4       	rcall	.+2430   	; 0x12a6 <__cmpsf2>
     928:	88 23       	and	r24, r24
     92a:	44 f4       	brge	.+16     	; 0x93c <__stack+0x3d>
		__ticks = 1;
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	cf 96       	adiw	r24, 0x3f	; 63
     934:	fc 01       	movw	r30, r24
     936:	31 83       	std	Z+1, r19	; 0x01
     938:	20 83       	st	Z, r18
     93a:	5b c0       	rjmp	.+182    	; 0x9f2 <__stack+0xf3>
	else if (__tmp > 65535)
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	3f ef       	ldi	r19, 0xFF	; 255
     940:	4f e7       	ldi	r20, 0x7F	; 127
     942:	57 e4       	ldi	r21, 0x47	; 71
     944:	6b ad       	ldd	r22, Y+59	; 0x3b
     946:	7c ad       	ldd	r23, Y+60	; 0x3c
     948:	8d ad       	ldd	r24, Y+61	; 0x3d
     94a:	9e ad       	ldd	r25, Y+62	; 0x3e
     94c:	29 d5       	rcall	.+2642   	; 0x13a0 <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	0c f0       	brlt	.+2      	; 0x954 <__stack+0x55>
     952:	42 c0       	rjmp	.+132    	; 0x9d8 <__stack+0xd9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	40 e2       	ldi	r20, 0x20	; 32
     95a:	51 e4       	ldi	r21, 0x41	; 65
     95c:	6f a9       	ldd	r22, Y+55	; 0x37
     95e:	78 ad       	ldd	r23, Y+56	; 0x38
     960:	89 ad       	ldd	r24, Y+57	; 0x39
     962:	9a ad       	ldd	r25, Y+58	; 0x3a
     964:	21 d5       	rcall	.+2626   	; 0x13a8 <__mulsf3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	bc 01       	movw	r22, r24
     96c:	cd 01       	movw	r24, r26
     96e:	9f d4       	rcall	.+2366   	; 0x12ae <__fixunssfsi>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	9e 01       	movw	r18, r28
     976:	21 5c       	subi	r18, 0xC1	; 193
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	f9 01       	movw	r30, r18
     97c:	91 83       	std	Z+1, r25	; 0x01
     97e:	80 83       	st	Z, r24
     980:	23 c0       	rjmp	.+70     	; 0x9c8 <__stack+0xc9>
     982:	ce 01       	movw	r24, r28
     984:	8f 5b       	subi	r24, 0xBF	; 191
     986:	9f 4f       	sbci	r25, 0xFF	; 255
     988:	29 e1       	ldi	r18, 0x19	; 25
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	31 83       	std	Z+1, r19	; 0x01
     990:	20 83       	st	Z, r18
     992:	ce 01       	movw	r24, r28
     994:	8f 5b       	subi	r24, 0xBF	; 191
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	fc 01       	movw	r30, r24
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <__stack+0x9f>
     9a2:	9e 01       	movw	r18, r28
     9a4:	2f 5b       	subi	r18, 0xBF	; 191
     9a6:	3f 4f       	sbci	r19, 0xFF	; 255
     9a8:	f9 01       	movw	r30, r18
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ae:	ce 01       	movw	r24, r28
     9b0:	cf 96       	adiw	r24, 0x3f	; 63
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
     9b6:	91 81       	ldd	r25, Z+1	; 0x01
     9b8:	9c 01       	movw	r18, r24
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	31 09       	sbc	r19, r1
     9be:	ce 01       	movw	r24, r28
     9c0:	cf 96       	adiw	r24, 0x3f	; 63
     9c2:	fc 01       	movw	r30, r24
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	ce 01       	movw	r24, r28
     9ca:	cf 96       	adiw	r24, 0x3f	; 63
     9cc:	fc 01       	movw	r30, r24
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	89 2b       	or	r24, r25
     9d4:	b1 f6       	brne	.-84     	; 0x982 <__stack+0x83>
     9d6:	27 c0       	rjmp	.+78     	; 0xa26 <__stack+0x127>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9d8:	6b ad       	ldd	r22, Y+59	; 0x3b
     9da:	7c ad       	ldd	r23, Y+60	; 0x3c
     9dc:	8d ad       	ldd	r24, Y+61	; 0x3d
     9de:	9e ad       	ldd	r25, Y+62	; 0x3e
     9e0:	66 d4       	rcall	.+2252   	; 0x12ae <__fixunssfsi>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	9e 01       	movw	r18, r28
     9e8:	21 5c       	subi	r18, 0xC1	; 193
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	f9 01       	movw	r30, r18
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	80 83       	st	Z, r24
     9f2:	ce 01       	movw	r24, r28
     9f4:	8d 5b       	subi	r24, 0xBD	; 189
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	9e 01       	movw	r18, r28
     9fa:	21 5c       	subi	r18, 0xC1	; 193
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	31 81       	ldd	r19, Z+1	; 0x01
     a04:	fc 01       	movw	r30, r24
     a06:	31 83       	std	Z+1, r19	; 0x01
     a08:	20 83       	st	Z, r18
     a0a:	ce 01       	movw	r24, r28
     a0c:	8d 5b       	subi	r24, 0xBD	; 189
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	f1 f7       	brne	.-4      	; 0xa16 <__stack+0x117>
     a1a:	9e 01       	movw	r18, r28
     a1c:	2d 5b       	subi	r18, 0xBD	; 189
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	f9 01       	movw	r30, r18
     a22:	91 83       	std	Z+1, r25	; 0x01
     a24:	80 83       	st	Z, r24
	_delay_ms(500);
	ioport_set_pin_level(TFT_CS, 1); // active low
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	60 dd       	rcall	.-1344   	; 0x4ee <ioport_set_pin_level>
     a2e:	9e 01       	movw	r18, r28
     a30:	2b 5b       	subi	r18, 0xBB	; 187
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	aa ef       	ldi	r26, 0xFA	; 250
     a3a:	b3 e4       	ldi	r27, 0x43	; 67
     a3c:	f9 01       	movw	r30, r18
     a3e:	80 83       	st	Z, r24
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	a2 83       	std	Z+2, r26	; 0x02
     a44:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a46:	8e 01       	movw	r16, r28
     a48:	07 5b       	subi	r16, 0xB7	; 183
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	ce 01       	movw	r24, r28
     a4e:	8b 5b       	subi	r24, 0xBB	; 187
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	53 e4       	ldi	r21, 0x43	; 67
     a5a:	fc 01       	movw	r30, r24
     a5c:	60 81       	ld	r22, Z
     a5e:	71 81       	ldd	r23, Z+1	; 0x01
     a60:	82 81       	ldd	r24, Z+2	; 0x02
     a62:	93 81       	ldd	r25, Z+3	; 0x03
     a64:	a1 d4       	rcall	.+2370   	; 0x13a8 <__mulsf3>
     a66:	dc 01       	movw	r26, r24
     a68:	cb 01       	movw	r24, r22
     a6a:	f8 01       	movw	r30, r16
     a6c:	80 83       	st	Z, r24
     a6e:	91 83       	std	Z+1, r25	; 0x01
     a70:	a2 83       	std	Z+2, r26	; 0x02
     a72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a74:	ce 01       	movw	r24, r28
     a76:	87 5b       	subi	r24, 0xB7	; 183
     a78:	9f 4f       	sbci	r25, 0xFF	; 255
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	40 e8       	ldi	r20, 0x80	; 128
     a80:	5f e3       	ldi	r21, 0x3F	; 63
     a82:	fc 01       	movw	r30, r24
     a84:	60 81       	ld	r22, Z
     a86:	71 81       	ldd	r23, Z+1	; 0x01
     a88:	82 81       	ldd	r24, Z+2	; 0x02
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	0c d4       	rcall	.+2072   	; 0x12a6 <__cmpsf2>
     a8e:	88 23       	and	r24, r24
     a90:	4c f4       	brge	.+18     	; 0xaa4 <__stack+0x1a5>
		__ticks = 1;
     a92:	ce 01       	movw	r24, r28
     a94:	83 5b       	subi	r24, 0xB3	; 179
     a96:	9f 4f       	sbci	r25, 0xFF	; 255
     a98:	21 e0       	ldi	r18, 0x01	; 1
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	fc 01       	movw	r30, r24
     a9e:	31 83       	std	Z+1, r19	; 0x01
     aa0:	20 83       	st	Z, r18
     aa2:	69 c0       	rjmp	.+210    	; 0xb76 <__stack+0x277>
	else if (__tmp > 65535)
     aa4:	ce 01       	movw	r24, r28
     aa6:	87 5b       	subi	r24, 0xB7	; 183
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	57 e4       	ldi	r21, 0x47	; 71
     ab2:	fc 01       	movw	r30, r24
     ab4:	60 81       	ld	r22, Z
     ab6:	71 81       	ldd	r23, Z+1	; 0x01
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	71 d4       	rcall	.+2274   	; 0x13a0 <__gesf2>
     abe:	18 16       	cp	r1, r24
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <__stack+0x1c5>
     ac2:	48 c0       	rjmp	.+144    	; 0xb54 <__stack+0x255>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac4:	ce 01       	movw	r24, r28
     ac6:	8b 5b       	subi	r24, 0xBB	; 187
     ac8:	9f 4f       	sbci	r25, 0xFF	; 255
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e2       	ldi	r20, 0x20	; 32
     ad0:	51 e4       	ldi	r21, 0x41	; 65
     ad2:	fc 01       	movw	r30, r24
     ad4:	60 81       	ld	r22, Z
     ad6:	71 81       	ldd	r23, Z+1	; 0x01
     ad8:	82 81       	ldd	r24, Z+2	; 0x02
     ada:	93 81       	ldd	r25, Z+3	; 0x03
     adc:	65 d4       	rcall	.+2250   	; 0x13a8 <__mulsf3>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	8e 01       	movw	r16, r28
     ae4:	03 5b       	subi	r16, 0xB3	; 179
     ae6:	1f 4f       	sbci	r17, 0xFF	; 255
     ae8:	bc 01       	movw	r22, r24
     aea:	cd 01       	movw	r24, r26
     aec:	e0 d3       	rcall	.+1984   	; 0x12ae <__fixunssfsi>
     aee:	dc 01       	movw	r26, r24
     af0:	cb 01       	movw	r24, r22
     af2:	f8 01       	movw	r30, r16
     af4:	91 83       	std	Z+1, r25	; 0x01
     af6:	80 83       	st	Z, r24
     af8:	24 c0       	rjmp	.+72     	; 0xb42 <__stack+0x243>
     afa:	ce 01       	movw	r24, r28
     afc:	81 5b       	subi	r24, 0xB1	; 177
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	29 e1       	ldi	r18, 0x19	; 25
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	31 83       	std	Z+1, r19	; 0x01
     b08:	20 83       	st	Z, r18
     b0a:	ce 01       	movw	r24, r28
     b0c:	81 5b       	subi	r24, 0xB1	; 177
     b0e:	9f 4f       	sbci	r25, 0xFF	; 255
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <__stack+0x217>
     b1a:	9e 01       	movw	r18, r28
     b1c:	21 5b       	subi	r18, 0xB1	; 177
     b1e:	3f 4f       	sbci	r19, 0xFF	; 255
     b20:	f9 01       	movw	r30, r18
     b22:	91 83       	std	Z+1, r25	; 0x01
     b24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b26:	ce 01       	movw	r24, r28
     b28:	83 5b       	subi	r24, 0xB3	; 179
     b2a:	9f 4f       	sbci	r25, 0xFF	; 255
     b2c:	9e 01       	movw	r18, r28
     b2e:	23 5b       	subi	r18, 0xB3	; 179
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	31 81       	ldd	r19, Z+1	; 0x01
     b38:	21 50       	subi	r18, 0x01	; 1
     b3a:	31 09       	sbc	r19, r1
     b3c:	fc 01       	movw	r30, r24
     b3e:	31 83       	std	Z+1, r19	; 0x01
     b40:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b42:	ce 01       	movw	r24, r28
     b44:	83 5b       	subi	r24, 0xB3	; 179
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	fc 01       	movw	r30, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	91 81       	ldd	r25, Z+1	; 0x01
     b4e:	89 2b       	or	r24, r25
     b50:	a1 f6       	brne	.-88     	; 0xafa <__stack+0x1fb>
     b52:	2b c0       	rjmp	.+86     	; 0xbaa <__stack+0x2ab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b54:	8e 01       	movw	r16, r28
     b56:	03 5b       	subi	r16, 0xB3	; 179
     b58:	1f 4f       	sbci	r17, 0xFF	; 255
     b5a:	ce 01       	movw	r24, r28
     b5c:	87 5b       	subi	r24, 0xB7	; 183
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	fc 01       	movw	r30, r24
     b62:	60 81       	ld	r22, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	a1 d3       	rcall	.+1858   	; 0x12ae <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	f8 01       	movw	r30, r16
     b72:	91 83       	std	Z+1, r25	; 0x01
     b74:	80 83       	st	Z, r24
     b76:	ce 01       	movw	r24, r28
     b78:	8f 5a       	subi	r24, 0xAF	; 175
     b7a:	9f 4f       	sbci	r25, 0xFF	; 255
     b7c:	9e 01       	movw	r18, r28
     b7e:	23 5b       	subi	r18, 0xB3	; 179
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	f9 01       	movw	r30, r18
     b84:	20 81       	ld	r18, Z
     b86:	31 81       	ldd	r19, Z+1	; 0x01
     b88:	fc 01       	movw	r30, r24
     b8a:	31 83       	std	Z+1, r19	; 0x01
     b8c:	20 83       	st	Z, r18
     b8e:	ce 01       	movw	r24, r28
     b90:	8f 5a       	subi	r24, 0xAF	; 175
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	fc 01       	movw	r30, r24
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <__stack+0x29b>
     b9e:	9e 01       	movw	r18, r28
     ba0:	2f 5a       	subi	r18, 0xAF	; 175
     ba2:	3f 4f       	sbci	r19, 0xFF	; 255
     ba4:	f9 01       	movw	r30, r18
     ba6:	91 83       	std	Z+1, r25	; 0x01
     ba8:	80 83       	st	Z, r24
	_delay_ms(500);
	ioport_set_pin_level(TFT_CS, 0); // active low
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	8e e1       	ldi	r24, 0x1E	; 30
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	9e dc       	rcall	.-1732   	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(TFT_DC, 0); // active low
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	9a dc       	rcall	.-1740   	; 0x4ee <ioport_set_pin_level>
	
	transmitByte = 0x29; // Turn on command
     bba:	89 e2       	ldi	r24, 0x29	; 41
     bbc:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte);
     bbe:	89 8d       	ldd	r24, Y+25	; 0x19
     bc0:	60 dd       	rcall	.-1344   	; 0x682 <SPI_MasterTransmit>
     bc2:	9e 01       	movw	r18, r28
     bc4:	2d 5a       	subi	r18, 0xAD	; 173
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	aa ef       	ldi	r26, 0xFA	; 250
     bce:	b3 e4       	ldi	r27, 0x43	; 67
     bd0:	f9 01       	movw	r30, r18
     bd2:	80 83       	st	Z, r24
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	a2 83       	std	Z+2, r26	; 0x02
     bd8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bda:	8e 01       	movw	r16, r28
     bdc:	09 5a       	subi	r16, 0xA9	; 169
     bde:	1f 4f       	sbci	r17, 0xFF	; 255
     be0:	ce 01       	movw	r24, r28
     be2:	8d 5a       	subi	r24, 0xAD	; 173
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	4a e7       	ldi	r20, 0x7A	; 122
     bec:	53 e4       	ldi	r21, 0x43	; 67
     bee:	fc 01       	movw	r30, r24
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	82 81       	ldd	r24, Z+2	; 0x02
     bf6:	93 81       	ldd	r25, Z+3	; 0x03
     bf8:	d7 d3       	rcall	.+1966   	; 0x13a8 <__mulsf3>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	f8 01       	movw	r30, r16
     c00:	80 83       	st	Z, r24
     c02:	91 83       	std	Z+1, r25	; 0x01
     c04:	a2 83       	std	Z+2, r26	; 0x02
     c06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c08:	ce 01       	movw	r24, r28
     c0a:	89 5a       	subi	r24, 0xA9	; 169
     c0c:	9f 4f       	sbci	r25, 0xFF	; 255
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e8       	ldi	r20, 0x80	; 128
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	fc 01       	movw	r30, r24
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	42 d3       	rcall	.+1668   	; 0x12a6 <__cmpsf2>
     c22:	88 23       	and	r24, r24
     c24:	4c f4       	brge	.+18     	; 0xc38 <__stack+0x339>
		__ticks = 1;
     c26:	ce 01       	movw	r24, r28
     c28:	85 5a       	subi	r24, 0xA5	; 165
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	21 e0       	ldi	r18, 0x01	; 1
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	31 83       	std	Z+1, r19	; 0x01
     c34:	20 83       	st	Z, r18
     c36:	69 c0       	rjmp	.+210    	; 0xd0a <__stack+0x40b>
	else if (__tmp > 65535)
     c38:	ce 01       	movw	r24, r28
     c3a:	89 5a       	subi	r24, 0xA9	; 169
     c3c:	9f 4f       	sbci	r25, 0xFF	; 255
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	3f ef       	ldi	r19, 0xFF	; 255
     c42:	4f e7       	ldi	r20, 0x7F	; 127
     c44:	57 e4       	ldi	r21, 0x47	; 71
     c46:	fc 01       	movw	r30, r24
     c48:	60 81       	ld	r22, Z
     c4a:	71 81       	ldd	r23, Z+1	; 0x01
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	a7 d3       	rcall	.+1870   	; 0x13a0 <__gesf2>
     c52:	18 16       	cp	r1, r24
     c54:	0c f0       	brlt	.+2      	; 0xc58 <__stack+0x359>
     c56:	48 c0       	rjmp	.+144    	; 0xce8 <__stack+0x3e9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	ce 01       	movw	r24, r28
     c5a:	8d 5a       	subi	r24, 0xAD	; 173
     c5c:	9f 4f       	sbci	r25, 0xFF	; 255
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e2       	ldi	r20, 0x20	; 32
     c64:	51 e4       	ldi	r21, 0x41	; 65
     c66:	fc 01       	movw	r30, r24
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	9b d3       	rcall	.+1846   	; 0x13a8 <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8e 01       	movw	r16, r28
     c78:	05 5a       	subi	r16, 0xA5	; 165
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	16 d3       	rcall	.+1580   	; 0x12ae <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	f8 01       	movw	r30, r16
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
     c8c:	24 c0       	rjmp	.+72     	; 0xcd6 <__stack+0x3d7>
     c8e:	ce 01       	movw	r24, r28
     c90:	83 5a       	subi	r24, 0xA3	; 163
     c92:	9f 4f       	sbci	r25, 0xFF	; 255
     c94:	29 e1       	ldi	r18, 0x19	; 25
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	fc 01       	movw	r30, r24
     c9a:	31 83       	std	Z+1, r19	; 0x01
     c9c:	20 83       	st	Z, r18
     c9e:	ce 01       	movw	r24, r28
     ca0:	83 5a       	subi	r24, 0xA3	; 163
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	91 81       	ldd	r25, Z+1	; 0x01
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <__stack+0x3ab>
     cae:	9e 01       	movw	r18, r28
     cb0:	23 5a       	subi	r18, 0xA3	; 163
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	f9 01       	movw	r30, r18
     cb6:	91 83       	std	Z+1, r25	; 0x01
     cb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cba:	ce 01       	movw	r24, r28
     cbc:	85 5a       	subi	r24, 0xA5	; 165
     cbe:	9f 4f       	sbci	r25, 0xFF	; 255
     cc0:	9e 01       	movw	r18, r28
     cc2:	25 5a       	subi	r18, 0xA5	; 165
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
     cc6:	f9 01       	movw	r30, r18
     cc8:	20 81       	ld	r18, Z
     cca:	31 81       	ldd	r19, Z+1	; 0x01
     ccc:	21 50       	subi	r18, 0x01	; 1
     cce:	31 09       	sbc	r19, r1
     cd0:	fc 01       	movw	r30, r24
     cd2:	31 83       	std	Z+1, r19	; 0x01
     cd4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd6:	ce 01       	movw	r24, r28
     cd8:	85 5a       	subi	r24, 0xA5	; 165
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	89 2b       	or	r24, r25
     ce4:	a1 f6       	brne	.-88     	; 0xc8e <__stack+0x38f>
     ce6:	2b c0       	rjmp	.+86     	; 0xd3e <__stack+0x43f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce8:	8e 01       	movw	r16, r28
     cea:	05 5a       	subi	r16, 0xA5	; 165
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	ce 01       	movw	r24, r28
     cf0:	89 5a       	subi	r24, 0xA9	; 169
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	fc 01       	movw	r30, r24
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	d7 d2       	rcall	.+1454   	; 0x12ae <__fixunssfsi>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	f8 01       	movw	r30, r16
     d06:	91 83       	std	Z+1, r25	; 0x01
     d08:	80 83       	st	Z, r24
     d0a:	ce 01       	movw	r24, r28
     d0c:	81 5a       	subi	r24, 0xA1	; 161
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	9e 01       	movw	r18, r28
     d12:	25 5a       	subi	r18, 0xA5	; 165
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	31 81       	ldd	r19, Z+1	; 0x01
     d1c:	fc 01       	movw	r30, r24
     d1e:	31 83       	std	Z+1, r19	; 0x01
     d20:	20 83       	st	Z, r18
     d22:	ce 01       	movw	r24, r28
     d24:	81 5a       	subi	r24, 0xA1	; 161
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	fc 01       	movw	r30, r24
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	f1 f7       	brne	.-4      	; 0xd2e <__stack+0x42f>
     d32:	9e 01       	movw	r18, r28
     d34:	21 5a       	subi	r18, 0xA1	; 161
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	f9 01       	movw	r30, r18
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
	_delay_ms(500);
	transmitByte = 0x11; // Turn off sleep
     d3e:	81 e1       	ldi	r24, 0x11	; 17
     d40:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte);
     d42:	89 8d       	ldd	r24, Y+25	; 0x19
     d44:	9e dc       	rcall	.-1732   	; 0x682 <SPI_MasterTransmit>
     d46:	9e 01       	movw	r18, r28
     d48:	2f 59       	subi	r18, 0x9F	; 159
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	aa ef       	ldi	r26, 0xFA	; 250
     d52:	b3 e4       	ldi	r27, 0x43	; 67
     d54:	f9 01       	movw	r30, r18
     d56:	80 83       	st	Z, r24
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	a2 83       	std	Z+2, r26	; 0x02
     d5c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	8e 01       	movw	r16, r28
     d60:	0b 59       	subi	r16, 0x9B	; 155
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	ce 01       	movw	r24, r28
     d66:	8f 59       	subi	r24, 0x9F	; 159
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	4a e7       	ldi	r20, 0x7A	; 122
     d70:	53 e4       	ldi	r21, 0x43	; 67
     d72:	fc 01       	movw	r30, r24
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	15 d3       	rcall	.+1578   	; 0x13a8 <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	f8 01       	movw	r30, r16
     d84:	80 83       	st	Z, r24
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	a2 83       	std	Z+2, r26	; 0x02
     d8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d8c:	ce 01       	movw	r24, r28
     d8e:	8b 59       	subi	r24, 0x9B	; 155
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	fc 01       	movw	r30, r24
     d9c:	60 81       	ld	r22, Z
     d9e:	71 81       	ldd	r23, Z+1	; 0x01
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	80 d2       	rcall	.+1280   	; 0x12a6 <__cmpsf2>
     da6:	88 23       	and	r24, r24
     da8:	4c f4       	brge	.+18     	; 0xdbc <__stack+0x4bd>
		__ticks = 1;
     daa:	ce 01       	movw	r24, r28
     dac:	87 59       	subi	r24, 0x97	; 151
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	31 83       	std	Z+1, r19	; 0x01
     db8:	20 83       	st	Z, r18
     dba:	69 c0       	rjmp	.+210    	; 0xe8e <__stack+0x58f>
	else if (__tmp > 65535)
     dbc:	ce 01       	movw	r24, r28
     dbe:	8b 59       	subi	r24, 0x9B	; 155
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	fc 01       	movw	r30, r24
     dcc:	60 81       	ld	r22, Z
     dce:	71 81       	ldd	r23, Z+1	; 0x01
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	93 81       	ldd	r25, Z+3	; 0x03
     dd4:	e5 d2       	rcall	.+1482   	; 0x13a0 <__gesf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	0c f0       	brlt	.+2      	; 0xddc <__stack+0x4dd>
     dda:	48 c0       	rjmp	.+144    	; 0xe6c <__stack+0x56d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	ce 01       	movw	r24, r28
     dde:	8f 59       	subi	r24, 0x9F	; 159
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	fc 01       	movw	r30, r24
     dec:	60 81       	ld	r22, Z
     dee:	71 81       	ldd	r23, Z+1	; 0x01
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	d9 d2       	rcall	.+1458   	; 0x13a8 <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	8e 01       	movw	r16, r28
     dfc:	07 59       	subi	r16, 0x97	; 151
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	54 d2       	rcall	.+1192   	; 0x12ae <__fixunssfsi>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	f8 01       	movw	r30, r16
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
     e10:	24 c0       	rjmp	.+72     	; 0xe5a <__stack+0x55b>
     e12:	ce 01       	movw	r24, r28
     e14:	85 59       	subi	r24, 0x95	; 149
     e16:	9f 4f       	sbci	r25, 0xFF	; 255
     e18:	29 e1       	ldi	r18, 0x19	; 25
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	31 83       	std	Z+1, r19	; 0x01
     e20:	20 83       	st	Z, r18
     e22:	ce 01       	movw	r24, r28
     e24:	85 59       	subi	r24, 0x95	; 149
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	fc 01       	movw	r30, r24
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <__stack+0x52f>
     e32:	9e 01       	movw	r18, r28
     e34:	25 59       	subi	r18, 0x95	; 149
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	f9 01       	movw	r30, r18
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3e:	ce 01       	movw	r24, r28
     e40:	87 59       	subi	r24, 0x97	; 151
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	9e 01       	movw	r18, r28
     e46:	27 59       	subi	r18, 0x97	; 151
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	31 81       	ldd	r19, Z+1	; 0x01
     e50:	21 50       	subi	r18, 0x01	; 1
     e52:	31 09       	sbc	r19, r1
     e54:	fc 01       	movw	r30, r24
     e56:	31 83       	std	Z+1, r19	; 0x01
     e58:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5a:	ce 01       	movw	r24, r28
     e5c:	87 59       	subi	r24, 0x97	; 151
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	fc 01       	movw	r30, r24
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	89 2b       	or	r24, r25
     e68:	a1 f6       	brne	.-88     	; 0xe12 <__stack+0x513>
     e6a:	2b c0       	rjmp	.+86     	; 0xec2 <__stack+0x5c3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	8e 01       	movw	r16, r28
     e6e:	07 59       	subi	r16, 0x97	; 151
     e70:	1f 4f       	sbci	r17, 0xFF	; 255
     e72:	ce 01       	movw	r24, r28
     e74:	8b 59       	subi	r24, 0x9B	; 155
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	fc 01       	movw	r30, r24
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	15 d2       	rcall	.+1066   	; 0x12ae <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	f8 01       	movw	r30, r16
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	ce 01       	movw	r24, r28
     e90:	83 59       	subi	r24, 0x93	; 147
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	9e 01       	movw	r18, r28
     e96:	27 59       	subi	r18, 0x97	; 151
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	f9 01       	movw	r30, r18
     e9c:	20 81       	ld	r18, Z
     e9e:	31 81       	ldd	r19, Z+1	; 0x01
     ea0:	fc 01       	movw	r30, r24
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	20 83       	st	Z, r18
     ea6:	ce 01       	movw	r24, r28
     ea8:	83 59       	subi	r24, 0x93	; 147
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	fc 01       	movw	r30, r24
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <__stack+0x5b3>
     eb6:	9e 01       	movw	r18, r28
     eb8:	23 59       	subi	r18, 0x93	; 147
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	f9 01       	movw	r30, r18
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	80 83       	st	Z, r24
		temp = SPDR;
	}
	*/


	transmitByte = 0x3a; // Color mode
     ec2:	8a e3       	ldi	r24, 0x3A	; 58
     ec4:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte);
     ec6:	89 8d       	ldd	r24, Y+25	; 0x19
     ec8:	dc db       	rcall	.-2120   	; 0x682 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	88 e0       	ldi	r24, 0x08	; 8
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e db       	rcall	.-2532   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x03;// 4-4-4 RGB
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte); // send byte
     ed6:	89 8d       	ldd	r24, Y+25	; 0x19
     ed8:	d4 db       	rcall	.-2136   	; 0x682 <SPI_MasterTransmit>
	
	// Here be were I program the LUT
	ioport_set_pin_level(TFT_DC, 0);
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	88 e0       	ldi	r24, 0x08	; 8
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	06 db       	rcall	.-2548   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x2d;  // write command
     ee2:	8d e2       	ldi	r24, 0x2D	; 45
     ee4:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte); // Sen byte
     ee6:	89 8d       	ldd	r24, Y+25	; 0x19
     ee8:	cc db       	rcall	.-2152   	; 0x682 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	fe da       	rcall	.-2564   	; 0x4ee <ioport_set_pin_level>
	//ioport_set_pin_mode(TFT_CS, IOPORT_MODE_PULLDOWN);
	for(int i = 0; i <= 0x0f; i++) // Red part1
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	19 82       	std	Y+1, r1	; 0x01
     ef6:	09 c0       	rjmp	.+18     	; 0xf0a <__stack+0x60b>
	{
		transmitByte = i;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
     efc:	89 8d       	ldd	r24, Y+25	; 0x19
     efe:	c1 db       	rcall	.-2174   	; 0x682 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 0);
	transmitByte = 0x2d;  // write command
	SPI_MasterTransmit(transmitByte); // Sen byte
	ioport_set_pin_level(TFT_DC, 1);
	//ioport_set_pin_mode(TFT_CS, IOPORT_MODE_PULLDOWN);
	for(int i = 0; i <= 0x0f; i++) // Red part1
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	40 97       	sbiw	r24, 0x10	; 16
     f10:	9c f3       	brlt	.-26     	; 0xef8 <__stack+0x5f9>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
     f12:	81 e1       	ldi	r24, 0x11	; 17
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <__stack+0x62d>
	{
		transmitByte = 0;
     f1c:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
     f1e:	89 8d       	ldd	r24, Y+25	; 0x19
     f20:	b0 db       	rcall	.-2208   	; 0x682 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Red part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	81 97       	sbiw	r24, 0x21	; 33
     f32:	a4 f3       	brlt	.-24     	; 0xf1c <__stack+0x61d>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
     f34:	1e 82       	std	Y+6, r1	; 0x06
     f36:	1d 82       	std	Y+5, r1	; 0x05
     f38:	09 c0       	rjmp	.+18     	; 0xf4c <__stack+0x64d>
	{
		transmitByte = i;
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
     f3e:	89 8d       	ldd	r24, Y+25	; 0x19
     f40:	a0 db       	rcall	.-2240   	; 0x682 <SPI_MasterTransmit>
	for(int i = 17; i <= 32; i++) // red part2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	40 97       	sbiw	r24, 0x10	; 16
     f52:	9c f3       	brlt	.-26     	; 0xf3a <__stack+0x63b>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
     f54:	81 e3       	ldi	r24, 0x31	; 49
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	98 87       	std	Y+8, r25	; 0x08
     f5a:	8f 83       	std	Y+7, r24	; 0x07
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <__stack+0x66f>
	{
		transmitByte = 0;
     f5e:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
     f60:	89 8d       	ldd	r24, Y+25	; 0x19
     f62:	8f db       	rcall	.-2274   	; 0x682 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // green part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
     f64:	8f 81       	ldd	r24, Y+7	; 0x07
     f66:	98 85       	ldd	r25, Y+8	; 0x08
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	98 87       	std	Y+8, r25	; 0x08
     f6c:	8f 83       	std	Y+7, r24	; 0x07
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
     f70:	98 85       	ldd	r25, Y+8	; 0x08
     f72:	81 36       	cpi	r24, 0x61	; 97
     f74:	91 05       	cpc	r25, r1
     f76:	9c f3       	brlt	.-26     	; 0xf5e <__stack+0x65f>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
     f78:	1a 86       	std	Y+10, r1	; 0x0a
     f7a:	19 86       	std	Y+9, r1	; 0x09
     f7c:	09 c0       	rjmp	.+18     	; 0xf90 <__stack+0x691>
	{
		transmitByte = i;
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
     f82:	89 8d       	ldd	r24, Y+25	; 0x19
     f84:	7e db       	rcall	.-2308   	; 0x682 <SPI_MasterTransmit>
	for(int i = 49; i <= 96; i++) // green part 2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	9a 87       	std	Y+10, r25	; 0x0a
     f8e:	89 87       	std	Y+9, r24	; 0x09
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	40 97       	sbiw	r24, 0x10	; 16
     f96:	9c f3       	brlt	.-26     	; 0xf7e <__stack+0x67f>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
     f98:	81 e7       	ldi	r24, 0x71	; 113
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9c 87       	std	Y+12, r25	; 0x0c
     f9e:	8b 87       	std	Y+11, r24	; 0x0b
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <__stack+0x6b3>
	{
		transmitByte = 0;
     fa2:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
     fa4:	89 8d       	ldd	r24, Y+25	; 0x19
     fa6:	6d db       	rcall	.-2342   	; 0x682 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Blue part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
     fa8:	8b 85       	ldd	r24, Y+11	; 0x0b
     faa:	9c 85       	ldd	r25, Y+12	; 0x0c
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	8b 87       	std	Y+11, r24	; 0x0b
     fb2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb4:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb6:	81 38       	cpi	r24, 0x81	; 129
     fb8:	91 05       	cpc	r25, r1
     fba:	9c f3       	brlt	.-26     	; 0xfa2 <__stack+0x6a3>
     fbc:	9e 01       	movw	r18, r28
     fbe:	21 59       	subi	r18, 0x91	; 145
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	aa ef       	ldi	r26, 0xFA	; 250
     fc8:	b3 e4       	ldi	r27, 0x43	; 67
     fca:	f9 01       	movw	r30, r18
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	8e 01       	movw	r16, r28
     fd6:	0d 58       	subi	r16, 0x8D	; 141
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	ce 01       	movw	r24, r28
     fdc:	81 59       	subi	r24, 0x91	; 145
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a e7       	ldi	r20, 0x7A	; 122
     fe6:	53 e4       	ldi	r21, 0x43	; 67
     fe8:	fc 01       	movw	r30, r24
     fea:	60 81       	ld	r22, Z
     fec:	71 81       	ldd	r23, Z+1	; 0x01
     fee:	82 81       	ldd	r24, Z+2	; 0x02
     ff0:	93 81       	ldd	r25, Z+3	; 0x03
     ff2:	da d1       	rcall	.+948    	; 0x13a8 <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	ce 01       	movw	r24, r28
    1004:	8d 58       	subi	r24, 0x8D	; 141
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	fc 01       	movw	r30, r24
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	45 d1       	rcall	.+650    	; 0x12a6 <__cmpsf2>
    101c:	88 23       	and	r24, r24
    101e:	4c f4       	brge	.+18     	; 0x1032 <__stack+0x733>
		__ticks = 1;
    1020:	ce 01       	movw	r24, r28
    1022:	89 58       	subi	r24, 0x89	; 137
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	fc 01       	movw	r30, r24
    102c:	31 83       	std	Z+1, r19	; 0x01
    102e:	20 83       	st	Z, r18
    1030:	69 c0       	rjmp	.+210    	; 0x1104 <__stack+0x805>
	else if (__tmp > 65535)
    1032:	ce 01       	movw	r24, r28
    1034:	8d 58       	subi	r24, 0x8D	; 141
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	3f ef       	ldi	r19, 0xFF	; 255
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	57 e4       	ldi	r21, 0x47	; 71
    1040:	fc 01       	movw	r30, r24
    1042:	60 81       	ld	r22, Z
    1044:	71 81       	ldd	r23, Z+1	; 0x01
    1046:	82 81       	ldd	r24, Z+2	; 0x02
    1048:	93 81       	ldd	r25, Z+3	; 0x03
    104a:	aa d1       	rcall	.+852    	; 0x13a0 <__gesf2>
    104c:	18 16       	cp	r1, r24
    104e:	0c f0       	brlt	.+2      	; 0x1052 <__stack+0x753>
    1050:	48 c0       	rjmp	.+144    	; 0x10e2 <__stack+0x7e3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	ce 01       	movw	r24, r28
    1054:	81 59       	subi	r24, 0x91	; 145
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	fc 01       	movw	r30, r24
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	9e d1       	rcall	.+828    	; 0x13a8 <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	8e 01       	movw	r16, r28
    1072:	09 58       	subi	r16, 0x89	; 137
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	19 d1       	rcall	.+562    	; 0x12ae <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f8 01       	movw	r30, r16
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	24 c0       	rjmp	.+72     	; 0x10d0 <__stack+0x7d1>
    1088:	ce 01       	movw	r24, r28
    108a:	87 58       	subi	r24, 0x87	; 135
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	29 e1       	ldi	r18, 0x19	; 25
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	fc 01       	movw	r30, r24
    1094:	31 83       	std	Z+1, r19	; 0x01
    1096:	20 83       	st	Z, r18
    1098:	ce 01       	movw	r24, r28
    109a:	87 58       	subi	r24, 0x87	; 135
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	fc 01       	movw	r30, r24
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <__stack+0x7a5>
    10a8:	9e 01       	movw	r18, r28
    10aa:	27 58       	subi	r18, 0x87	; 135
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	f9 01       	movw	r30, r18
    10b0:	91 83       	std	Z+1, r25	; 0x01
    10b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b4:	ce 01       	movw	r24, r28
    10b6:	89 58       	subi	r24, 0x89	; 137
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	9e 01       	movw	r18, r28
    10bc:	29 58       	subi	r18, 0x89	; 137
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	31 81       	ldd	r19, Z+1	; 0x01
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	31 09       	sbc	r19, r1
    10ca:	fc 01       	movw	r30, r24
    10cc:	31 83       	std	Z+1, r19	; 0x01
    10ce:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	ce 01       	movw	r24, r28
    10d2:	89 58       	subi	r24, 0x89	; 137
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	fc 01       	movw	r30, r24
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	89 2b       	or	r24, r25
    10de:	a1 f6       	brne	.-88     	; 0x1088 <__stack+0x789>
    10e0:	2b c0       	rjmp	.+86     	; 0x1138 <__stack+0x839>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e2:	8e 01       	movw	r16, r28
    10e4:	09 58       	subi	r16, 0x89	; 137
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	ce 01       	movw	r24, r28
    10ea:	8d 58       	subi	r24, 0x8D	; 141
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	fc 01       	movw	r30, r24
    10f0:	60 81       	ld	r22, Z
    10f2:	71 81       	ldd	r23, Z+1	; 0x01
    10f4:	82 81       	ldd	r24, Z+2	; 0x02
    10f6:	93 81       	ldd	r25, Z+3	; 0x03
    10f8:	da d0       	rcall	.+436    	; 0x12ae <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	f8 01       	movw	r30, r16
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
    1104:	ce 01       	movw	r24, r28
    1106:	85 58       	subi	r24, 0x85	; 133
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	9e 01       	movw	r18, r28
    110c:	29 58       	subi	r18, 0x89	; 137
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	f9 01       	movw	r30, r18
    1112:	20 81       	ld	r18, Z
    1114:	31 81       	ldd	r19, Z+1	; 0x01
    1116:	fc 01       	movw	r30, r24
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18
    111c:	ce 01       	movw	r24, r28
    111e:	85 58       	subi	r24, 0x85	; 133
    1120:	9f 4f       	sbci	r25, 0xFF	; 255
    1122:	fc 01       	movw	r30, r24
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <__stack+0x829>
    112c:	9e 01       	movw	r18, r28
    112e:	25 58       	subi	r18, 0x85	; 133
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	f9 01       	movw	r30, r18
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	80 83       	st	Z, r24
		SPI_MasterTransmit(transmitByte);
	}

	_delay_ms(500);
	
	ioport_set_pin_level(TFT_DC, 0);
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	88 e0       	ldi	r24, 0x08	; 8
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	d7 d9       	rcall	.-3154   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x2c;  // write command
    1140:	8c e2       	ldi	r24, 0x2C	; 44
    1142:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte); // Send byte
    1144:	89 8d       	ldd	r24, Y+25	; 0x19
    1146:	9d da       	rcall	.-2758   	; 0x682 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	88 e0       	ldi	r24, 0x08	; 8
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	cf d9       	rcall	.-3170   	; 0x4ee <ioport_set_pin_level>
	
	// to fix rgb order
	//transmitByte = 0xff;
	//SPI_MasterTransmit(transmitByte);
	
	for (int i = 0; i < WIDTH*LENGTH; i++) // once for every three bytes
    1150:	1e 86       	std	Y+14, r1	; 0x0e
    1152:	1d 86       	std	Y+13, r1	; 0x0d
    1154:	0e c0       	rjmp	.+28     	; 0x1172 <__stack+0x873>
	{
		transmitByte = 0x00;
    1156:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
    1158:	89 8d       	ldd	r24, Y+25	; 0x19
    115a:	93 da       	rcall	.-2778   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x00;
    115c:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
    115e:	89 8d       	ldd	r24, Y+25	; 0x19
    1160:	90 da       	rcall	.-2784   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x00;
    1162:	19 8e       	std	Y+25, r1	; 0x19
		SPI_MasterTransmit(transmitByte);
    1164:	89 8d       	ldd	r24, Y+25	; 0x19
    1166:	8d da       	rcall	.-2790   	; 0x682 <SPI_MasterTransmit>
	
	// to fix rgb order
	//transmitByte = 0xff;
	//SPI_MasterTransmit(transmitByte);
	
	for (int i = 0; i < WIDTH*LENGTH; i++) // once for every three bytes
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	9e 87       	std	Y+14, r25	; 0x0e
    1170:	8d 87       	std	Y+13, r24	; 0x0d
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	8c 38       	cpi	r24, 0x8C	; 140
    1178:	93 44       	sbci	r25, 0x43	; 67
    117a:	6c f3       	brlt	.-38     	; 0x1156 <__stack+0x857>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;	
	}
	for (int i = 0; i < WIDTH*START_OFFSET; i++) // once for every three bytes
    117c:	18 8a       	std	Y+16, r1	; 0x10
    117e:	1f 86       	std	Y+15, r1	; 0x0f
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <__stack+0x8a5>
	{
		transmitByte = 0xff;
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    1186:	89 8d       	ldd	r24, Y+25	; 0x19
    1188:	7c da       	rcall	.-2824   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0xff;
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    118e:	89 8d       	ldd	r24, Y+25	; 0x19
    1190:	78 da       	rcall	.-2832   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0xff;
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    1196:	89 8d       	ldd	r24, Y+25	; 0x19
    1198:	74 da       	rcall	.-2840   	; 0x682 <SPI_MasterTransmit>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;	
	}
	for (int i = 0; i < WIDTH*START_OFFSET; i++) // once for every three bytes
    119a:	8f 85       	ldd	r24, Y+15	; 0x0f
    119c:	98 89       	ldd	r25, Y+16	; 0x10
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	98 8b       	std	Y+16, r25	; 0x10
    11a2:	8f 87       	std	Y+15, r24	; 0x0f
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	98 89       	ldd	r25, Y+16	; 0x10
    11a8:	84 38       	cpi	r24, 0x84	; 132
    11aa:	91 05       	cpc	r25, r1
    11ac:	54 f3       	brlt	.-44     	; 0x1182 <__stack+0x883>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//blue
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    11ae:	1a 8a       	std	Y+18, r1	; 0x12
    11b0:	19 8a       	std	Y+17, r1	; 0x11
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <__stack+0x8d7>
	{
		transmitByte = 0xf1;
    11b4:	81 ef       	ldi	r24, 0xF1	; 241
    11b6:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11b8:	89 8d       	ldd	r24, Y+25	; 0x19
    11ba:	63 da       	rcall	.-2874   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x1f;
    11bc:	8f e1       	ldi	r24, 0x1F	; 31
    11be:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11c0:	89 8d       	ldd	r24, Y+25	; 0x19
    11c2:	5f da       	rcall	.-2882   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x11;
    11c4:	81 e1       	ldi	r24, 0x11	; 17
    11c6:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11c8:	89 8d       	ldd	r24, Y+25	; 0x19
    11ca:	5b da       	rcall	.-2890   	; 0x682 <SPI_MasterTransmit>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//blue
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    11cc:	89 89       	ldd	r24, Y+17	; 0x11
    11ce:	9a 89       	ldd	r25, Y+18	; 0x12
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	9a 8b       	std	Y+18, r25	; 0x12
    11d4:	89 8b       	std	Y+17, r24	; 0x11
    11d6:	89 89       	ldd	r24, Y+17	; 0x11
    11d8:	9a 89       	ldd	r25, Y+18	; 0x12
    11da:	8c 38       	cpi	r24, 0x8C	; 140
    11dc:	91 40       	sbci	r25, 0x01	; 1
    11de:	54 f3       	brlt	.-44     	; 0x11b4 <__stack+0x8b5>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//green
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    11e0:	1c 8a       	std	Y+20, r1	; 0x14
    11e2:	1b 8a       	std	Y+19, r1	; 0x13
    11e4:	11 c0       	rjmp	.+34     	; 0x1208 <__stack+0x909>
	{
		transmitByte = 0x1f;
    11e6:	8f e1       	ldi	r24, 0x1F	; 31
    11e8:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11ea:	89 8d       	ldd	r24, Y+25	; 0x19
    11ec:	4a da       	rcall	.-2924   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x11;
    11ee:	81 e1       	ldi	r24, 0x11	; 17
    11f0:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11f2:	89 8d       	ldd	r24, Y+25	; 0x19
    11f4:	46 da       	rcall	.-2932   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0xf1;
    11f6:	81 ef       	ldi	r24, 0xF1	; 241
    11f8:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    11fa:	89 8d       	ldd	r24, Y+25	; 0x19
    11fc:	42 da       	rcall	.-2940   	; 0x682 <SPI_MasterTransmit>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//green
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1200:	9c 89       	ldd	r25, Y+20	; 0x14
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	9c 8b       	std	Y+20, r25	; 0x14
    1206:	8b 8b       	std	Y+19, r24	; 0x13
    1208:	8b 89       	ldd	r24, Y+19	; 0x13
    120a:	9c 89       	ldd	r25, Y+20	; 0x14
    120c:	8c 38       	cpi	r24, 0x8C	; 140
    120e:	91 40       	sbci	r25, 0x01	; 1
    1210:	54 f3       	brlt	.-44     	; 0x11e6 <__stack+0x8e7>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//red
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    1212:	1e 8a       	std	Y+22, r1	; 0x16
    1214:	1d 8a       	std	Y+21, r1	; 0x15
    1216:	11 c0       	rjmp	.+34     	; 0x123a <__stack+0x93b>
	{
		transmitByte = 0x11;
    1218:	81 e1       	ldi	r24, 0x11	; 17
    121a:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    121c:	89 8d       	ldd	r24, Y+25	; 0x19
    121e:	31 da       	rcall	.-2974   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0xf1;
    1220:	81 ef       	ldi	r24, 0xF1	; 241
    1222:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    1224:	89 8d       	ldd	r24, Y+25	; 0x19
    1226:	2d da       	rcall	.-2982   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x1f;
    1228:	8f e1       	ldi	r24, 0x1F	; 31
    122a:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    122c:	89 8d       	ldd	r24, Y+25	; 0x19
    122e:	29 da       	rcall	.-2990   	; 0x682 <SPI_MasterTransmit>
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	//red
	for (int i = 0; i < WIDTH*3; i++) // once for every three bytes
    1230:	8d 89       	ldd	r24, Y+21	; 0x15
    1232:	9e 89       	ldd	r25, Y+22	; 0x16
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	9e 8b       	std	Y+22, r25	; 0x16
    1238:	8d 8b       	std	Y+21, r24	; 0x15
    123a:	8d 89       	ldd	r24, Y+21	; 0x15
    123c:	9e 89       	ldd	r25, Y+22	; 0x16
    123e:	8c 38       	cpi	r24, 0x8C	; 140
    1240:	91 40       	sbci	r25, 0x01	; 1
    1242:	54 f3       	brlt	.-44     	; 0x1218 <__stack+0x919>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	for (int i = 0; i < WIDTH*12; i++) // once for every three bytes
    1244:	18 8e       	std	Y+24, r1	; 0x18
    1246:	1f 8a       	std	Y+23, r1	; 0x17
    1248:	11 c0       	rjmp	.+34     	; 0x126c <__stack+0x96d>
	{
		transmitByte = 0xFc;
    124a:	8c ef       	ldi	r24, 0xFC	; 252
    124c:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    124e:	89 8d       	ldd	r24, Y+25	; 0x19
    1250:	18 da       	rcall	.-3024   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0x2F;
    1252:	8f e2       	ldi	r24, 0x2F	; 47
    1254:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    1256:	89 8d       	ldd	r24, Y+25	; 0x19
    1258:	14 da       	rcall	.-3032   	; 0x682 <SPI_MasterTransmit>
		transmitByte = 0xc2;
    125a:	82 ec       	ldi	r24, 0xC2	; 194
    125c:	89 8f       	std	Y+25, r24	; 0x19
		SPI_MasterTransmit(transmitByte);
    125e:	89 8d       	ldd	r24, Y+25	; 0x19
    1260:	10 da       	rcall	.-3040   	; 0x682 <SPI_MasterTransmit>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	for (int i = 0; i < WIDTH*12; i++) // once for every three bytes
    1262:	8f 89       	ldd	r24, Y+23	; 0x17
    1264:	98 8d       	ldd	r25, Y+24	; 0x18
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	98 8f       	std	Y+24, r25	; 0x18
    126a:	8f 8b       	std	Y+23, r24	; 0x17
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	80 33       	cpi	r24, 0x30	; 48
    1272:	96 40       	sbci	r25, 0x06	; 6
    1274:	54 f3       	brlt	.-44     	; 0x124a <__stack+0x94b>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;
	}
	ioport_set_pin_level(TFT_DC, 0);
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	88 e0       	ldi	r24, 0x08	; 8
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	38 d9       	rcall	.-3472   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x13;
    127e:	83 e1       	ldi	r24, 0x13	; 19
    1280:	89 8f       	std	Y+25, r24	; 0x19
	SPI_MasterTransmit(transmitByte);
    1282:	89 8d       	ldd	r24, Y+25	; 0x19
    1284:	fe d9       	rcall	.-3076   	; 0x682 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_CS, 1);
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	8e e1       	ldi	r24, 0x1E	; 30
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	30 d9       	rcall	.-3488   	; 0x4ee <ioport_set_pin_level>
	while(1){
		button_state = ioport_get_pin_level(GPIO_PUSH_BUTTON_0);
    128e:	8f e0       	ldi	r24, 0x0F	; 15
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	97 d9       	rcall	.-3282   	; 0x5c2 <ioport_get_pin_level>
    1294:	8a 8f       	std	Y+26, r24	; 0x1a
		if(button_state){
    1296:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1298:	88 23       	and	r24, r24
    129a:	21 f4       	brne	.+8      	; 0x12a4 <__stack+0x9a5>
				//LED_Off(LED0);
			}else{
				//LED_On(LED0);
				// Turns on back light :-)
				ioport_set_pin_mode(BACK_LIGHT, IOPORT_MODE_PULLUP);
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	89 e0       	ldi	r24, 0x09	; 9
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	44 d8       	rcall	.-3960   	; 0x32c <ioport_set_pin_mode>
			}
		}
    12a4:	f4 cf       	rjmp	.-24     	; 0x128e <__stack+0x98f>

000012a6 <__cmpsf2>:
    12a6:	2f d0       	rcall	.+94     	; 0x1306 <__fp_cmp>
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <__cmpsf2+0x6>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	08 95       	ret

000012ae <__fixunssfsi>:
    12ae:	57 d0       	rcall	.+174    	; 0x135e <__fp_splitA>
    12b0:	88 f0       	brcs	.+34     	; 0x12d4 <__fixunssfsi+0x26>
    12b2:	9f 57       	subi	r25, 0x7F	; 127
    12b4:	90 f0       	brcs	.+36     	; 0x12da <__fixunssfsi+0x2c>
    12b6:	b9 2f       	mov	r27, r25
    12b8:	99 27       	eor	r25, r25
    12ba:	b7 51       	subi	r27, 0x17	; 23
    12bc:	a0 f0       	brcs	.+40     	; 0x12e6 <__fixunssfsi+0x38>
    12be:	d1 f0       	breq	.+52     	; 0x12f4 <__fixunssfsi+0x46>
    12c0:	66 0f       	add	r22, r22
    12c2:	77 1f       	adc	r23, r23
    12c4:	88 1f       	adc	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	1a f0       	brmi	.+6      	; 0x12d0 <__fixunssfsi+0x22>
    12ca:	ba 95       	dec	r27
    12cc:	c9 f7       	brne	.-14     	; 0x12c0 <__fixunssfsi+0x12>
    12ce:	12 c0       	rjmp	.+36     	; 0x12f4 <__fixunssfsi+0x46>
    12d0:	b1 30       	cpi	r27, 0x01	; 1
    12d2:	81 f0       	breq	.+32     	; 0x12f4 <__fixunssfsi+0x46>
    12d4:	5e d0       	rcall	.+188    	; 0x1392 <__fp_zero>
    12d6:	b1 e0       	ldi	r27, 0x01	; 1
    12d8:	08 95       	ret
    12da:	5b c0       	rjmp	.+182    	; 0x1392 <__fp_zero>
    12dc:	67 2f       	mov	r22, r23
    12de:	78 2f       	mov	r23, r24
    12e0:	88 27       	eor	r24, r24
    12e2:	b8 5f       	subi	r27, 0xF8	; 248
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <__fixunssfsi+0x46>
    12e6:	b9 3f       	cpi	r27, 0xF9	; 249
    12e8:	cc f3       	brlt	.-14     	; 0x12dc <__fixunssfsi+0x2e>
    12ea:	86 95       	lsr	r24
    12ec:	77 95       	ror	r23
    12ee:	67 95       	ror	r22
    12f0:	b3 95       	inc	r27
    12f2:	d9 f7       	brne	.-10     	; 0x12ea <__fixunssfsi+0x3c>
    12f4:	3e f4       	brtc	.+14     	; 0x1304 <__fixunssfsi+0x56>
    12f6:	90 95       	com	r25
    12f8:	80 95       	com	r24
    12fa:	70 95       	com	r23
    12fc:	61 95       	neg	r22
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	8f 4f       	sbci	r24, 0xFF	; 255
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	08 95       	ret

00001306 <__fp_cmp>:
    1306:	99 0f       	add	r25, r25
    1308:	00 08       	sbc	r0, r0
    130a:	55 0f       	add	r21, r21
    130c:	aa 0b       	sbc	r26, r26
    130e:	e0 e8       	ldi	r30, 0x80	; 128
    1310:	fe ef       	ldi	r31, 0xFE	; 254
    1312:	16 16       	cp	r1, r22
    1314:	17 06       	cpc	r1, r23
    1316:	e8 07       	cpc	r30, r24
    1318:	f9 07       	cpc	r31, r25
    131a:	c0 f0       	brcs	.+48     	; 0x134c <__fp_cmp+0x46>
    131c:	12 16       	cp	r1, r18
    131e:	13 06       	cpc	r1, r19
    1320:	e4 07       	cpc	r30, r20
    1322:	f5 07       	cpc	r31, r21
    1324:	98 f0       	brcs	.+38     	; 0x134c <__fp_cmp+0x46>
    1326:	62 1b       	sub	r22, r18
    1328:	73 0b       	sbc	r23, r19
    132a:	84 0b       	sbc	r24, r20
    132c:	95 0b       	sbc	r25, r21
    132e:	39 f4       	brne	.+14     	; 0x133e <__fp_cmp+0x38>
    1330:	0a 26       	eor	r0, r26
    1332:	61 f0       	breq	.+24     	; 0x134c <__fp_cmp+0x46>
    1334:	23 2b       	or	r18, r19
    1336:	24 2b       	or	r18, r20
    1338:	25 2b       	or	r18, r21
    133a:	21 f4       	brne	.+8      	; 0x1344 <__fp_cmp+0x3e>
    133c:	08 95       	ret
    133e:	0a 26       	eor	r0, r26
    1340:	09 f4       	brne	.+2      	; 0x1344 <__fp_cmp+0x3e>
    1342:	a1 40       	sbci	r26, 0x01	; 1
    1344:	a6 95       	lsr	r26
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	81 1d       	adc	r24, r1
    134a:	81 1d       	adc	r24, r1
    134c:	08 95       	ret

0000134e <__fp_split3>:
    134e:	57 fd       	sbrc	r21, 7
    1350:	90 58       	subi	r25, 0x80	; 128
    1352:	44 0f       	add	r20, r20
    1354:	55 1f       	adc	r21, r21
    1356:	59 f0       	breq	.+22     	; 0x136e <__fp_splitA+0x10>
    1358:	5f 3f       	cpi	r21, 0xFF	; 255
    135a:	71 f0       	breq	.+28     	; 0x1378 <__fp_splitA+0x1a>
    135c:	47 95       	ror	r20

0000135e <__fp_splitA>:
    135e:	88 0f       	add	r24, r24
    1360:	97 fb       	bst	r25, 7
    1362:	99 1f       	adc	r25, r25
    1364:	61 f0       	breq	.+24     	; 0x137e <__fp_splitA+0x20>
    1366:	9f 3f       	cpi	r25, 0xFF	; 255
    1368:	79 f0       	breq	.+30     	; 0x1388 <__fp_splitA+0x2a>
    136a:	87 95       	ror	r24
    136c:	08 95       	ret
    136e:	12 16       	cp	r1, r18
    1370:	13 06       	cpc	r1, r19
    1372:	14 06       	cpc	r1, r20
    1374:	55 1f       	adc	r21, r21
    1376:	f2 cf       	rjmp	.-28     	; 0x135c <__fp_split3+0xe>
    1378:	46 95       	lsr	r20
    137a:	f1 df       	rcall	.-30     	; 0x135e <__fp_splitA>
    137c:	08 c0       	rjmp	.+16     	; 0x138e <__fp_splitA+0x30>
    137e:	16 16       	cp	r1, r22
    1380:	17 06       	cpc	r1, r23
    1382:	18 06       	cpc	r1, r24
    1384:	99 1f       	adc	r25, r25
    1386:	f1 cf       	rjmp	.-30     	; 0x136a <__fp_splitA+0xc>
    1388:	86 95       	lsr	r24
    138a:	71 05       	cpc	r23, r1
    138c:	61 05       	cpc	r22, r1
    138e:	08 94       	sec
    1390:	08 95       	ret

00001392 <__fp_zero>:
    1392:	e8 94       	clt

00001394 <__fp_szero>:
    1394:	bb 27       	eor	r27, r27
    1396:	66 27       	eor	r22, r22
    1398:	77 27       	eor	r23, r23
    139a:	cb 01       	movw	r24, r22
    139c:	97 f9       	bld	r25, 7
    139e:	08 95       	ret

000013a0 <__gesf2>:
    13a0:	b2 df       	rcall	.-156    	; 0x1306 <__fp_cmp>
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <__gesf2+0x6>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	08 95       	ret

000013a8 <__mulsf3>:
    13a8:	0b d0       	rcall	.+22     	; 0x13c0 <__mulsf3x>
    13aa:	78 c0       	rjmp	.+240    	; 0x149c <__fp_round>
    13ac:	69 d0       	rcall	.+210    	; 0x1480 <__fp_pscA>
    13ae:	28 f0       	brcs	.+10     	; 0x13ba <__mulsf3+0x12>
    13b0:	6e d0       	rcall	.+220    	; 0x148e <__fp_pscB>
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <__mulsf3+0x12>
    13b4:	95 23       	and	r25, r21
    13b6:	09 f0       	breq	.+2      	; 0x13ba <__mulsf3+0x12>
    13b8:	5a c0       	rjmp	.+180    	; 0x146e <__fp_inf>
    13ba:	5f c0       	rjmp	.+190    	; 0x147a <__fp_nan>
    13bc:	11 24       	eor	r1, r1
    13be:	ea cf       	rjmp	.-44     	; 0x1394 <__fp_szero>

000013c0 <__mulsf3x>:
    13c0:	c6 df       	rcall	.-116    	; 0x134e <__fp_split3>
    13c2:	a0 f3       	brcs	.-24     	; 0x13ac <__mulsf3+0x4>

000013c4 <__mulsf3_pse>:
    13c4:	95 9f       	mul	r25, r21
    13c6:	d1 f3       	breq	.-12     	; 0x13bc <__mulsf3+0x14>
    13c8:	95 0f       	add	r25, r21
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	55 1f       	adc	r21, r21
    13ce:	62 9f       	mul	r22, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	72 9f       	mul	r23, r18
    13d4:	bb 27       	eor	r27, r27
    13d6:	f0 0d       	add	r31, r0
    13d8:	b1 1d       	adc	r27, r1
    13da:	63 9f       	mul	r22, r19
    13dc:	aa 27       	eor	r26, r26
    13de:	f0 0d       	add	r31, r0
    13e0:	b1 1d       	adc	r27, r1
    13e2:	aa 1f       	adc	r26, r26
    13e4:	64 9f       	mul	r22, r20
    13e6:	66 27       	eor	r22, r22
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	66 1f       	adc	r22, r22
    13ee:	82 9f       	mul	r24, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	62 1f       	adc	r22, r18
    13f8:	73 9f       	mul	r23, r19
    13fa:	b0 0d       	add	r27, r0
    13fc:	a1 1d       	adc	r26, r1
    13fe:	62 1f       	adc	r22, r18
    1400:	83 9f       	mul	r24, r19
    1402:	a0 0d       	add	r26, r0
    1404:	61 1d       	adc	r22, r1
    1406:	22 1f       	adc	r18, r18
    1408:	74 9f       	mul	r23, r20
    140a:	33 27       	eor	r19, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	23 1f       	adc	r18, r19
    1412:	84 9f       	mul	r24, r20
    1414:	60 0d       	add	r22, r0
    1416:	21 1d       	adc	r18, r1
    1418:	82 2f       	mov	r24, r18
    141a:	76 2f       	mov	r23, r22
    141c:	6a 2f       	mov	r22, r26
    141e:	11 24       	eor	r1, r1
    1420:	9f 57       	subi	r25, 0x7F	; 127
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	8a f0       	brmi	.+34     	; 0x1448 <__mulsf3_pse+0x84>
    1426:	e1 f0       	breq	.+56     	; 0x1460 <__mulsf3_pse+0x9c>
    1428:	88 23       	and	r24, r24
    142a:	4a f0       	brmi	.+18     	; 0x143e <__mulsf3_pse+0x7a>
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	bb 1f       	adc	r27, r27
    1432:	66 1f       	adc	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__mulsf3_pse+0x64>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	70 f0       	brcs	.+28     	; 0x1460 <__mulsf3_pse+0x9c>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <__fp_inf>
    1446:	a6 cf       	rjmp	.-180    	; 0x1394 <__fp_szero>
    1448:	5f 3f       	cpi	r21, 0xFF	; 255
    144a:	ec f3       	brlt	.-6      	; 0x1446 <__mulsf3_pse+0x82>
    144c:	98 3e       	cpi	r25, 0xE8	; 232
    144e:	dc f3       	brlt	.-10     	; 0x1446 <__mulsf3_pse+0x82>
    1450:	86 95       	lsr	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	f7 95       	ror	r31
    145a:	e7 95       	ror	r30
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	c1 f7       	brne	.-16     	; 0x1450 <__mulsf3_pse+0x8c>
    1460:	fe 2b       	or	r31, r30
    1462:	88 0f       	add	r24, r24
    1464:	91 1d       	adc	r25, r1
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	97 f9       	bld	r25, 7
    146c:	08 95       	ret

0000146e <__fp_inf>:
    146e:	97 f9       	bld	r25, 7
    1470:	9f 67       	ori	r25, 0x7F	; 127
    1472:	80 e8       	ldi	r24, 0x80	; 128
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	08 95       	ret

0000147a <__fp_nan>:
    147a:	9f ef       	ldi	r25, 0xFF	; 255
    147c:	80 ec       	ldi	r24, 0xC0	; 192
    147e:	08 95       	ret

00001480 <__fp_pscA>:
    1480:	00 24       	eor	r0, r0
    1482:	0a 94       	dec	r0
    1484:	16 16       	cp	r1, r22
    1486:	17 06       	cpc	r1, r23
    1488:	18 06       	cpc	r1, r24
    148a:	09 06       	cpc	r0, r25
    148c:	08 95       	ret

0000148e <__fp_pscB>:
    148e:	00 24       	eor	r0, r0
    1490:	0a 94       	dec	r0
    1492:	12 16       	cp	r1, r18
    1494:	13 06       	cpc	r1, r19
    1496:	14 06       	cpc	r1, r20
    1498:	05 06       	cpc	r0, r21
    149a:	08 95       	ret

0000149c <__fp_round>:
    149c:	09 2e       	mov	r0, r25
    149e:	03 94       	inc	r0
    14a0:	00 0c       	add	r0, r0
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <__fp_round+0xc>
    14a4:	88 23       	and	r24, r24
    14a6:	52 f0       	brmi	.+20     	; 0x14bc <__fp_round+0x20>
    14a8:	bb 0f       	add	r27, r27
    14aa:	40 f4       	brcc	.+16     	; 0x14bc <__fp_round+0x20>
    14ac:	bf 2b       	or	r27, r31
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <__fp_round+0x18>
    14b0:	60 ff       	sbrs	r22, 0
    14b2:	04 c0       	rjmp	.+8      	; 0x14bc <__fp_round+0x20>
    14b4:	6f 5f       	subi	r22, 0xFF	; 255
    14b6:	7f 4f       	sbci	r23, 0xFF	; 255
    14b8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	08 95       	ret

000014be <_exit>:
    14be:	f8 94       	cli

000014c0 <__stop_program>:
    14c0:	ff cf       	rjmp	.-2      	; 0x14c0 <__stop_program>
