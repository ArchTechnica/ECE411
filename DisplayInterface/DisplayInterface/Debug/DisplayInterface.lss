
DisplayInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000140b  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b4  00000000  00000000  00002b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000149e  00000000  00000000  000034b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00004958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010151  00000000  00000000  00004af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000320  00000000  00000000  00014c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00003d7a  00000000  00000000  00014f61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
       6:	00 00       	nop
       8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
       a:	00 00       	nop
       c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
       e:	00 00       	nop
      10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
      12:	00 00       	nop
      14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
      16:	00 00       	nop
      18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
      1e:	00 00       	nop
      20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
      22:	00 00       	nop
      24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
      32:	00 00       	nop
      34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
      36:	00 00       	nop
      38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c0       	rjmp	.+36     	; 0x7a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c0       	rjmp	.+32     	; 0x7a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0e c0       	rjmp	.+28     	; 0x7a <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c c0       	rjmp	.+24     	; 0x7a <__bad_interrupt>
      62:	00 00       	nop
      64:	0a c0       	rjmp	.+20     	; 0x7a <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61
      74:	f1 d2       	rcall	.+1506   	; 0x658 <main>
      76:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_exit>

0000007a <__bad_interrupt>:
      7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <board_init>:
#include <conf_board.h>
#include "gpio.h"
#include "led.h"

void board_init(void)
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	6a 97       	sbiw	r28, 0x1a	; 26
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	8d e0       	ldi	r24, 0x0D	; 13
      92:	89 83       	std	Y+1, r24	; 0x01
      94:	83 e0       	ldi	r24, 0x03	; 3
      96:	90 e0       	ldi	r25, 0x00	; 0
      98:	9b 83       	std	Y+3, r25	; 0x03
      9a:	8a 83       	std	Y+2, r24	; 0x02
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
      9c:	89 81       	ldd	r24, Y+1	; 0x01
      9e:	88 2f       	mov	r24, r24
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	9d 83       	std	Y+5, r25	; 0x05
      a4:	8c 83       	std	Y+4, r24	; 0x04
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
      a6:	8c 81       	ldd	r24, Y+4	; 0x04
      a8:	9d 81       	ldd	r25, Y+5	; 0x05
      aa:	9c 01       	movw	r18, r24
      ac:	27 70       	andi	r18, 0x07	; 7
      ae:	33 27       	eor	r19, r19
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	02 c0       	rjmp	.+4      	; 0xba <board_init+0x3e>
      b6:	88 0f       	add	r24, r24
      b8:	99 1f       	adc	r25, r25
      ba:	2a 95       	dec	r18
      bc:	e2 f7       	brpl	.-8      	; 0xb6 <board_init+0x3a>
      be:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
      c0:	89 81       	ldd	r24, Y+1	; 0x01
      c2:	88 2f       	mov	r24, r24
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	9f 83       	std	Y+7, r25	; 0x07
      c8:	8e 83       	std	Y+6, r24	; 0x06
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
      ca:	8e 81       	ldd	r24, Y+6	; 0x06
      cc:	9f 81       	ldd	r25, Y+7	; 0x07
      ce:	96 95       	lsr	r25
      d0:	87 95       	ror	r24
      d2:	96 95       	lsr	r25
      d4:	87 95       	ror	r24
      d6:	96 95       	lsr	r25
      d8:	87 95       	ror	r24
      da:	88 87       	std	Y+8, r24	; 0x08
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
      dc:	88 85       	ldd	r24, Y+8	; 0x08
      de:	28 2f       	mov	r18, r24
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	c9 01       	movw	r24, r18
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	82 0f       	add	r24, r18
      ea:	93 1f       	adc	r25, r19
      ec:	80 96       	adiw	r24, 0x20	; 32
      ee:	9a 87       	std	Y+10, r25	; 0x0a
      f0:	89 87       	std	Y+9, r24	; 0x09
      f2:	4b 87       	std	Y+11, r20	; 0x0b
      f4:	8a 81       	ldd	r24, Y+2	; 0x02
      f6:	9b 81       	ldd	r25, Y+3	; 0x03
      f8:	9d 87       	std	Y+13, r25	; 0x0d
      fa:	8c 87       	std	Y+12, r24	; 0x0c
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
      fc:	8c 85       	ldd	r24, Y+12	; 0x0c
      fe:	9d 85       	ldd	r25, Y+13	; 0x0d
     100:	81 70       	andi	r24, 0x01	; 1
     102:	99 27       	eor	r25, r25
     104:	89 2b       	or	r24, r25
     106:	89 f1       	breq	.+98     	; 0x16a <board_init+0xee>
		if (flags & IOPORT_INIT_HIGH) {
     108:	8c 85       	ldd	r24, Y+12	; 0x0c
     10a:	9d 85       	ldd	r25, Y+13	; 0x0d
     10c:	82 70       	andi	r24, 0x02	; 2
     10e:	99 27       	eor	r25, r25
     110:	89 2b       	or	r24, r25
     112:	71 f0       	breq	.+28     	; 0x130 <board_init+0xb4>
			*((uint8_t *)port + 2) |= pin_mask;
     114:	89 85       	ldd	r24, Y+9	; 0x09
     116:	9a 85       	ldd	r25, Y+10	; 0x0a
     118:	02 96       	adiw	r24, 0x02	; 2
     11a:	29 85       	ldd	r18, Y+9	; 0x09
     11c:	3a 85       	ldd	r19, Y+10	; 0x0a
     11e:	2e 5f       	subi	r18, 0xFE	; 254
     120:	3f 4f       	sbci	r19, 0xFF	; 255
     122:	f9 01       	movw	r30, r18
     124:	30 81       	ld	r19, Z
     126:	2b 85       	ldd	r18, Y+11	; 0x0b
     128:	23 2b       	or	r18, r19
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
     12e:	0f c0       	rjmp	.+30     	; 0x14e <board_init+0xd2>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     130:	89 85       	ldd	r24, Y+9	; 0x09
     132:	9a 85       	ldd	r25, Y+10	; 0x0a
     134:	02 96       	adiw	r24, 0x02	; 2
     136:	29 85       	ldd	r18, Y+9	; 0x09
     138:	3a 85       	ldd	r19, Y+10	; 0x0a
     13a:	2e 5f       	subi	r18, 0xFE	; 254
     13c:	3f 4f       	sbci	r19, 0xFF	; 255
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	32 2f       	mov	r19, r18
     144:	2b 85       	ldd	r18, Y+11	; 0x0b
     146:	20 95       	com	r18
     148:	23 23       	and	r18, r19
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	9a 85       	ldd	r25, Y+10	; 0x0a
     152:	01 96       	adiw	r24, 0x01	; 1
     154:	29 85       	ldd	r18, Y+9	; 0x09
     156:	3a 85       	ldd	r19, Y+10	; 0x0a
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	f9 01       	movw	r30, r18
     15e:	30 81       	ld	r19, Z
     160:	2b 85       	ldd	r18, Y+11	; 0x0b
     162:	23 2b       	or	r18, r19
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18
     168:	32 c0       	rjmp	.+100    	; 0x1ce <board_init+0x152>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     16a:	89 85       	ldd	r24, Y+9	; 0x09
     16c:	9a 85       	ldd	r25, Y+10	; 0x0a
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	29 85       	ldd	r18, Y+9	; 0x09
     172:	3a 85       	ldd	r19, Y+10	; 0x0a
     174:	2f 5f       	subi	r18, 0xFF	; 255
     176:	3f 4f       	sbci	r19, 0xFF	; 255
     178:	f9 01       	movw	r30, r18
     17a:	20 81       	ld	r18, Z
     17c:	32 2f       	mov	r19, r18
     17e:	2b 85       	ldd	r18, Y+11	; 0x0b
     180:	20 95       	com	r18
     182:	23 23       	and	r18, r19
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     188:	8c 85       	ldd	r24, Y+12	; 0x0c
     18a:	9d 85       	ldd	r25, Y+13	; 0x0d
     18c:	84 70       	andi	r24, 0x04	; 4
     18e:	99 27       	eor	r25, r25
     190:	89 2b       	or	r24, r25
     192:	71 f0       	breq	.+28     	; 0x1b0 <board_init+0x134>
			*((uint8_t *)port + 2) |= pin_mask;
     194:	89 85       	ldd	r24, Y+9	; 0x09
     196:	9a 85       	ldd	r25, Y+10	; 0x0a
     198:	02 96       	adiw	r24, 0x02	; 2
     19a:	29 85       	ldd	r18, Y+9	; 0x09
     19c:	3a 85       	ldd	r19, Y+10	; 0x0a
     19e:	2e 5f       	subi	r18, 0xFE	; 254
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	f9 01       	movw	r30, r18
     1a4:	30 81       	ld	r19, Z
     1a6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1a8:	23 2b       	or	r18, r19
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	0f c0       	rjmp	.+30     	; 0x1ce <board_init+0x152>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	02 96       	adiw	r24, 0x02	; 2
     1b6:	29 85       	ldd	r18, Y+9	; 0x09
     1b8:	3a 85       	ldd	r19, Y+10	; 0x0a
     1ba:	2e 5f       	subi	r18, 0xFE	; 254
     1bc:	3f 4f       	sbci	r19, 0xFF	; 255
     1be:	f9 01       	movw	r30, r18
     1c0:	20 81       	ld	r18, Z
     1c2:	32 2f       	mov	r19, r18
     1c4:	2b 85       	ldd	r18, Y+11	; 0x0b
     1c6:	20 95       	com	r18
     1c8:	23 23       	and	r18, r19
     1ca:	fc 01       	movw	r30, r24
     1cc:	20 83       	st	Z, r18
     1ce:	8f e0       	ldi	r24, 0x0F	; 15
     1d0:	8e 87       	std	Y+14, r24	; 0x0e
     1d2:	84 e0       	ldi	r24, 0x04	; 4
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	98 8b       	std	Y+16, r25	; 0x10
     1d8:	8f 87       	std	Y+15, r24	; 0x0f
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     1da:	8e 85       	ldd	r24, Y+14	; 0x0e
     1dc:	88 2f       	mov	r24, r24
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	9a 8b       	std	Y+18, r25	; 0x12
     1e2:	89 8b       	std	Y+17, r24	; 0x11
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     1e4:	89 89       	ldd	r24, Y+17	; 0x11
     1e6:	9a 89       	ldd	r25, Y+18	; 0x12
     1e8:	9c 01       	movw	r18, r24
     1ea:	27 70       	andi	r18, 0x07	; 7
     1ec:	33 27       	eor	r19, r19
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <board_init+0x17c>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	2a 95       	dec	r18
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <board_init+0x178>
     1fc:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     1fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     200:	88 2f       	mov	r24, r24
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	9c 8b       	std	Y+20, r25	; 0x14
     206:	8b 8b       	std	Y+19, r24	; 0x13
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     208:	8b 89       	ldd	r24, Y+19	; 0x13
     20a:	9c 89       	ldd	r25, Y+20	; 0x14
     20c:	96 95       	lsr	r25
     20e:	87 95       	ror	r24
     210:	96 95       	lsr	r25
     212:	87 95       	ror	r24
     214:	96 95       	lsr	r25
     216:	87 95       	ror	r24
     218:	8d 8b       	std	Y+21, r24	; 0x15
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     21a:	8d 89       	ldd	r24, Y+21	; 0x15
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	c9 01       	movw	r24, r18
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	82 0f       	add	r24, r18
     228:	93 1f       	adc	r25, r19
     22a:	80 96       	adiw	r24, 0x20	; 32
     22c:	9f 8b       	std	Y+23, r25	; 0x17
     22e:	8e 8b       	std	Y+22, r24	; 0x16
     230:	48 8f       	std	Y+24, r20	; 0x18
     232:	8f 85       	ldd	r24, Y+15	; 0x0f
     234:	98 89       	ldd	r25, Y+16	; 0x10
     236:	9a 8f       	std	Y+26, r25	; 0x1a
     238:	89 8f       	std	Y+25, r24	; 0x19
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     23a:	89 8d       	ldd	r24, Y+25	; 0x19
     23c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     23e:	81 70       	andi	r24, 0x01	; 1
     240:	99 27       	eor	r25, r25
     242:	89 2b       	or	r24, r25
     244:	89 f1       	breq	.+98     	; 0x2a8 <board_init+0x22c>
		if (flags & IOPORT_INIT_HIGH) {
     246:	89 8d       	ldd	r24, Y+25	; 0x19
     248:	9a 8d       	ldd	r25, Y+26	; 0x1a
     24a:	82 70       	andi	r24, 0x02	; 2
     24c:	99 27       	eor	r25, r25
     24e:	89 2b       	or	r24, r25
     250:	71 f0       	breq	.+28     	; 0x26e <board_init+0x1f2>
			*((uint8_t *)port + 2) |= pin_mask;
     252:	8e 89       	ldd	r24, Y+22	; 0x16
     254:	9f 89       	ldd	r25, Y+23	; 0x17
     256:	02 96       	adiw	r24, 0x02	; 2
     258:	2e 89       	ldd	r18, Y+22	; 0x16
     25a:	3f 89       	ldd	r19, Y+23	; 0x17
     25c:	2e 5f       	subi	r18, 0xFE	; 254
     25e:	3f 4f       	sbci	r19, 0xFF	; 255
     260:	f9 01       	movw	r30, r18
     262:	30 81       	ld	r19, Z
     264:	28 8d       	ldd	r18, Y+24	; 0x18
     266:	23 2b       	or	r18, r19
     268:	fc 01       	movw	r30, r24
     26a:	20 83       	st	Z, r18
     26c:	0f c0       	rjmp	.+30     	; 0x28c <board_init+0x210>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     26e:	8e 89       	ldd	r24, Y+22	; 0x16
     270:	9f 89       	ldd	r25, Y+23	; 0x17
     272:	02 96       	adiw	r24, 0x02	; 2
     274:	2e 89       	ldd	r18, Y+22	; 0x16
     276:	3f 89       	ldd	r19, Y+23	; 0x17
     278:	2e 5f       	subi	r18, 0xFE	; 254
     27a:	3f 4f       	sbci	r19, 0xFF	; 255
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	32 2f       	mov	r19, r18
     282:	28 8d       	ldd	r18, Y+24	; 0x18
     284:	20 95       	com	r18
     286:	23 23       	and	r18, r19
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     28c:	8e 89       	ldd	r24, Y+22	; 0x16
     28e:	9f 89       	ldd	r25, Y+23	; 0x17
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	2e 89       	ldd	r18, Y+22	; 0x16
     294:	3f 89       	ldd	r19, Y+23	; 0x17
     296:	2f 5f       	subi	r18, 0xFF	; 255
     298:	3f 4f       	sbci	r19, 0xFF	; 255
     29a:	f9 01       	movw	r30, r18
     29c:	30 81       	ld	r19, Z
     29e:	28 8d       	ldd	r18, Y+24	; 0x18
     2a0:	23 2b       	or	r18, r19
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
     2a6:	32 c0       	rjmp	.+100    	; 0x30c <board_init+0x290>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     2a8:	8e 89       	ldd	r24, Y+22	; 0x16
     2aa:	9f 89       	ldd	r25, Y+23	; 0x17
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	2e 89       	ldd	r18, Y+22	; 0x16
     2b0:	3f 89       	ldd	r19, Y+23	; 0x17
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	32 2f       	mov	r19, r18
     2bc:	28 8d       	ldd	r18, Y+24	; 0x18
     2be:	20 95       	com	r18
     2c0:	23 23       	and	r18, r19
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     2c6:	89 8d       	ldd	r24, Y+25	; 0x19
     2c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ca:	84 70       	andi	r24, 0x04	; 4
     2cc:	99 27       	eor	r25, r25
     2ce:	89 2b       	or	r24, r25
     2d0:	71 f0       	breq	.+28     	; 0x2ee <board_init+0x272>
			*((uint8_t *)port + 2) |= pin_mask;
     2d2:	8e 89       	ldd	r24, Y+22	; 0x16
     2d4:	9f 89       	ldd	r25, Y+23	; 0x17
     2d6:	02 96       	adiw	r24, 0x02	; 2
     2d8:	2e 89       	ldd	r18, Y+22	; 0x16
     2da:	3f 89       	ldd	r19, Y+23	; 0x17
     2dc:	2e 5f       	subi	r18, 0xFE	; 254
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	f9 01       	movw	r30, r18
     2e2:	30 81       	ld	r19, Z
     2e4:	28 8d       	ldd	r18, Y+24	; 0x18
     2e6:	23 2b       	or	r18, r19
     2e8:	fc 01       	movw	r30, r24
     2ea:	20 83       	st	Z, r18
     2ec:	0f c0       	rjmp	.+30     	; 0x30c <board_init+0x290>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     2ee:	8e 89       	ldd	r24, Y+22	; 0x16
     2f0:	9f 89       	ldd	r25, Y+23	; 0x17
     2f2:	02 96       	adiw	r24, 0x02	; 2
     2f4:	2e 89       	ldd	r18, Y+22	; 0x16
     2f6:	3f 89       	ldd	r19, Y+23	; 0x17
     2f8:	2e 5f       	subi	r18, 0xFE	; 254
     2fa:	3f 4f       	sbci	r19, 0xFF	; 255
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	32 2f       	mov	r19, r18
     302:	28 8d       	ldd	r18, Y+24	; 0x18
     304:	20 95       	com	r18
     306:	23 23       	and	r18, r19
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
	ioport_configure_pin(LED0, IOPORT_DIR_OUTPUT |  IOPORT_INIT_HIGH);

	/* On board Switch initialization */
	ioport_configure_pin(GPIO_PUSH_BUTTON_0,
	IOPORT_DIR_INPUT | IOPORT_PULL_UP);
}
     30c:	6a 96       	adiw	r28, 0x1a	; 26
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
	arch_ioport_init();
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
     334:	2f 97       	sbiw	r28, 0x0f	; 15
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	f8 94       	cli
     33a:	de bf       	out	0x3e, r29	; 62
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	cd bf       	out	0x3d, r28	; 61
     340:	9e 87       	std	Y+14, r25	; 0x0e
     342:	8d 87       	std	Y+13, r24	; 0x0d
     344:	6f 87       	std	Y+15, r22	; 0x0f
     346:	8d 85       	ldd	r24, Y+13	; 0x0d
     348:	9e 85       	ldd	r25, Y+14	; 0x0e
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	8f 85       	ldd	r24, Y+15	; 0x0f
     350:	8b 83       	std	Y+3, r24	; 0x03
     352:	89 81       	ldd	r24, Y+1	; 0x01
     354:	9a 81       	ldd	r25, Y+2	; 0x02
     356:	9d 83       	std	Y+5, r25	; 0x05
     358:	8c 83       	std	Y+4, r24	; 0x04
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	9d 81       	ldd	r25, Y+5	; 0x05
     35e:	96 95       	lsr	r25
     360:	87 95       	ror	r24
     362:	96 95       	lsr	r25
     364:	87 95       	ror	r24
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	8e 83       	std	Y+6, r24	; 0x06
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     36c:	8e 81       	ldd	r24, Y+6	; 0x06
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	c9 01       	movw	r24, r18
     374:	88 0f       	add	r24, r24
     376:	99 1f       	adc	r25, r25
     378:	82 0f       	add	r24, r18
     37a:	93 1f       	adc	r25, r19
     37c:	80 96       	adiw	r24, 0x20	; 32
 */
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
     37e:	98 87       	std	Y+8, r25	; 0x08
     380:	8f 83       	std	Y+7, r24	; 0x07
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	9a 81       	ldd	r25, Y+2	; 0x02
     386:	9a 87       	std	Y+10, r25	; 0x0a
     388:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     38a:	89 85       	ldd	r24, Y+9	; 0x09
     38c:	9a 85       	ldd	r25, Y+10	; 0x0a
     38e:	9c 01       	movw	r18, r24
     390:	27 70       	andi	r18, 0x07	; 7
     392:	33 27       	eor	r19, r19
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <ioport_set_pin_mode+0x72>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	2a 95       	dec	r18
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <ioport_set_pin_mode+0x6e>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	9c 87       	std	Y+12, r25	; 0x0c
     3a8:	8b 87       	std	Y+11, r24	; 0x0b
	if (mode == IOPORT_MODE_PULLUP) {
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	88 23       	and	r24, r24
     3ae:	61 f4       	brne	.+24     	; 0x3c8 <ioport_set_pin_mode+0x9c>
		base->PORTDATA |=  mask_pin;
     3b0:	8f 81       	ldd	r24, Y+7	; 0x07
     3b2:	98 85       	ldd	r25, Y+8	; 0x08
     3b4:	fc 01       	movw	r30, r24
     3b6:	92 81       	ldd	r25, Z+2	; 0x02
     3b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ba:	29 2f       	mov	r18, r25
     3bc:	28 2b       	or	r18, r24
     3be:	8f 81       	ldd	r24, Y+7	; 0x07
     3c0:	98 85       	ldd	r25, Y+8	; 0x08
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
     3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <ioport_set_pin_mode+0xba>
	} else if (mode == IOPORT_MODE_PULLDOWN) {
     3c8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ca:	81 30       	cpi	r24, 0x01	; 1
     3cc:	61 f4       	brne	.+24     	; 0x3e6 <ioport_set_pin_mode+0xba>
		base->PORTDATA &= ~mask_pin;
     3ce:	8f 81       	ldd	r24, Y+7	; 0x07
     3d0:	98 85       	ldd	r25, Y+8	; 0x08
     3d2:	fc 01       	movw	r30, r24
     3d4:	92 81       	ldd	r25, Z+2	; 0x02
     3d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d8:	80 95       	com	r24
     3da:	29 2f       	mov	r18, r25
     3dc:	28 23       	and	r18, r24
     3de:	8f 81       	ldd	r24, Y+7	; 0x07
     3e0:	98 85       	ldd	r25, Y+8	; 0x08
     3e2:	fc 01       	movw	r30, r24
     3e4:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_mode(pin, mode);
}
     3e6:	2f 96       	adiw	r28, 0x0f	; 15
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	61 97       	sbiw	r28, 0x11	; 17
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	9f 87       	std	Y+15, r25	; 0x0f
     40e:	8e 87       	std	Y+14, r24	; 0x0e
     410:	79 8b       	std	Y+17, r23	; 0x11
     412:	68 8b       	std	Y+16, r22	; 0x10
     414:	8e 85       	ldd	r24, Y+14	; 0x0e
     416:	9f 85       	ldd	r25, Y+15	; 0x0f
     418:	9a 83       	std	Y+2, r25	; 0x02
     41a:	89 83       	std	Y+1, r24	; 0x01
     41c:	88 89       	ldd	r24, Y+16	; 0x10
     41e:	99 89       	ldd	r25, Y+17	; 0x11
     420:	9c 83       	std	Y+4, r25	; 0x04
     422:	8b 83       	std	Y+3, r24	; 0x03
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	9a 81       	ldd	r25, Y+2	; 0x02
     428:	9e 83       	std	Y+6, r25	; 0x06
     42a:	8d 83       	std	Y+5, r24	; 0x05
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     42c:	8d 81       	ldd	r24, Y+5	; 0x05
     42e:	9e 81       	ldd	r25, Y+6	; 0x06
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	96 95       	lsr	r25
     436:	87 95       	ror	r24
     438:	96 95       	lsr	r25
     43a:	87 95       	ror	r24
     43c:	8f 83       	std	Y+7, r24	; 0x07
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     43e:	8f 81       	ldd	r24, Y+7	; 0x07
     440:	28 2f       	mov	r18, r24
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	c9 01       	movw	r24, r18
     446:	88 0f       	add	r24, r24
     448:	99 1f       	adc	r25, r25
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	80 96       	adiw	r24, 0x20	; 32
 * \param mode dir, \refer ioport_direction
 */
__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     450:	99 87       	std	Y+9, r25	; 0x09
     452:	88 87       	std	Y+8, r24	; 0x08

	if (dir == IOPORT_DIR_OUTPUT) {
     454:	8b 81       	ldd	r24, Y+3	; 0x03
     456:	9c 81       	ldd	r25, Y+4	; 0x04
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	d9 f4       	brne	.+54     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	9a 81       	ldd	r25, Y+2	; 0x02
     460:	9b 87       	std	Y+11, r25	; 0x0b
     462:	8a 87       	std	Y+10, r24	; 0x0a
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     464:	8a 85       	ldd	r24, Y+10	; 0x0a
     466:	9b 85       	ldd	r25, Y+11	; 0x0b
     468:	9c 01       	movw	r18, r24
     46a:	27 70       	andi	r18, 0x07	; 7
     46c:	33 27       	eor	r19, r19
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	2a 95       	dec	r18
     47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     47c:	28 2f       	mov	r18, r24
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
     47e:	88 85       	ldd	r24, Y+8	; 0x08
     480:	99 85       	ldd	r25, Y+9	; 0x09
     482:	fc 01       	movw	r30, r24
     484:	81 81       	ldd	r24, Z+1	; 0x01
     486:	28 2b       	or	r18, r24
     488:	88 85       	ldd	r24, Y+8	; 0x08
     48a:	99 85       	ldd	r25, Y+9	; 0x09
     48c:	fc 01       	movw	r30, r24
     48e:	21 83       	std	Z+1, r18	; 0x01
     490:	25 c0       	rjmp	.+74     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	} else if (dir == IOPORT_DIR_INPUT) {
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	89 2b       	or	r24, r25
     498:	09 f5       	brne	.+66     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     49a:	89 81       	ldd	r24, Y+1	; 0x01
     49c:	9a 81       	ldd	r25, Y+2	; 0x02
     49e:	9d 87       	std	Y+13, r25	; 0x0d
     4a0:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     4a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     4a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     4a6:	9c 01       	movw	r18, r24
     4a8:	27 70       	andi	r18, 0x07	; 7
     4aa:	33 27       	eor	r19, r19
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	2a 95       	dec	r18
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9c 01       	movw	r18, r24
     4c0:	20 95       	com	r18
     4c2:	30 95       	com	r19
     4c4:	88 85       	ldd	r24, Y+8	; 0x08
     4c6:	99 85       	ldd	r25, Y+9	; 0x09
     4c8:	fc 01       	movw	r30, r24
     4ca:	81 81       	ldd	r24, Z+1	; 0x01
     4cc:	98 2f       	mov	r25, r24
     4ce:	82 2f       	mov	r24, r18
     4d0:	89 23       	and	r24, r25
     4d2:	28 2f       	mov	r18, r24
     4d4:	88 85       	ldd	r24, Y+8	; 0x08
     4d6:	99 85       	ldd	r25, Y+9	; 0x09
     4d8:	fc 01       	movw	r30, r24
     4da:	21 83       	std	Z+1, r18	; 0x01
	arch_ioport_set_pin_dir(pin, dir);
}
     4dc:	61 96       	adiw	r28, 0x11	; 17
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	2d 97       	sbiw	r28, 0x0d	; 13
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	9c 87       	std	Y+12, r25	; 0x0c
     504:	8b 87       	std	Y+11, r24	; 0x0b
     506:	6d 87       	std	Y+13, r22	; 0x0d
     508:	8b 85       	ldd	r24, Y+11	; 0x0b
     50a:	9c 85       	ldd	r25, Y+12	; 0x0c
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	8d 85       	ldd	r24, Y+13	; 0x0d
     512:	8b 83       	std	Y+3, r24	; 0x03
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	96 95       	lsr	r25
     51a:	87 95       	ror	r24
     51c:	96 95       	lsr	r25
     51e:	87 95       	ror	r24
     520:	96 95       	lsr	r25
     522:	87 95       	ror	r24
     524:	8c 83       	std	Y+4, r24	; 0x04
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     526:	8c 81       	ldd	r24, Y+4	; 0x04
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	c9 01       	movw	r24, r18
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	82 0f       	add	r24, r18
     534:	93 1f       	adc	r25, r19
     536:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     538:	9e 83       	std	Y+6, r25	; 0x06
     53a:	8d 83       	std	Y+5, r24	; 0x05

	if (level) {
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	88 23       	and	r24, r24
     540:	d9 f0       	breq	.+54     	; 0x578 <ioport_set_pin_level+0x8a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     542:	8d 81       	ldd	r24, Y+5	; 0x05
     544:	9e 81       	ldd	r25, Y+6	; 0x06
     546:	fc 01       	movw	r30, r24
     548:	42 81       	ldd	r20, Z+2	; 0x02
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	98 87       	std	Y+8, r25	; 0x08
     550:	8f 83       	std	Y+7, r24	; 0x07
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     552:	8f 81       	ldd	r24, Y+7	; 0x07
     554:	98 85       	ldd	r25, Y+8	; 0x08
     556:	9c 01       	movw	r18, r24
     558:	27 70       	andi	r18, 0x07	; 7
     55a:	33 27       	eor	r19, r19
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <ioport_set_pin_level+0x78>
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	2a 95       	dec	r18
     568:	e2 f7       	brpl	.-8      	; 0x562 <ioport_set_pin_level+0x74>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     56a:	24 2f       	mov	r18, r20
     56c:	28 2b       	or	r18, r24
     56e:	8d 81       	ldd	r24, Y+5	; 0x05
     570:	9e 81       	ldd	r25, Y+6	; 0x06
     572:	fc 01       	movw	r30, r24
     574:	22 83       	std	Z+2, r18	; 0x02
     576:	1c c0       	rjmp	.+56     	; 0x5b0 <ioport_set_pin_level+0xc2>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	9e 81       	ldd	r25, Y+6	; 0x06
     57c:	fc 01       	movw	r30, r24
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	48 2f       	mov	r20, r24
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	9a 87       	std	Y+10, r25	; 0x0a
     588:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	9a 85       	ldd	r25, Y+10	; 0x0a
     58e:	9c 01       	movw	r18, r24
     590:	27 70       	andi	r18, 0x07	; 7
     592:	33 27       	eor	r19, r19
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	02 c0       	rjmp	.+4      	; 0x59e <ioport_set_pin_level+0xb0>
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	2a 95       	dec	r18
     5a0:	e2 f7       	brpl	.-8      	; 0x59a <ioport_set_pin_level+0xac>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     5a2:	80 95       	com	r24
     5a4:	84 23       	and	r24, r20
     5a6:	28 2f       	mov	r18, r24
     5a8:	8d 81       	ldd	r24, Y+5	; 0x05
     5aa:	9e 81       	ldd	r25, Y+6	; 0x06
     5ac:	fc 01       	movw	r30, r24
     5ae:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_level(pin, level);
}
     5b0:	2d 96       	adiw	r28, 0x0d	; 13
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	2b 97       	sbiw	r28, 0x0b	; 11
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	9b 87       	std	Y+11, r25	; 0x0b
     5d8:	8a 87       	std	Y+10, r24	; 0x0a
     5da:	8a 85       	ldd	r24, Y+10	; 0x0a
     5dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5de:	9a 83       	std	Y+2, r25	; 0x02
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	9a 81       	ldd	r25, Y+2	; 0x02
     5e6:	9c 83       	std	Y+4, r25	; 0x04
     5e8:	8b 83       	std	Y+3, r24	; 0x03
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	96 95       	lsr	r25
     5f0:	87 95       	ror	r24
     5f2:	96 95       	lsr	r25
     5f4:	87 95       	ror	r24
     5f6:	96 95       	lsr	r25
     5f8:	87 95       	ror	r24
     5fa:	8d 83       	std	Y+5, r24	; 0x05
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	28 2f       	mov	r18, r24
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	c9 01       	movw	r24, r18
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	82 0f       	add	r24, r18
     60a:	93 1f       	adc	r25, r19
     60c:	80 96       	adiw	r24, 0x20	; 32
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     60e:	9f 83       	std	Y+7, r25	; 0x07
     610:	8e 83       	std	Y+6, r24	; 0x06
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     612:	8e 81       	ldd	r24, Y+6	; 0x06
     614:	9f 81       	ldd	r25, Y+7	; 0x07
     616:	fc 01       	movw	r30, r24
     618:	40 81       	ld	r20, Z
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	9a 81       	ldd	r25, Y+2	; 0x02
     61e:	99 87       	std	Y+9, r25	; 0x09
     620:	88 87       	std	Y+8, r24	; 0x08
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     622:	88 85       	ldd	r24, Y+8	; 0x08
     624:	99 85       	ldd	r25, Y+9	; 0x09
     626:	9c 01       	movw	r18, r24
     628:	27 70       	andi	r18, 0x07	; 7
     62a:	33 27       	eor	r19, r19
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <ioport_get_pin_level+0x74>
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	2a 95       	dec	r18
     638:	e2 f7       	brpl	.-8      	; 0x632 <ioport_get_pin_level+0x70>
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     63a:	94 2f       	mov	r25, r20
     63c:	98 23       	and	r25, r24
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	99 23       	and	r25, r25
     642:	09 f4       	brne	.+2      	; 0x646 <ioport_get_pin_level+0x84>
     644:	80 e0       	ldi	r24, 0x00	; 0
	return arch_ioport_get_pin_level(pin);
}
     646:	2b 96       	adiw	r28, 0x0b	; 11
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <main>:
void SPI_MasterTransmit(uint8_t cData);
void tpFlag(void);
void smileFace(void);

int main (void)
{
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	c1 50       	subi	r28, 0x01	; 1
     662:	d0 46       	sbci	r29, 0x60	; 96
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
	
	
	uint8_t transmitByte;
	uint8_t display[24576];
	
	board_init();
     66e:	06 dd       	rcall	.-1524   	; 0x7c <board_init>
	ioport_init();
     670:	56 de       	rcall	.-852    	; 0x31e <ioport_init>

	SPI_MasterInit();
     672:	8e d1       	rcall	.+796    	; 0x990 <SPI_MasterInit>

	// Turns on back light :-)
	ioport_set_pin_mode(BACK_LIGHT, IOPORT_MODE_PULLUP);
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	58 de       	rcall	.-848    	; 0x32c <ioport_set_pin_mode>
	tpFlag();	
     67c:	09 d0       	rcall	.+18     	; 0x690 <tpFlag>
	
	while(1){
		button_state = ioport_get_pin_level(GPIO_PUSH_BUTTON_0);
     67e:	8f e0       	ldi	r24, 0x0F	; 15
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	9f df       	rcall	.-194    	; 0x5c2 <ioport_get_pin_level>
     684:	89 83       	std	Y+1, r24	; 0x01
		if(button_state){
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	88 23       	and	r24, r24
     68a:	09 f4       	brne	.+2      	; 0x68e <main+0x36>
				//LED_Off(LED0);
			}else{
				//LED_On(LED0);
				smileFace();
     68c:	a7 d0       	rcall	.+334    	; 0x7dc <smileFace>
			}
		}
     68e:	f7 cf       	rjmp	.-18     	; 0x67e <main+0x26>

00000690 <tpFlag>:
	return 0;
}

void tpFlag(void)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	2d 97       	sbiw	r28, 0x0d	; 13
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
uint8_t transmitByte = 0;
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
ioport_set_pin_level(TFT_DC, 0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	88 e0       	ldi	r24, 0x08	; 8
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	20 df       	rcall	.-448    	; 0x4ee <ioport_set_pin_level>
transmitByte = 0x2c;  // write command
     6ae:	8c e2       	ldi	r24, 0x2C	; 44
     6b0:	8d 87       	std	Y+13, r24	; 0x0d
SPI_MasterTransmit(transmitByte); // Send byte
     6b2:	8d 85       	ldd	r24, Y+13	; 0x0d
     6b4:	7b d6       	rcall	.+3318   	; 0x13ac <SPI_MasterTransmit>
ioport_set_pin_level(TFT_DC, 1);
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	88 e0       	ldi	r24, 0x08	; 8
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	18 df       	rcall	.-464    	; 0x4ee <ioport_set_pin_level>



for (int j = 0; j < LENGTH; j++) // once for every three bytes
     6be:	1a 82       	std	Y+2, r1	; 0x02
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	7d c0       	rjmp	.+250    	; 0x7be <tpFlag+0x12e>
{
	for(int i = 0; i < WIDTH/10; i++)
     6c4:	1c 82       	std	Y+4, r1	; 0x04
     6c6:	1b 82       	std	Y+3, r1	; 0x03
     6c8:	11 c0       	rjmp	.+34     	; 0x6ec <tpFlag+0x5c>
	{
		transmitByte = 0xfc;
     6ca:	8c ef       	ldi	r24, 0xFC	; 252
     6cc:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     6ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     6d0:	6d d6       	rcall	.+3290   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0x2f;
     6d2:	8f e2       	ldi	r24, 0x2F	; 47
     6d4:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     6d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     6d8:	69 d6       	rcall	.+3282   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xc2;
     6da:	82 ec       	ldi	r24, 0xC2	; 194
     6dc:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     6de:	8d 85       	ldd	r24, Y+13	; 0x0d
     6e0:	65 d6       	rcall	.+3274   	; 0x13ac <SPI_MasterTransmit>



for (int j = 0; j < LENGTH; j++) // once for every three bytes
{
	for(int i = 0; i < WIDTH/10; i++)
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	9c 83       	std	Y+4, r25	; 0x04
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	0d 97       	sbiw	r24, 0x0d	; 13
     6f2:	5c f3       	brlt	.-42     	; 0x6ca <tpFlag+0x3a>
		transmitByte = 0x2f;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xc2;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     6f4:	1e 82       	std	Y+6, r1	; 0x06
     6f6:	1d 82       	std	Y+5, r1	; 0x05
     6f8:	11 c0       	rjmp	.+34     	; 0x71c <tpFlag+0x8c>
	{
		transmitByte = 0xba;
     6fa:	8a eb       	ldi	r24, 0xBA	; 186
     6fc:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     6fe:	8d 85       	ldd	r24, Y+13	; 0x0d
     700:	55 d6       	rcall	.+3242   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xfb;
     702:	8b ef       	ldi	r24, 0xFB	; 251
     704:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     706:	8d 85       	ldd	r24, Y+13	; 0x0d
     708:	51 d6       	rcall	.+3234   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xaf;
     70a:	8f ea       	ldi	r24, 0xAF	; 175
     70c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     70e:	8d 85       	ldd	r24, Y+13	; 0x0d
     710:	4d d6       	rcall	.+3226   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0x2f;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xc2;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	9e 81       	ldd	r25, Y+6	; 0x06
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	9e 83       	std	Y+6, r25	; 0x06
     71a:	8d 83       	std	Y+5, r24	; 0x05
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	0d 97       	sbiw	r24, 0x0d	; 13
     722:	5c f3       	brlt	.-42     	; 0x6fa <tpFlag+0x6a>
		transmitByte = 0xfb;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xaf;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < (WIDTH/10 + 1 ); i++)
     724:	18 86       	std	Y+8, r1	; 0x08
     726:	1f 82       	std	Y+7, r1	; 0x07
     728:	11 c0       	rjmp	.+34     	; 0x74c <tpFlag+0xbc>
	{
		transmitByte = 0xff;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     72e:	8d 85       	ldd	r24, Y+13	; 0x0d
     730:	3d d6       	rcall	.+3194   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xff;
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     736:	8d 85       	ldd	r24, Y+13	; 0x0d
     738:	39 d6       	rcall	.+3186   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xff;
     73a:	8f ef       	ldi	r24, 0xFF	; 255
     73c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     73e:	8d 85       	ldd	r24, Y+13	; 0x0d
     740:	35 d6       	rcall	.+3178   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xfb;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xaf;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < (WIDTH/10 + 1 ); i++)
     742:	8f 81       	ldd	r24, Y+7	; 0x07
     744:	98 85       	ldd	r25, Y+8	; 0x08
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	98 87       	std	Y+8, r25	; 0x08
     74a:	8f 83       	std	Y+7, r24	; 0x07
     74c:	8f 81       	ldd	r24, Y+7	; 0x07
     74e:	98 85       	ldd	r25, Y+8	; 0x08
     750:	0e 97       	sbiw	r24, 0x0e	; 14
     752:	5c f3       	brlt	.-42     	; 0x72a <tpFlag+0x9a>
		transmitByte = 0xff;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xff;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     754:	1a 86       	std	Y+10, r1	; 0x0a
     756:	19 86       	std	Y+9, r1	; 0x09
     758:	11 c0       	rjmp	.+34     	; 0x77c <tpFlag+0xec>
	{
		transmitByte = 0xba;
     75a:	8a eb       	ldi	r24, 0xBA	; 186
     75c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     75e:	8d 85       	ldd	r24, Y+13	; 0x0d
     760:	25 d6       	rcall	.+3146   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xfb;
     762:	8b ef       	ldi	r24, 0xFB	; 251
     764:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     766:	8d 85       	ldd	r24, Y+13	; 0x0d
     768:	21 d6       	rcall	.+3138   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xaf;
     76a:	8f ea       	ldi	r24, 0xAF	; 175
     76c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     76e:	8d 85       	ldd	r24, Y+13	; 0x0d
     770:	1d d6       	rcall	.+3130   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xff;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xff;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     772:	89 85       	ldd	r24, Y+9	; 0x09
     774:	9a 85       	ldd	r25, Y+10	; 0x0a
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	9a 87       	std	Y+10, r25	; 0x0a
     77a:	89 87       	std	Y+9, r24	; 0x09
     77c:	89 85       	ldd	r24, Y+9	; 0x09
     77e:	9a 85       	ldd	r25, Y+10	; 0x0a
     780:	0d 97       	sbiw	r24, 0x0d	; 13
     782:	5c f3       	brlt	.-42     	; 0x75a <tpFlag+0xca>
		transmitByte = 0xfb;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xaf;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     784:	1c 86       	std	Y+12, r1	; 0x0c
     786:	1b 86       	std	Y+11, r1	; 0x0b
     788:	11 c0       	rjmp	.+34     	; 0x7ac <tpFlag+0x11c>
	{
		transmitByte = 0xfc;
     78a:	8c ef       	ldi	r24, 0xFC	; 252
     78c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     78e:	8d 85       	ldd	r24, Y+13	; 0x0d
     790:	0d d6       	rcall	.+3098   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0x2f;
     792:	8f e2       	ldi	r24, 0x2F	; 47
     794:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     796:	8d 85       	ldd	r24, Y+13	; 0x0d
     798:	09 d6       	rcall	.+3090   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xc2;
     79a:	82 ec       	ldi	r24, 0xC2	; 194
     79c:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
     79e:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a0:	05 d6       	rcall	.+3082   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xfb;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xaf;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i < WIDTH/10; i++)
     7a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	9c 87       	std	Y+12, r25	; 0x0c
     7aa:	8b 87       	std	Y+11, r24	; 0x0b
     7ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     7b0:	0d 97       	sbiw	r24, 0x0d	; 13
     7b2:	5c f3       	brlt	.-42     	; 0x78a <tpFlag+0xfa>
SPI_MasterTransmit(transmitByte); // Send byte
ioport_set_pin_level(TFT_DC, 1);



for (int j = 0; j < LENGTH; j++) // once for every three bytes
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	89 81       	ldd	r24, Y+1	; 0x01
     7c0:	9a 81       	ldd	r25, Y+2	; 0x02
     7c2:	83 38       	cpi	r24, 0x83	; 131
     7c4:	91 05       	cpc	r25, r1
     7c6:	0c f4       	brge	.+2      	; 0x7ca <tpFlag+0x13a>
     7c8:	7d cf       	rjmp	.-262    	; 0x6c4 <tpFlag+0x34>
		SPI_MasterTransmit(transmitByte);
	}
	
}

}
     7ca:	2d 96       	adiw	r28, 0x0d	; 13
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <smileFace>:

void smileFace(void)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <smileFace+0x6>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <smileFace+0x8>
     7e4:	1f 92       	push	r1
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t transmitByte = 0;
     7ea:	1d 82       	std	Y+5, r1	; 0x05
	ioport_set_pin_level(TFT_DC, 0);
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	88 e0       	ldi	r24, 0x08	; 8
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	7d de       	rcall	.-774    	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x2c;  // write command
     7f4:	8c e2       	ldi	r24, 0x2C	; 44
     7f6:	8d 83       	std	Y+5, r24	; 0x05
	SPI_MasterTransmit(transmitByte); // Send byte
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	d8 d5       	rcall	.+2992   	; 0x13ac <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	88 e0       	ldi	r24, 0x08	; 8
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	75 de       	rcall	.-790    	; 0x4ee <ioport_set_pin_level>



	for (int x = 0; x < LENGTH; x++) // once for every three bytes
     804:	1a 82       	std	Y+2, r1	; 0x02
     806:	19 82       	std	Y+1, r1	; 0x01
     808:	b5 c0       	rjmp	.+362    	; 0x974 <__stack+0x75>
	{
		transmitByte = 0x0f;
     80a:	8f e0       	ldi	r24, 0x0F	; 15
     80c:	8d 83       	std	Y+5, r24	; 0x05
		SPI_MasterTransmit(transmitByte);
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	cd d5       	rcall	.+2970   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xf0;
     812:	80 ef       	ldi	r24, 0xF0	; 240
     814:	8d 83       	std	Y+5, r24	; 0x05
		SPI_MasterTransmit(transmitByte);
     816:	8d 81       	ldd	r24, Y+5	; 0x05
     818:	c9 d5       	rcall	.+2962   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xff;
     81a:	8f ef       	ldi	r24, 0xFF	; 255
     81c:	8d 83       	std	Y+5, r24	; 0x05
		SPI_MasterTransmit(transmitByte);
     81e:	8d 81       	ldd	r24, Y+5	; 0x05
     820:	c5 d5       	rcall	.+2954   	; 0x13ac <SPI_MasterTransmit>

		for(int y = 0; y < WIDTH/2; y++)// each cycle puts out two pixels thus the "/2"
     822:	1c 82       	std	Y+4, r1	; 0x04
     824:	1b 82       	std	Y+3, r1	; 0x03
     826:	9b c0       	rjmp	.+310    	; 0x95e <__stack+0x5f>
		{
			

			if ( ((30 < x && x < 42) || (90 < x && x < 102)) && (4 < y && y < 14))
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	4f 97       	sbiw	r24, 0x1f	; 31
     82e:	24 f0       	brlt	.+8      	; 0x838 <smileFace+0x5c>
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	9a 81       	ldd	r25, Y+2	; 0x02
     834:	8a 97       	sbiw	r24, 0x2a	; 42
     836:	54 f0       	brlt	.+20     	; 0x84c <smileFace+0x70>
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
     83c:	8b 35       	cpi	r24, 0x5B	; 91
     83e:	91 05       	cpc	r25, r1
     840:	d4 f0       	brlt	.+52     	; 0x876 <smileFace+0x9a>
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	9a 81       	ldd	r25, Y+2	; 0x02
     846:	86 36       	cpi	r24, 0x66	; 102
     848:	91 05       	cpc	r25, r1
     84a:	ac f4       	brge	.+42     	; 0x876 <smileFace+0x9a>
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	05 97       	sbiw	r24, 0x05	; 5
     852:	8c f0       	brlt	.+34     	; 0x876 <smileFace+0x9a>
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	0e 97       	sbiw	r24, 0x0e	; 14
     85a:	6c f4       	brge	.+26     	; 0x876 <smileFace+0x9a>
			{
				transmitByte = 0x33;
     85c:	83 e3       	ldi	r24, 0x33	; 51
     85e:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     860:	8d 81       	ldd	r24, Y+5	; 0x05
     862:	a4 d5       	rcall	.+2888   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xf3;
     864:	83 ef       	ldi	r24, 0xF3	; 243
     866:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     868:	8d 81       	ldd	r24, Y+5	; 0x05
     86a:	a0 d5       	rcall	.+2880   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0x3f;
     86c:	8f e3       	ldi	r24, 0x3F	; 63
     86e:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9c d5       	rcall	.+2872   	; 0x13ac <SPI_MasterTransmit>
     874:	6f c0       	rjmp	.+222    	; 0x954 <__stack+0x55>
			}
			else if ( ((60 < x && x < 72)) && (16 < y && y < 24))
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	cd 97       	sbiw	r24, 0x3d	; 61
     87c:	d4 f0       	brlt	.+52     	; 0x8b2 <smileFace+0xd6>
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	88 34       	cpi	r24, 0x48	; 72
     884:	91 05       	cpc	r25, r1
     886:	ac f4       	brge	.+42     	; 0x8b2 <smileFace+0xd6>
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	41 97       	sbiw	r24, 0x11	; 17
     88e:	8c f0       	brlt	.+34     	; 0x8b2 <smileFace+0xd6>
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	48 97       	sbiw	r24, 0x18	; 24
     896:	6c f4       	brge	.+26     	; 0x8b2 <smileFace+0xd6>
			{
				transmitByte = 0x33;
     898:	83 e3       	ldi	r24, 0x33	; 51
     89a:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     89c:	8d 81       	ldd	r24, Y+5	; 0x05
     89e:	86 d5       	rcall	.+2828   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xf3;
     8a0:	83 ef       	ldi	r24, 0xF3	; 243
     8a2:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	82 d5       	rcall	.+2820   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0x3f;
     8a8:	8f e3       	ldi	r24, 0x3F	; 63
     8aa:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     8ac:	8d 81       	ldd	r24, Y+5	; 0x05
     8ae:	7e d5       	rcall	.+2812   	; 0x13ac <SPI_MasterTransmit>
     8b0:	51 c0       	rjmp	.+162    	; 0x954 <__stack+0x55>
			}
			else if ( ((24 < x && x < 36) || (95 < x && x < 105)) && (26 < y && y <= 28))
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	9a 81       	ldd	r25, Y+2	; 0x02
     8b6:	49 97       	sbiw	r24, 0x19	; 25
     8b8:	24 f0       	brlt	.+8      	; 0x8c2 <smileFace+0xe6>
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	9a 81       	ldd	r25, Y+2	; 0x02
     8be:	84 97       	sbiw	r24, 0x24	; 36
     8c0:	54 f0       	brlt	.+20     	; 0x8d6 <smileFace+0xfa>
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	80 36       	cpi	r24, 0x60	; 96
     8c8:	91 05       	cpc	r25, r1
     8ca:	d4 f0       	brlt	.+52     	; 0x900 <__stack+0x1>
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	89 36       	cpi	r24, 0x69	; 105
     8d2:	91 05       	cpc	r25, r1
     8d4:	ac f4       	brge	.+42     	; 0x900 <__stack+0x1>
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	4b 97       	sbiw	r24, 0x1b	; 27
     8dc:	8c f0       	brlt	.+34     	; 0x900 <__stack+0x1>
     8de:	8b 81       	ldd	r24, Y+3	; 0x03
     8e0:	9c 81       	ldd	r25, Y+4	; 0x04
     8e2:	4d 97       	sbiw	r24, 0x1d	; 29
     8e4:	6c f4       	brge	.+26     	; 0x900 <__stack+0x1>
			{
				transmitByte = 0x33;
     8e6:	83 e3       	ldi	r24, 0x33	; 51
     8e8:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     8ea:	8d 81       	ldd	r24, Y+5	; 0x05
     8ec:	5f d5       	rcall	.+2750   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xf3;
     8ee:	83 ef       	ldi	r24, 0xF3	; 243
     8f0:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     8f2:	8d 81       	ldd	r24, Y+5	; 0x05
     8f4:	5b d5       	rcall	.+2742   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0x3f;
     8f6:	8f e3       	ldi	r24, 0x3F	; 63
     8f8:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     8fa:	8d 81       	ldd	r24, Y+5	; 0x05
     8fc:	57 d5       	rcall	.+2734   	; 0x13ac <SPI_MasterTransmit>
     8fe:	2a c0       	rjmp	.+84     	; 0x954 <__stack+0x55>
			}
			else if ( (24 < x && x < 105) && (28 < y && y < 36))
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	49 97       	sbiw	r24, 0x19	; 25
     906:	d4 f0       	brlt	.+52     	; 0x93c <__stack+0x3d>
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	89 36       	cpi	r24, 0x69	; 105
     90e:	91 05       	cpc	r25, r1
     910:	ac f4       	brge	.+42     	; 0x93c <__stack+0x3d>
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	4d 97       	sbiw	r24, 0x1d	; 29
     918:	8c f0       	brlt	.+34     	; 0x93c <__stack+0x3d>
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	84 97       	sbiw	r24, 0x24	; 36
     920:	6c f4       	brge	.+26     	; 0x93c <__stack+0x3d>
			{
				transmitByte = 0x33;
     922:	83 e3       	ldi	r24, 0x33	; 51
     924:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     926:	8d 81       	ldd	r24, Y+5	; 0x05
     928:	41 d5       	rcall	.+2690   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xf3;
     92a:	83 ef       	ldi	r24, 0xF3	; 243
     92c:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     92e:	8d 81       	ldd	r24, Y+5	; 0x05
     930:	3d d5       	rcall	.+2682   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0x3f;
     932:	8f e3       	ldi	r24, 0x3F	; 63
     934:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     936:	8d 81       	ldd	r24, Y+5	; 0x05
     938:	39 d5       	rcall	.+2674   	; 0x13ac <SPI_MasterTransmit>
     93a:	0c c0       	rjmp	.+24     	; 0x954 <__stack+0x55>
			}
			else
			{
				transmitByte = 0x0f;
     93c:	8f e0       	ldi	r24, 0x0F	; 15
     93e:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	34 d5       	rcall	.+2664   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xf0;
     944:	80 ef       	ldi	r24, 0xF0	; 240
     946:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     948:	8d 81       	ldd	r24, Y+5	; 0x05
     94a:	30 d5       	rcall	.+2656   	; 0x13ac <SPI_MasterTransmit>
				transmitByte = 0xff;
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	8d 83       	std	Y+5, r24	; 0x05
				SPI_MasterTransmit(transmitByte);
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	2c d5       	rcall	.+2648   	; 0x13ac <SPI_MasterTransmit>
		transmitByte = 0xf0;
		SPI_MasterTransmit(transmitByte);
		transmitByte = 0xff;
		SPI_MasterTransmit(transmitByte);

		for(int y = 0; y < WIDTH/2; y++)// each cycle puts out two pixels thus the "/2"
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	8b 83       	std	Y+3, r24	; 0x03
     95e:	8b 81       	ldd	r24, Y+3	; 0x03
     960:	9c 81       	ldd	r25, Y+4	; 0x04
     962:	81 34       	cpi	r24, 0x41	; 65
     964:	91 05       	cpc	r25, r1
     966:	0c f4       	brge	.+2      	; 0x96a <__stack+0x6b>
     968:	5f cf       	rjmp	.-322    	; 0x828 <smileFace+0x4c>
	SPI_MasterTransmit(transmitByte); // Send byte
	ioport_set_pin_level(TFT_DC, 1);



	for (int x = 0; x < LENGTH; x++) // once for every three bytes
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	9a 81       	ldd	r25, Y+2	; 0x02
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	9a 83       	std	Y+2, r25	; 0x02
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	83 38       	cpi	r24, 0x83	; 131
     97a:	91 05       	cpc	r25, r1
     97c:	0c f4       	brge	.+2      	; 0x980 <__stack+0x81>
     97e:	45 cf       	rjmp	.-374    	; 0x80a <smileFace+0x2e>
				transmitByte = 0xff;
				SPI_MasterTransmit(transmitByte);
			}		
		}
	}
}
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <SPI_MasterInit>:

// initializes the spi and sets up display
void SPI_MasterInit(void)
{
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	cf 56       	subi	r28, 0x6F	; 111
     99e:	d1 09       	sbc	r29, r1
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB3)|(1<<DDB5);//|(1<<DDB2); // modified to make SS output
     9aa:	84 e2       	ldi	r24, 0x24	; 36
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 e2       	ldi	r18, 0x28	; 40
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
	
	// To prevent it from getting pulled out of Master mode
	ioport_set_pin_mode(SS_PIN, IOPORT_MODE_PULLUP);
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	b8 dc       	rcall	.-1680   	; 0x32c <ioport_set_pin_mode>
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     9bc:	8c e4       	ldi	r24, 0x4C	; 76
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	21 e5       	ldi	r18, 0x51	; 81
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18

	PRR = 0x00;
     9c6:	84 e6       	ldi	r24, 0x64	; 100
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	fc 01       	movw	r30, r24
     9cc:	10 82       	st	Z, r1

	uint8_t transmitByte = 0 ;
     9ce:	1d 86       	std	Y+13, r1	; 0x0d

	ioport_set_pin_dir(BACK_LIGHT, IOPORT_DIR_OUTPUT);
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	89 e0       	ldi	r24, 0x09	; 9
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0f dd       	rcall	.-1506   	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_DC, IOPORT_DIR_OUTPUT);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	88 e0       	ldi	r24, 0x08	; 8
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0a dd       	rcall	.-1516   	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_RST, IOPORT_DIR_OUTPUT);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	8f e1       	ldi	r24, 0x1F	; 31
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	05 dd       	rcall	.-1526   	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_CS, IOPORT_DIR_OUTPUT);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	00 dd       	rcall	.-1536   	; 0x3f8 <ioport_set_pin_dir>
	ioport_set_pin_dir(CARD_CS, IOPORT_DIR_OUTPUT);
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	8d e1       	ldi	r24, 0x1D	; 29
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fb dc       	rcall	.-1546   	; 0x3f8 <ioport_set_pin_dir>
	
	
	
	ioport_set_pin_level(TFT_DC, 0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	88 e0       	ldi	r24, 0x08	; 8
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	72 dd       	rcall	.-1308   	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(TFT_CS, 0);  // serial interface initializes when CS is high pg 33
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	6e dd       	rcall	.-1316   	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(CARD_CS, 1);  // Turn off card 
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	8d e1       	ldi	r24, 0x1D	; 29
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	6a dd       	rcall	.-1324   	; 0x4ee <ioport_set_pin_level>

	ioport_set_pin_level(TFT_RST, 1);
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	8f e1       	ldi	r24, 0x1F	; 31
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	66 dd       	rcall	.-1332   	; 0x4ee <ioport_set_pin_level>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	aa ef       	ldi	r26, 0xFA	; 250
     a28:	b3 e4       	ldi	r27, 0x43	; 67
     a2a:	8e 87       	std	Y+14, r24	; 0x0e
     a2c:	9f 87       	std	Y+15, r25	; 0x0f
     a2e:	a8 8b       	std	Y+16, r26	; 0x10
     a30:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	53 e4       	ldi	r21, 0x43	; 67
     a3a:	6e 85       	ldd	r22, Y+14	; 0x0e
     a3c:	7f 85       	ldd	r23, Y+15	; 0x0f
     a3e:	88 89       	ldd	r24, Y+16	; 0x10
     a40:	99 89       	ldd	r25, Y+17	; 0x11
     a42:	4b d5       	rcall	.+2710   	; 0x14da <__mulsf3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	8a 8b       	std	Y+18, r24	; 0x12
     a4a:	9b 8b       	std	Y+19, r25	; 0x13
     a4c:	ac 8b       	std	Y+20, r26	; 0x14
     a4e:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e8       	ldi	r20, 0x80	; 128
     a56:	5f e3       	ldi	r21, 0x3F	; 63
     a58:	6a 89       	ldd	r22, Y+18	; 0x12
     a5a:	7b 89       	ldd	r23, Y+19	; 0x13
     a5c:	8c 89       	ldd	r24, Y+20	; 0x14
     a5e:	9d 89       	ldd	r25, Y+21	; 0x15
     a60:	bb d4       	rcall	.+2422   	; 0x13d8 <__cmpsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <SPI_MasterInit+0xe0>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9f 8b       	std	Y+23, r25	; 0x17
     a6c:	8e 8b       	std	Y+22, r24	; 0x16
     a6e:	3b c0       	rjmp	.+118    	; 0xae6 <SPI_MasterInit+0x156>
	else if (__tmp > 65535)
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	3f ef       	ldi	r19, 0xFF	; 255
     a74:	4f e7       	ldi	r20, 0x7F	; 127
     a76:	57 e4       	ldi	r21, 0x47	; 71
     a78:	6a 89       	ldd	r22, Y+18	; 0x12
     a7a:	7b 89       	ldd	r23, Y+19	; 0x13
     a7c:	8c 89       	ldd	r24, Y+20	; 0x14
     a7e:	9d 89       	ldd	r25, Y+21	; 0x15
     a80:	28 d5       	rcall	.+2640   	; 0x14d2 <__gesf2>
     a82:	18 16       	cp	r1, r24
     a84:	3c f5       	brge	.+78     	; 0xad4 <SPI_MasterInit+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 e2       	ldi	r20, 0x20	; 32
     a8c:	51 e4       	ldi	r21, 0x41	; 65
     a8e:	6e 85       	ldd	r22, Y+14	; 0x0e
     a90:	7f 85       	ldd	r23, Y+15	; 0x0f
     a92:	88 89       	ldd	r24, Y+16	; 0x10
     a94:	99 89       	ldd	r25, Y+17	; 0x11
     a96:	21 d5       	rcall	.+2626   	; 0x14da <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	9f d4       	rcall	.+2366   	; 0x13e0 <__fixunssfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	9f 8b       	std	Y+23, r25	; 0x17
     aa8:	8e 8b       	std	Y+22, r24	; 0x16
     aaa:	0f c0       	rjmp	.+30     	; 0xaca <SPI_MasterInit+0x13a>
     aac:	89 e1       	ldi	r24, 0x19	; 25
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	99 8f       	std	Y+25, r25	; 0x19
     ab2:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ab4:	88 8d       	ldd	r24, Y+24	; 0x18
     ab6:	99 8d       	ldd	r25, Y+25	; 0x19
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	f1 f7       	brne	.-4      	; 0xab8 <SPI_MasterInit+0x128>
     abc:	99 8f       	std	Y+25, r25	; 0x19
     abe:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	8e 89       	ldd	r24, Y+22	; 0x16
     ac2:	9f 89       	ldd	r25, Y+23	; 0x17
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	9f 8b       	std	Y+23, r25	; 0x17
     ac8:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aca:	8e 89       	ldd	r24, Y+22	; 0x16
     acc:	9f 89       	ldd	r25, Y+23	; 0x17
     ace:	89 2b       	or	r24, r25
     ad0:	69 f7       	brne	.-38     	; 0xaac <SPI_MasterInit+0x11c>
     ad2:	13 c0       	rjmp	.+38     	; 0xafa <SPI_MasterInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad4:	6a 89       	ldd	r22, Y+18	; 0x12
     ad6:	7b 89       	ldd	r23, Y+19	; 0x13
     ad8:	8c 89       	ldd	r24, Y+20	; 0x14
     ada:	9d 89       	ldd	r25, Y+21	; 0x15
     adc:	81 d4       	rcall	.+2306   	; 0x13e0 <__fixunssfsi>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	9f 8b       	std	Y+23, r25	; 0x17
     ae4:	8e 8b       	std	Y+22, r24	; 0x16
     ae6:	8e 89       	ldd	r24, Y+22	; 0x16
     ae8:	9f 89       	ldd	r25, Y+23	; 0x17
     aea:	9b 8f       	std	Y+27, r25	; 0x1b
     aec:	8a 8f       	std	Y+26, r24	; 0x1a
     aee:	8a 8d       	ldd	r24, Y+26	; 0x1a
     af0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <SPI_MasterInit+0x162>
     af6:	9b 8f       	std	Y+27, r25	; 0x1b
     af8:	8a 8f       	std	Y+26, r24	; 0x1a
	_delay_ms(500);
	ioport_set_pin_level(TFT_RST, 0);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	8f e1       	ldi	r24, 0x1F	; 31
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	f6 dc       	rcall	.-1556   	; 0x4ee <ioport_set_pin_level>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	aa ef       	ldi	r26, 0xFA	; 250
     b08:	b3 e4       	ldi	r27, 0x43	; 67
     b0a:	8c 8f       	std	Y+28, r24	; 0x1c
     b0c:	9d 8f       	std	Y+29, r25	; 0x1d
     b0e:	ae 8f       	std	Y+30, r26	; 0x1e
     b10:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4a e7       	ldi	r20, 0x7A	; 122
     b18:	53 e4       	ldi	r21, 0x43	; 67
     b1a:	6c 8d       	ldd	r22, Y+28	; 0x1c
     b1c:	7d 8d       	ldd	r23, Y+29	; 0x1d
     b1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b20:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b22:	db d4       	rcall	.+2486   	; 0x14da <__mulsf3>
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	88 a3       	std	Y+32, r24	; 0x20
     b2a:	99 a3       	std	Y+33, r25	; 0x21
     b2c:	aa a3       	std	Y+34, r26	; 0x22
     b2e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e8       	ldi	r20, 0x80	; 128
     b36:	5f e3       	ldi	r21, 0x3F	; 63
     b38:	68 a1       	ldd	r22, Y+32	; 0x20
     b3a:	79 a1       	ldd	r23, Y+33	; 0x21
     b3c:	8a a1       	ldd	r24, Y+34	; 0x22
     b3e:	9b a1       	ldd	r25, Y+35	; 0x23
     b40:	4b d4       	rcall	.+2198   	; 0x13d8 <__cmpsf2>
     b42:	88 23       	and	r24, r24
     b44:	2c f4       	brge	.+10     	; 0xb50 <SPI_MasterInit+0x1c0>
		__ticks = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	9d a3       	std	Y+37, r25	; 0x25
     b4c:	8c a3       	std	Y+36, r24	; 0x24
     b4e:	3b c0       	rjmp	.+118    	; 0xbc6 <SPI_MasterInit+0x236>
	else if (__tmp > 65535)
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	3f ef       	ldi	r19, 0xFF	; 255
     b54:	4f e7       	ldi	r20, 0x7F	; 127
     b56:	57 e4       	ldi	r21, 0x47	; 71
     b58:	68 a1       	ldd	r22, Y+32	; 0x20
     b5a:	79 a1       	ldd	r23, Y+33	; 0x21
     b5c:	8a a1       	ldd	r24, Y+34	; 0x22
     b5e:	9b a1       	ldd	r25, Y+35	; 0x23
     b60:	b8 d4       	rcall	.+2416   	; 0x14d2 <__gesf2>
     b62:	18 16       	cp	r1, r24
     b64:	3c f5       	brge	.+78     	; 0xbb4 <SPI_MasterInit+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e2       	ldi	r20, 0x20	; 32
     b6c:	51 e4       	ldi	r21, 0x41	; 65
     b6e:	6c 8d       	ldd	r22, Y+28	; 0x1c
     b70:	7d 8d       	ldd	r23, Y+29	; 0x1d
     b72:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b74:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b76:	b1 d4       	rcall	.+2402   	; 0x14da <__mulsf3>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	bc 01       	movw	r22, r24
     b7e:	cd 01       	movw	r24, r26
     b80:	2f d4       	rcall	.+2142   	; 0x13e0 <__fixunssfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	9d a3       	std	Y+37, r25	; 0x25
     b88:	8c a3       	std	Y+36, r24	; 0x24
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <SPI_MasterInit+0x21a>
     b8c:	89 e1       	ldi	r24, 0x19	; 25
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9f a3       	std	Y+39, r25	; 0x27
     b92:	8e a3       	std	Y+38, r24	; 0x26
     b94:	8e a1       	ldd	r24, Y+38	; 0x26
     b96:	9f a1       	ldd	r25, Y+39	; 0x27
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <SPI_MasterInit+0x208>
     b9c:	9f a3       	std	Y+39, r25	; 0x27
     b9e:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba0:	8c a1       	ldd	r24, Y+36	; 0x24
     ba2:	9d a1       	ldd	r25, Y+37	; 0x25
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9d a3       	std	Y+37, r25	; 0x25
     ba8:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     baa:	8c a1       	ldd	r24, Y+36	; 0x24
     bac:	9d a1       	ldd	r25, Y+37	; 0x25
     bae:	89 2b       	or	r24, r25
     bb0:	69 f7       	brne	.-38     	; 0xb8c <SPI_MasterInit+0x1fc>
     bb2:	13 c0       	rjmp	.+38     	; 0xbda <SPI_MasterInit+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bb4:	68 a1       	ldd	r22, Y+32	; 0x20
     bb6:	79 a1       	ldd	r23, Y+33	; 0x21
     bb8:	8a a1       	ldd	r24, Y+34	; 0x22
     bba:	9b a1       	ldd	r25, Y+35	; 0x23
     bbc:	11 d4       	rcall	.+2082   	; 0x13e0 <__fixunssfsi>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	9d a3       	std	Y+37, r25	; 0x25
     bc4:	8c a3       	std	Y+36, r24	; 0x24
     bc6:	8c a1       	ldd	r24, Y+36	; 0x24
     bc8:	9d a1       	ldd	r25, Y+37	; 0x25
     bca:	99 a7       	std	Y+41, r25	; 0x29
     bcc:	88 a7       	std	Y+40, r24	; 0x28
     bce:	88 a5       	ldd	r24, Y+40	; 0x28
     bd0:	99 a5       	ldd	r25, Y+41	; 0x29
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <SPI_MasterInit+0x242>
     bd6:	99 a7       	std	Y+41, r25	; 0x29
     bd8:	88 a7       	std	Y+40, r24	; 0x28
	_delay_ms(500);
	ioport_set_pin_level(TFT_RST, 1);
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	8f e1       	ldi	r24, 0x1F	; 31
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	86 dc       	rcall	.-1780   	; 0x4ee <ioport_set_pin_level>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	aa ef       	ldi	r26, 0xFA	; 250
     be8:	b3 e4       	ldi	r27, 0x43	; 67
     bea:	8a a7       	std	Y+42, r24	; 0x2a
     bec:	9b a7       	std	Y+43, r25	; 0x2b
     bee:	ac a7       	std	Y+44, r26	; 0x2c
     bf0:	bd a7       	std	Y+45, r27	; 0x2d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	4a e7       	ldi	r20, 0x7A	; 122
     bf8:	53 e4       	ldi	r21, 0x43	; 67
     bfa:	6a a5       	ldd	r22, Y+42	; 0x2a
     bfc:	7b a5       	ldd	r23, Y+43	; 0x2b
     bfe:	8c a5       	ldd	r24, Y+44	; 0x2c
     c00:	9d a5       	ldd	r25, Y+45	; 0x2d
     c02:	6b d4       	rcall	.+2262   	; 0x14da <__mulsf3>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	8e a7       	std	Y+46, r24	; 0x2e
     c0a:	9f a7       	std	Y+47, r25	; 0x2f
     c0c:	a8 ab       	std	Y+48, r26	; 0x30
     c0e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e8       	ldi	r20, 0x80	; 128
     c16:	5f e3       	ldi	r21, 0x3F	; 63
     c18:	6e a5       	ldd	r22, Y+46	; 0x2e
     c1a:	7f a5       	ldd	r23, Y+47	; 0x2f
     c1c:	88 a9       	ldd	r24, Y+48	; 0x30
     c1e:	99 a9       	ldd	r25, Y+49	; 0x31
     c20:	db d3       	rcall	.+1974   	; 0x13d8 <__cmpsf2>
     c22:	88 23       	and	r24, r24
     c24:	2c f4       	brge	.+10     	; 0xc30 <SPI_MasterInit+0x2a0>
		__ticks = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9b ab       	std	Y+51, r25	; 0x33
     c2c:	8a ab       	std	Y+50, r24	; 0x32
     c2e:	3b c0       	rjmp	.+118    	; 0xca6 <SPI_MasterInit+0x316>
	else if (__tmp > 65535)
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	6e a5       	ldd	r22, Y+46	; 0x2e
     c3a:	7f a5       	ldd	r23, Y+47	; 0x2f
     c3c:	88 a9       	ldd	r24, Y+48	; 0x30
     c3e:	99 a9       	ldd	r25, Y+49	; 0x31
     c40:	48 d4       	rcall	.+2192   	; 0x14d2 <__gesf2>
     c42:	18 16       	cp	r1, r24
     c44:	3c f5       	brge	.+78     	; 0xc94 <SPI_MasterInit+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	6a a5       	ldd	r22, Y+42	; 0x2a
     c50:	7b a5       	ldd	r23, Y+43	; 0x2b
     c52:	8c a5       	ldd	r24, Y+44	; 0x2c
     c54:	9d a5       	ldd	r25, Y+45	; 0x2d
     c56:	41 d4       	rcall	.+2178   	; 0x14da <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	bc 01       	movw	r22, r24
     c5e:	cd 01       	movw	r24, r26
     c60:	bf d3       	rcall	.+1918   	; 0x13e0 <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9b ab       	std	Y+51, r25	; 0x33
     c68:	8a ab       	std	Y+50, r24	; 0x32
     c6a:	0f c0       	rjmp	.+30     	; 0xc8a <SPI_MasterInit+0x2fa>
     c6c:	89 e1       	ldi	r24, 0x19	; 25
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	9d ab       	std	Y+53, r25	; 0x35
     c72:	8c ab       	std	Y+52, r24	; 0x34
     c74:	8c a9       	ldd	r24, Y+52	; 0x34
     c76:	9d a9       	ldd	r25, Y+53	; 0x35
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <SPI_MasterInit+0x2e8>
     c7c:	9d ab       	std	Y+53, r25	; 0x35
     c7e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c80:	8a a9       	ldd	r24, Y+50	; 0x32
     c82:	9b a9       	ldd	r25, Y+51	; 0x33
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	9b ab       	std	Y+51, r25	; 0x33
     c88:	8a ab       	std	Y+50, r24	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c8a:	8a a9       	ldd	r24, Y+50	; 0x32
     c8c:	9b a9       	ldd	r25, Y+51	; 0x33
     c8e:	89 2b       	or	r24, r25
     c90:	69 f7       	brne	.-38     	; 0xc6c <SPI_MasterInit+0x2dc>
     c92:	13 c0       	rjmp	.+38     	; 0xcba <SPI_MasterInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c94:	6e a5       	ldd	r22, Y+46	; 0x2e
     c96:	7f a5       	ldd	r23, Y+47	; 0x2f
     c98:	88 a9       	ldd	r24, Y+48	; 0x30
     c9a:	99 a9       	ldd	r25, Y+49	; 0x31
     c9c:	a1 d3       	rcall	.+1858   	; 0x13e0 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9b ab       	std	Y+51, r25	; 0x33
     ca4:	8a ab       	std	Y+50, r24	; 0x32
     ca6:	8a a9       	ldd	r24, Y+50	; 0x32
     ca8:	9b a9       	ldd	r25, Y+51	; 0x33
     caa:	9f ab       	std	Y+55, r25	; 0x37
     cac:	8e ab       	std	Y+54, r24	; 0x36
     cae:	8e a9       	ldd	r24, Y+54	; 0x36
     cb0:	9f a9       	ldd	r25, Y+55	; 0x37
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <SPI_MasterInit+0x322>
     cb6:	9f ab       	std	Y+55, r25	; 0x37
     cb8:	8e ab       	std	Y+54, r24	; 0x36
	_delay_ms(500);
	ioport_set_pin_level(TFT_CS, 1); // active low
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	8e e1       	ldi	r24, 0x1E	; 30
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	16 dc       	rcall	.-2004   	; 0x4ee <ioport_set_pin_level>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	aa ef       	ldi	r26, 0xFA	; 250
     cc8:	b3 e4       	ldi	r27, 0x43	; 67
     cca:	88 af       	std	Y+56, r24	; 0x38
     ccc:	99 af       	std	Y+57, r25	; 0x39
     cce:	aa af       	std	Y+58, r26	; 0x3a
     cd0:	bb af       	std	Y+59, r27	; 0x3b

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	4a e7       	ldi	r20, 0x7A	; 122
     cd8:	53 e4       	ldi	r21, 0x43	; 67
     cda:	68 ad       	ldd	r22, Y+56	; 0x38
     cdc:	79 ad       	ldd	r23, Y+57	; 0x39
     cde:	8a ad       	ldd	r24, Y+58	; 0x3a
     ce0:	9b ad       	ldd	r25, Y+59	; 0x3b
     ce2:	fb d3       	rcall	.+2038   	; 0x14da <__mulsf3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8c af       	std	Y+60, r24	; 0x3c
     cea:	9d af       	std	Y+61, r25	; 0x3d
     cec:	ae af       	std	Y+62, r26	; 0x3e
     cee:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	6c ad       	ldd	r22, Y+60	; 0x3c
     cfa:	7d ad       	ldd	r23, Y+61	; 0x3d
     cfc:	8e ad       	ldd	r24, Y+62	; 0x3e
     cfe:	9f ad       	ldd	r25, Y+63	; 0x3f
     d00:	6b d3       	rcall	.+1750   	; 0x13d8 <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	4c f4       	brge	.+18     	; 0xd18 <SPI_MasterInit+0x388>
		__ticks = 1;
     d06:	ce 01       	movw	r24, r28
     d08:	80 5c       	subi	r24, 0xC0	; 192
     d0a:	9f 4f       	sbci	r25, 0xFF	; 255
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	fc 01       	movw	r30, r24
     d12:	31 83       	std	Z+1, r19	; 0x01
     d14:	20 83       	st	Z, r18
     d16:	5d c0       	rjmp	.+186    	; 0xdd2 <SPI_MasterInit+0x442>
	else if (__tmp > 65535)
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	6c ad       	ldd	r22, Y+60	; 0x3c
     d22:	7d ad       	ldd	r23, Y+61	; 0x3d
     d24:	8e ad       	ldd	r24, Y+62	; 0x3e
     d26:	9f ad       	ldd	r25, Y+63	; 0x3f
     d28:	d4 d3       	rcall	.+1960   	; 0x14d2 <__gesf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	0c f0       	brlt	.+2      	; 0xd30 <SPI_MasterInit+0x3a0>
     d2e:	44 c0       	rjmp	.+136    	; 0xdb8 <SPI_MasterInit+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	68 ad       	ldd	r22, Y+56	; 0x38
     d3a:	79 ad       	ldd	r23, Y+57	; 0x39
     d3c:	8a ad       	ldd	r24, Y+58	; 0x3a
     d3e:	9b ad       	ldd	r25, Y+59	; 0x3b
     d40:	cc d3       	rcall	.+1944   	; 0x14da <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	8e 01       	movw	r16, r28
     d48:	00 5c       	subi	r16, 0xC0	; 192
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	bc 01       	movw	r22, r24
     d4e:	cd 01       	movw	r24, r26
     d50:	47 d3       	rcall	.+1678   	; 0x13e0 <__fixunssfsi>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	f8 01       	movw	r30, r16
     d58:	91 83       	std	Z+1, r25	; 0x01
     d5a:	80 83       	st	Z, r24
     d5c:	24 c0       	rjmp	.+72     	; 0xda6 <SPI_MasterInit+0x416>
     d5e:	ce 01       	movw	r24, r28
     d60:	8e 5b       	subi	r24, 0xBE	; 190
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	29 e1       	ldi	r18, 0x19	; 25
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	fc 01       	movw	r30, r24
     d6a:	31 83       	std	Z+1, r19	; 0x01
     d6c:	20 83       	st	Z, r18
     d6e:	ce 01       	movw	r24, r28
     d70:	8e 5b       	subi	r24, 0xBE	; 190
     d72:	9f 4f       	sbci	r25, 0xFF	; 255
     d74:	fc 01       	movw	r30, r24
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <SPI_MasterInit+0x3ea>
     d7e:	9e 01       	movw	r18, r28
     d80:	2e 5b       	subi	r18, 0xBE	; 190
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	f9 01       	movw	r30, r18
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	ce 01       	movw	r24, r28
     d8c:	80 5c       	subi	r24, 0xC0	; 192
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	9e 01       	movw	r18, r28
     d92:	20 5c       	subi	r18, 0xC0	; 192
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	f9 01       	movw	r30, r18
     d98:	20 81       	ld	r18, Z
     d9a:	31 81       	ldd	r19, Z+1	; 0x01
     d9c:	21 50       	subi	r18, 0x01	; 1
     d9e:	31 09       	sbc	r19, r1
     da0:	fc 01       	movw	r30, r24
     da2:	31 83       	std	Z+1, r19	; 0x01
     da4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	ce 01       	movw	r24, r28
     da8:	80 5c       	subi	r24, 0xC0	; 192
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	fc 01       	movw	r30, r24
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	89 2b       	or	r24, r25
     db4:	a1 f6       	brne	.-88     	; 0xd5e <SPI_MasterInit+0x3ce>
     db6:	27 c0       	rjmp	.+78     	; 0xe06 <SPI_MasterInit+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db8:	8e 01       	movw	r16, r28
     dba:	00 5c       	subi	r16, 0xC0	; 192
     dbc:	1f 4f       	sbci	r17, 0xFF	; 255
     dbe:	6c ad       	ldd	r22, Y+60	; 0x3c
     dc0:	7d ad       	ldd	r23, Y+61	; 0x3d
     dc2:	8e ad       	ldd	r24, Y+62	; 0x3e
     dc4:	9f ad       	ldd	r25, Y+63	; 0x3f
     dc6:	0c d3       	rcall	.+1560   	; 0x13e0 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	f8 01       	movw	r30, r16
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	ce 01       	movw	r24, r28
     dd4:	8c 5b       	subi	r24, 0xBC	; 188
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	9e 01       	movw	r18, r28
     dda:	20 5c       	subi	r18, 0xC0	; 192
     ddc:	3f 4f       	sbci	r19, 0xFF	; 255
     dde:	f9 01       	movw	r30, r18
     de0:	20 81       	ld	r18, Z
     de2:	31 81       	ldd	r19, Z+1	; 0x01
     de4:	fc 01       	movw	r30, r24
     de6:	31 83       	std	Z+1, r19	; 0x01
     de8:	20 83       	st	Z, r18
     dea:	ce 01       	movw	r24, r28
     dec:	8c 5b       	subi	r24, 0xBC	; 188
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	91 81       	ldd	r25, Z+1	; 0x01
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <SPI_MasterInit+0x466>
     dfa:	9e 01       	movw	r18, r28
     dfc:	2c 5b       	subi	r18, 0xBC	; 188
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	f9 01       	movw	r30, r18
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24
	_delay_ms(500);
	ioport_set_pin_level(TFT_CS, 0); // active low
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	8e e1       	ldi	r24, 0x1E	; 30
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	70 db       	rcall	.-2336   	; 0x4ee <ioport_set_pin_level>
	ioport_set_pin_level(TFT_DC, 0); // active low
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	88 e0       	ldi	r24, 0x08	; 8
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	6c db       	rcall	.-2344   	; 0x4ee <ioport_set_pin_level>
	
	transmitByte = 0x29; // Turn on command
     e16:	89 e2       	ldi	r24, 0x29	; 41
     e18:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_MasterTransmit(transmitByte);
     e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1c:	c7 d2       	rcall	.+1422   	; 0x13ac <SPI_MasterTransmit>
     e1e:	9e 01       	movw	r18, r28
     e20:	2a 5b       	subi	r18, 0xBA	; 186
     e22:	3f 4f       	sbci	r19, 0xFF	; 255
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	aa ef       	ldi	r26, 0xFA	; 250
     e2a:	b3 e4       	ldi	r27, 0x43	; 67
     e2c:	f9 01       	movw	r30, r18
     e2e:	80 83       	st	Z, r24
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	a2 83       	std	Z+2, r26	; 0x02
     e34:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e36:	8e 01       	movw	r16, r28
     e38:	06 5b       	subi	r16, 0xB6	; 182
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	ce 01       	movw	r24, r28
     e3e:	8a 5b       	subi	r24, 0xBA	; 186
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a e7       	ldi	r20, 0x7A	; 122
     e48:	53 e4       	ldi	r21, 0x43	; 67
     e4a:	fc 01       	movw	r30, r24
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	42 d3       	rcall	.+1668   	; 0x14da <__mulsf3>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	80 83       	st	Z, r24
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	a2 83       	std	Z+2, r26	; 0x02
     e62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e64:	ce 01       	movw	r24, r28
     e66:	86 5b       	subi	r24, 0xB6	; 182
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	5f e3       	ldi	r21, 0x3F	; 63
     e72:	fc 01       	movw	r30, r24
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	ad d2       	rcall	.+1370   	; 0x13d8 <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	4c f4       	brge	.+18     	; 0xe94 <SPI_MasterInit+0x504>
		__ticks = 1;
     e82:	ce 01       	movw	r24, r28
     e84:	82 5b       	subi	r24, 0xB2	; 178
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	21 e0       	ldi	r18, 0x01	; 1
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	31 83       	std	Z+1, r19	; 0x01
     e90:	20 83       	st	Z, r18
     e92:	69 c0       	rjmp	.+210    	; 0xf66 <SPI_MasterInit+0x5d6>
	else if (__tmp > 65535)
     e94:	ce 01       	movw	r24, r28
     e96:	86 5b       	subi	r24, 0xB6	; 182
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	3f ef       	ldi	r19, 0xFF	; 255
     e9e:	4f e7       	ldi	r20, 0x7F	; 127
     ea0:	57 e4       	ldi	r21, 0x47	; 71
     ea2:	fc 01       	movw	r30, r24
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	12 d3       	rcall	.+1572   	; 0x14d2 <__gesf2>
     eae:	18 16       	cp	r1, r24
     eb0:	0c f0       	brlt	.+2      	; 0xeb4 <SPI_MasterInit+0x524>
     eb2:	48 c0       	rjmp	.+144    	; 0xf44 <SPI_MasterInit+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb4:	ce 01       	movw	r24, r28
     eb6:	8a 5b       	subi	r24, 0xBA	; 186
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e2       	ldi	r20, 0x20	; 32
     ec0:	51 e4       	ldi	r21, 0x41	; 65
     ec2:	fc 01       	movw	r30, r24
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	06 d3       	rcall	.+1548   	; 0x14da <__mulsf3>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	8e 01       	movw	r16, r28
     ed4:	02 5b       	subi	r16, 0xB2	; 178
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	81 d2       	rcall	.+1282   	; 0x13e0 <__fixunssfsi>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	f8 01       	movw	r30, r16
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <SPI_MasterInit+0x5a2>
     eea:	ce 01       	movw	r24, r28
     eec:	80 5b       	subi	r24, 0xB0	; 176
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	29 e1       	ldi	r18, 0x19	; 25
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	fc 01       	movw	r30, r24
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	20 83       	st	Z, r18
     efa:	ce 01       	movw	r24, r28
     efc:	80 5b       	subi	r24, 0xB0	; 176
     efe:	9f 4f       	sbci	r25, 0xFF	; 255
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <SPI_MasterInit+0x576>
     f0a:	9e 01       	movw	r18, r28
     f0c:	20 5b       	subi	r18, 0xB0	; 176
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
     f10:	f9 01       	movw	r30, r18
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f16:	ce 01       	movw	r24, r28
     f18:	82 5b       	subi	r24, 0xB2	; 178
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	9e 01       	movw	r18, r28
     f1e:	22 5b       	subi	r18, 0xB2	; 178
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	31 81       	ldd	r19, Z+1	; 0x01
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	31 09       	sbc	r19, r1
     f2c:	fc 01       	movw	r30, r24
     f2e:	31 83       	std	Z+1, r19	; 0x01
     f30:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	ce 01       	movw	r24, r28
     f34:	82 5b       	subi	r24, 0xB2	; 178
     f36:	9f 4f       	sbci	r25, 0xFF	; 255
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	89 2b       	or	r24, r25
     f40:	a1 f6       	brne	.-88     	; 0xeea <SPI_MasterInit+0x55a>
     f42:	2b c0       	rjmp	.+86     	; 0xf9a <SPI_MasterInit+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f44:	8e 01       	movw	r16, r28
     f46:	02 5b       	subi	r16, 0xB2	; 178
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	86 5b       	subi	r24, 0xB6	; 182
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	fc 01       	movw	r30, r24
     f52:	60 81       	ld	r22, Z
     f54:	71 81       	ldd	r23, Z+1	; 0x01
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	42 d2       	rcall	.+1156   	; 0x13e0 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	ce 01       	movw	r24, r28
     f68:	8e 5a       	subi	r24, 0xAE	; 174
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	9e 01       	movw	r18, r28
     f6e:	22 5b       	subi	r18, 0xB2	; 178
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	fc 01       	movw	r30, r24
     f7a:	31 83       	std	Z+1, r19	; 0x01
     f7c:	20 83       	st	Z, r18
     f7e:	ce 01       	movw	r24, r28
     f80:	8e 5a       	subi	r24, 0xAE	; 174
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <SPI_MasterInit+0x5fa>
     f8e:	9e 01       	movw	r18, r28
     f90:	2e 5a       	subi	r18, 0xAE	; 174
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
     f94:	f9 01       	movw	r30, r18
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
	_delay_ms(500);
	transmitByte = 0x11; // Turn off sleep
     f9a:	81 e1       	ldi	r24, 0x11	; 17
     f9c:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_MasterTransmit(transmitByte);
     f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa0:	05 d2       	rcall	.+1034   	; 0x13ac <SPI_MasterTransmit>
     fa2:	9e 01       	movw	r18, r28
     fa4:	2c 5a       	subi	r18, 0xAC	; 172
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	aa ef       	ldi	r26, 0xFA	; 250
     fae:	b3 e4       	ldi	r27, 0x43	; 67
     fb0:	f9 01       	movw	r30, r18
     fb2:	80 83       	st	Z, r24
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	a2 83       	std	Z+2, r26	; 0x02
     fb8:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fba:	8e 01       	movw	r16, r28
     fbc:	08 5a       	subi	r16, 0xA8	; 168
     fbe:	1f 4f       	sbci	r17, 0xFF	; 255
     fc0:	ce 01       	movw	r24, r28
     fc2:	8c 5a       	subi	r24, 0xAC	; 172
     fc4:	9f 4f       	sbci	r25, 0xFF	; 255
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	fc 01       	movw	r30, r24
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	80 d2       	rcall	.+1280   	; 0x14da <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	f8 01       	movw	r30, r16
     fe0:	80 83       	st	Z, r24
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	a2 83       	std	Z+2, r26	; 0x02
     fe6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fe8:	ce 01       	movw	r24, r28
     fea:	88 5a       	subi	r24, 0xA8	; 168
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	fc 01       	movw	r30, r24
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	eb d1       	rcall	.+982    	; 0x13d8 <__cmpsf2>
    1002:	88 23       	and	r24, r24
    1004:	4c f4       	brge	.+18     	; 0x1018 <SPI_MasterInit+0x688>
		__ticks = 1;
    1006:	ce 01       	movw	r24, r28
    1008:	84 5a       	subi	r24, 0xA4	; 164
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	fc 01       	movw	r30, r24
    1012:	31 83       	std	Z+1, r19	; 0x01
    1014:	20 83       	st	Z, r18
    1016:	69 c0       	rjmp	.+210    	; 0x10ea <SPI_MasterInit+0x75a>
	else if (__tmp > 65535)
    1018:	ce 01       	movw	r24, r28
    101a:	88 5a       	subi	r24, 0xA8	; 168
    101c:	9f 4f       	sbci	r25, 0xFF	; 255
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	57 e4       	ldi	r21, 0x47	; 71
    1026:	fc 01       	movw	r30, r24
    1028:	60 81       	ld	r22, Z
    102a:	71 81       	ldd	r23, Z+1	; 0x01
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	50 d2       	rcall	.+1184   	; 0x14d2 <__gesf2>
    1032:	18 16       	cp	r1, r24
    1034:	0c f0       	brlt	.+2      	; 0x1038 <SPI_MasterInit+0x6a8>
    1036:	48 c0       	rjmp	.+144    	; 0x10c8 <SPI_MasterInit+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1038:	ce 01       	movw	r24, r28
    103a:	8c 5a       	subi	r24, 0xAC	; 172
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e2       	ldi	r20, 0x20	; 32
    1044:	51 e4       	ldi	r21, 0x41	; 65
    1046:	fc 01       	movw	r30, r24
    1048:	60 81       	ld	r22, Z
    104a:	71 81       	ldd	r23, Z+1	; 0x01
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	44 d2       	rcall	.+1160   	; 0x14da <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8e 01       	movw	r16, r28
    1058:	04 5a       	subi	r16, 0xA4	; 164
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	bf d1       	rcall	.+894    	; 0x13e0 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	f8 01       	movw	r30, r16
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	80 83       	st	Z, r24
    106c:	24 c0       	rjmp	.+72     	; 0x10b6 <SPI_MasterInit+0x726>
    106e:	ce 01       	movw	r24, r28
    1070:	82 5a       	subi	r24, 0xA2	; 162
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	29 e1       	ldi	r18, 0x19	; 25
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	fc 01       	movw	r30, r24
    107a:	31 83       	std	Z+1, r19	; 0x01
    107c:	20 83       	st	Z, r18
    107e:	ce 01       	movw	r24, r28
    1080:	82 5a       	subi	r24, 0xA2	; 162
    1082:	9f 4f       	sbci	r25, 0xFF	; 255
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <SPI_MasterInit+0x6fa>
    108e:	9e 01       	movw	r18, r28
    1090:	22 5a       	subi	r18, 0xA2	; 162
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	f9 01       	movw	r30, r18
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109a:	ce 01       	movw	r24, r28
    109c:	84 5a       	subi	r24, 0xA4	; 164
    109e:	9f 4f       	sbci	r25, 0xFF	; 255
    10a0:	9e 01       	movw	r18, r28
    10a2:	24 5a       	subi	r18, 0xA4	; 164
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	f9 01       	movw	r30, r18
    10a8:	20 81       	ld	r18, Z
    10aa:	31 81       	ldd	r19, Z+1	; 0x01
    10ac:	21 50       	subi	r18, 0x01	; 1
    10ae:	31 09       	sbc	r19, r1
    10b0:	fc 01       	movw	r30, r24
    10b2:	31 83       	std	Z+1, r19	; 0x01
    10b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b6:	ce 01       	movw	r24, r28
    10b8:	84 5a       	subi	r24, 0xA4	; 164
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	fc 01       	movw	r30, r24
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	89 2b       	or	r24, r25
    10c4:	a1 f6       	brne	.-88     	; 0x106e <SPI_MasterInit+0x6de>
    10c6:	2b c0       	rjmp	.+86     	; 0x111e <SPI_MasterInit+0x78e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c8:	8e 01       	movw	r16, r28
    10ca:	04 5a       	subi	r16, 0xA4	; 164
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	ce 01       	movw	r24, r28
    10d0:	88 5a       	subi	r24, 0xA8	; 168
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	fc 01       	movw	r30, r24
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	80 d1       	rcall	.+768    	; 0x13e0 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	f8 01       	movw	r30, r16
    10e6:	91 83       	std	Z+1, r25	; 0x01
    10e8:	80 83       	st	Z, r24
    10ea:	ce 01       	movw	r24, r28
    10ec:	80 5a       	subi	r24, 0xA0	; 160
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	9e 01       	movw	r18, r28
    10f2:	24 5a       	subi	r18, 0xA4	; 164
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
    10f6:	f9 01       	movw	r30, r18
    10f8:	20 81       	ld	r18, Z
    10fa:	31 81       	ldd	r19, Z+1	; 0x01
    10fc:	fc 01       	movw	r30, r24
    10fe:	31 83       	std	Z+1, r19	; 0x01
    1100:	20 83       	st	Z, r18
    1102:	ce 01       	movw	r24, r28
    1104:	80 5a       	subi	r24, 0xA0	; 160
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	fc 01       	movw	r30, r24
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	f1 f7       	brne	.-4      	; 0x110e <SPI_MasterInit+0x77e>
    1112:	9e 01       	movw	r18, r28
    1114:	20 5a       	subi	r18, 0xA0	; 160
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	f9 01       	movw	r30, r18
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
		temp = SPDR;
	}
	*/


	transmitByte = 0x3a; // Color mode
    111e:	8a e3       	ldi	r24, 0x3A	; 58
    1120:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_MasterTransmit(transmitByte);
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	43 d1       	rcall	.+646    	; 0x13ac <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	e0 d9       	rcall	.-3136   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x03;// 4-4-4 RGB
    112e:	83 e0       	ldi	r24, 0x03	; 3
    1130:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_MasterTransmit(transmitByte); // send byte
    1132:	8d 85       	ldd	r24, Y+13	; 0x0d
    1134:	3b d1       	rcall	.+630    	; 0x13ac <SPI_MasterTransmit>
	
	// Here be were I program the LUT
	ioport_set_pin_level(TFT_DC, 0);
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	d8 d9       	rcall	.-3152   	; 0x4ee <ioport_set_pin_level>
	transmitByte = 0x2d;  // write command
    113e:	8d e2       	ldi	r24, 0x2D	; 45
    1140:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_MasterTransmit(transmitByte); // Sen byte
    1142:	8d 85       	ldd	r24, Y+13	; 0x0d
    1144:	33 d1       	rcall	.+614    	; 0x13ac <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	d0 d9       	rcall	.-3168   	; 0x4ee <ioport_set_pin_level>
	//ioport_set_pin_mode(TFT_CS, IOPORT_MODE_PULLDOWN);
	for(int i = 0; i <= 0x0f; i++) // Red part1
    114e:	1a 82       	std	Y+2, r1	; 0x02
    1150:	19 82       	std	Y+1, r1	; 0x01
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <SPI_MasterInit+0x7d6>
	{
		transmitByte = i;
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
    1158:	8d 85       	ldd	r24, Y+13	; 0x0d
    115a:	28 d1       	rcall	.+592    	; 0x13ac <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 0);
	transmitByte = 0x2d;  // write command
	SPI_MasterTransmit(transmitByte); // Sen byte
	ioport_set_pin_level(TFT_DC, 1);
	//ioport_set_pin_mode(TFT_CS, IOPORT_MODE_PULLDOWN);
	for(int i = 0; i <= 0x0f; i++) // Red part1
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	40 97       	sbiw	r24, 0x10	; 16
    116c:	9c f3       	brlt	.-26     	; 0x1154 <SPI_MasterInit+0x7c4>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
    116e:	81 e1       	ldi	r24, 0x11	; 17
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 83       	std	Y+4, r25	; 0x04
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <SPI_MasterInit+0x7f8>
	{
		transmitByte = 0;
    1178:	1d 86       	std	Y+13, r1	; 0x0d
		SPI_MasterTransmit(transmitByte);
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	17 d1       	rcall	.+558    	; 0x13ac <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Red part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	81 97       	sbiw	r24, 0x21	; 33
    118e:	a4 f3       	brlt	.-24     	; 0x1178 <SPI_MasterInit+0x7e8>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
    1190:	1e 82       	std	Y+6, r1	; 0x06
    1192:	1d 82       	std	Y+5, r1	; 0x05
    1194:	09 c0       	rjmp	.+18     	; 0x11a8 <SPI_MasterInit+0x818>
	{
		transmitByte = i;
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	07 d1       	rcall	.+526    	; 0x13ac <SPI_MasterTransmit>
	for(int i = 17; i <= 32; i++) // red part2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	8d 81       	ldd	r24, Y+5	; 0x05
    11aa:	9e 81       	ldd	r25, Y+6	; 0x06
    11ac:	40 97       	sbiw	r24, 0x10	; 16
    11ae:	9c f3       	brlt	.-26     	; 0x1196 <SPI_MasterInit+0x806>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
    11b0:	81 e3       	ldi	r24, 0x31	; 49
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	98 87       	std	Y+8, r25	; 0x08
    11b6:	8f 83       	std	Y+7, r24	; 0x07
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <SPI_MasterInit+0x83a>
	{
		transmitByte = 0;
    11ba:	1d 86       	std	Y+13, r1	; 0x0d
		SPI_MasterTransmit(transmitByte);
    11bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11be:	f6 d0       	rcall	.+492    	; 0x13ac <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // green part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
    11c0:	8f 81       	ldd	r24, Y+7	; 0x07
    11c2:	98 85       	ldd	r25, Y+8	; 0x08
    11c4:	01 96       	adiw	r24, 0x01	; 1
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	8f 83       	std	Y+7, r24	; 0x07
    11ca:	8f 81       	ldd	r24, Y+7	; 0x07
    11cc:	98 85       	ldd	r25, Y+8	; 0x08
    11ce:	81 36       	cpi	r24, 0x61	; 97
    11d0:	91 05       	cpc	r25, r1
    11d2:	9c f3       	brlt	.-26     	; 0x11ba <SPI_MasterInit+0x82a>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
    11d4:	1a 86       	std	Y+10, r1	; 0x0a
    11d6:	19 86       	std	Y+9, r1	; 0x09
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <SPI_MasterInit+0x85c>
	{
		transmitByte = i;
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	8d 87       	std	Y+13, r24	; 0x0d
		SPI_MasterTransmit(transmitByte);
    11de:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e0:	e5 d0       	rcall	.+458    	; 0x13ac <SPI_MasterTransmit>
	for(int i = 49; i <= 96; i++) // green part 2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	9a 87       	std	Y+10, r25	; 0x0a
    11ea:	89 87       	std	Y+9, r24	; 0x09
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	40 97       	sbiw	r24, 0x10	; 16
    11f2:	9c f3       	brlt	.-26     	; 0x11da <SPI_MasterInit+0x84a>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
    11f4:	81 e7       	ldi	r24, 0x71	; 113
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9c 87       	std	Y+12, r25	; 0x0c
    11fa:	8b 87       	std	Y+11, r24	; 0x0b
    11fc:	08 c0       	rjmp	.+16     	; 0x120e <SPI_MasterInit+0x87e>
	{
		transmitByte = 0;
    11fe:	1d 86       	std	Y+13, r1	; 0x0d
		SPI_MasterTransmit(transmitByte);
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	d4 d0       	rcall	.+424    	; 0x13ac <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Blue part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
    1204:	8b 85       	ldd	r24, Y+11	; 0x0b
    1206:	9c 85       	ldd	r25, Y+12	; 0x0c
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9c 87       	std	Y+12, r25	; 0x0c
    120c:	8b 87       	std	Y+11, r24	; 0x0b
    120e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1210:	9c 85       	ldd	r25, Y+12	; 0x0c
    1212:	81 38       	cpi	r24, 0x81	; 129
    1214:	91 05       	cpc	r25, r1
    1216:	9c f3       	brlt	.-26     	; 0x11fe <SPI_MasterInit+0x86e>
    1218:	9e 01       	movw	r18, r28
    121a:	2e 59       	subi	r18, 0x9E	; 158
    121c:	3f 4f       	sbci	r19, 0xFF	; 255
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	aa ef       	ldi	r26, 0xFA	; 250
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	f9 01       	movw	r30, r18
    1228:	80 83       	st	Z, r24
    122a:	91 83       	std	Z+1, r25	; 0x01
    122c:	a2 83       	std	Z+2, r26	; 0x02
    122e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1230:	8e 01       	movw	r16, r28
    1232:	0a 59       	subi	r16, 0x9A	; 154
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	ce 01       	movw	r24, r28
    1238:	8e 59       	subi	r24, 0x9E	; 158
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a e7       	ldi	r20, 0x7A	; 122
    1242:	53 e4       	ldi	r21, 0x43	; 67
    1244:	fc 01       	movw	r30, r24
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	45 d1       	rcall	.+650    	; 0x14da <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	f8 01       	movw	r30, r16
    1256:	80 83       	st	Z, r24
    1258:	91 83       	std	Z+1, r25	; 0x01
    125a:	a2 83       	std	Z+2, r26	; 0x02
    125c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    125e:	ce 01       	movw	r24, r28
    1260:	8a 59       	subi	r24, 0x9A	; 154
    1262:	9f 4f       	sbci	r25, 0xFF	; 255
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	fc 01       	movw	r30, r24
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	b0 d0       	rcall	.+352    	; 0x13d8 <__cmpsf2>
    1278:	88 23       	and	r24, r24
    127a:	4c f4       	brge	.+18     	; 0x128e <SPI_MasterInit+0x8fe>
		__ticks = 1;
    127c:	ce 01       	movw	r24, r28
    127e:	86 59       	subi	r24, 0x96	; 150
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	fc 01       	movw	r30, r24
    1288:	31 83       	std	Z+1, r19	; 0x01
    128a:	20 83       	st	Z, r18
    128c:	69 c0       	rjmp	.+210    	; 0x1360 <SPI_MasterInit+0x9d0>
	else if (__tmp > 65535)
    128e:	ce 01       	movw	r24, r28
    1290:	8a 59       	subi	r24, 0x9A	; 154
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	3f ef       	ldi	r19, 0xFF	; 255
    1298:	4f e7       	ldi	r20, 0x7F	; 127
    129a:	57 e4       	ldi	r21, 0x47	; 71
    129c:	fc 01       	movw	r30, r24
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	15 d1       	rcall	.+554    	; 0x14d2 <__gesf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	0c f0       	brlt	.+2      	; 0x12ae <SPI_MasterInit+0x91e>
    12ac:	48 c0       	rjmp	.+144    	; 0x133e <SPI_MasterInit+0x9ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	ce 01       	movw	r24, r28
    12b0:	8e 59       	subi	r24, 0x9E	; 158
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	fc 01       	movw	r30, r24
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	09 d1       	rcall	.+530    	; 0x14da <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	8e 01       	movw	r16, r28
    12ce:	06 59       	subi	r16, 0x96	; 150
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	84 d0       	rcall	.+264    	; 0x13e0 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	f8 01       	movw	r30, r16
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
    12e2:	24 c0       	rjmp	.+72     	; 0x132c <SPI_MasterInit+0x99c>
    12e4:	ce 01       	movw	r24, r28
    12e6:	84 59       	subi	r24, 0x94	; 148
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	29 e1       	ldi	r18, 0x19	; 25
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	fc 01       	movw	r30, r24
    12f0:	31 83       	std	Z+1, r19	; 0x01
    12f2:	20 83       	st	Z, r18
    12f4:	ce 01       	movw	r24, r28
    12f6:	84 59       	subi	r24, 0x94	; 148
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	fc 01       	movw	r30, r24
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <SPI_MasterInit+0x970>
    1304:	9e 01       	movw	r18, r28
    1306:	24 59       	subi	r18, 0x94	; 148
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	f9 01       	movw	r30, r18
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	ce 01       	movw	r24, r28
    1312:	86 59       	subi	r24, 0x96	; 150
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	9e 01       	movw	r18, r28
    1318:	26 59       	subi	r18, 0x96	; 150
    131a:	3f 4f       	sbci	r19, 0xFF	; 255
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	31 81       	ldd	r19, Z+1	; 0x01
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	31 09       	sbc	r19, r1
    1326:	fc 01       	movw	r30, r24
    1328:	31 83       	std	Z+1, r19	; 0x01
    132a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	ce 01       	movw	r24, r28
    132e:	86 59       	subi	r24, 0x96	; 150
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	fc 01       	movw	r30, r24
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	89 2b       	or	r24, r25
    133a:	a1 f6       	brne	.-88     	; 0x12e4 <SPI_MasterInit+0x954>
    133c:	2b c0       	rjmp	.+86     	; 0x1394 <SPI_MasterInit+0xa04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133e:	8e 01       	movw	r16, r28
    1340:	06 59       	subi	r16, 0x96	; 150
    1342:	1f 4f       	sbci	r17, 0xFF	; 255
    1344:	ce 01       	movw	r24, r28
    1346:	8a 59       	subi	r24, 0x9A	; 154
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	fc 01       	movw	r30, r24
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	82 81       	ldd	r24, Z+2	; 0x02
    1352:	93 81       	ldd	r25, Z+3	; 0x03
    1354:	45 d0       	rcall	.+138    	; 0x13e0 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	f8 01       	movw	r30, r16
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	ce 01       	movw	r24, r28
    1362:	82 59       	subi	r24, 0x92	; 146
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	9e 01       	movw	r18, r28
    1368:	26 59       	subi	r18, 0x96	; 150
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	f9 01       	movw	r30, r18
    136e:	20 81       	ld	r18, Z
    1370:	31 81       	ldd	r19, Z+1	; 0x01
    1372:	fc 01       	movw	r30, r24
    1374:	31 83       	std	Z+1, r19	; 0x01
    1376:	20 83       	st	Z, r18
    1378:	ce 01       	movw	r24, r28
    137a:	82 59       	subi	r24, 0x92	; 146
    137c:	9f 4f       	sbci	r25, 0xFF	; 255
    137e:	fc 01       	movw	r30, r24
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <SPI_MasterInit+0x9f4>
    1388:	9e 01       	movw	r18, r28
    138a:	22 59       	subi	r18, 0x92	; 146
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	f9 01       	movw	r30, r18
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	80 83       	st	Z, r24
		SPI_MasterTransmit(transmitByte);
	}

	_delay_ms(500);
	
}
    1394:	c1 59       	subi	r28, 0x91	; 145
    1396:	df 4f       	sbci	r29, 0xFF	; 255
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <SPI_MasterTransmit>:

// from page 218 of data sheet
void SPI_MasterTransmit(uint8_t cData)
{
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	1f 92       	push	r1
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	89 83       	std	Y+1, r24	; 0x01
	
	/* Start transmission */
	SPDR = cData;
    13b8:	8e e4       	ldi	r24, 0x4E	; 78
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	29 81       	ldd	r18, Y+1	; 0x01
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
    13c2:	00 00       	nop
    13c4:	8d e4       	ldi	r24, 0x4D	; 77
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	80 81       	ld	r24, Z
    13cc:	88 23       	and	r24, r24
    13ce:	d4 f7       	brge	.-12     	; 0x13c4 <SPI_MasterTransmit+0x18>
	;
    13d0:	0f 90       	pop	r0
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	08 95       	ret

000013d8 <__cmpsf2>:
    13d8:	2f d0       	rcall	.+94     	; 0x1438 <__fp_cmp>
    13da:	08 f4       	brcc	.+2      	; 0x13de <__cmpsf2+0x6>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	08 95       	ret

000013e0 <__fixunssfsi>:
    13e0:	57 d0       	rcall	.+174    	; 0x1490 <__fp_splitA>
    13e2:	88 f0       	brcs	.+34     	; 0x1406 <__fixunssfsi+0x26>
    13e4:	9f 57       	subi	r25, 0x7F	; 127
    13e6:	90 f0       	brcs	.+36     	; 0x140c <__fixunssfsi+0x2c>
    13e8:	b9 2f       	mov	r27, r25
    13ea:	99 27       	eor	r25, r25
    13ec:	b7 51       	subi	r27, 0x17	; 23
    13ee:	a0 f0       	brcs	.+40     	; 0x1418 <__fixunssfsi+0x38>
    13f0:	d1 f0       	breq	.+52     	; 0x1426 <__fixunssfsi+0x46>
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	1a f0       	brmi	.+6      	; 0x1402 <__fixunssfsi+0x22>
    13fc:	ba 95       	dec	r27
    13fe:	c9 f7       	brne	.-14     	; 0x13f2 <__fixunssfsi+0x12>
    1400:	12 c0       	rjmp	.+36     	; 0x1426 <__fixunssfsi+0x46>
    1402:	b1 30       	cpi	r27, 0x01	; 1
    1404:	81 f0       	breq	.+32     	; 0x1426 <__fixunssfsi+0x46>
    1406:	5e d0       	rcall	.+188    	; 0x14c4 <__fp_zero>
    1408:	b1 e0       	ldi	r27, 0x01	; 1
    140a:	08 95       	ret
    140c:	5b c0       	rjmp	.+182    	; 0x14c4 <__fp_zero>
    140e:	67 2f       	mov	r22, r23
    1410:	78 2f       	mov	r23, r24
    1412:	88 27       	eor	r24, r24
    1414:	b8 5f       	subi	r27, 0xF8	; 248
    1416:	39 f0       	breq	.+14     	; 0x1426 <__fixunssfsi+0x46>
    1418:	b9 3f       	cpi	r27, 0xF9	; 249
    141a:	cc f3       	brlt	.-14     	; 0x140e <__fixunssfsi+0x2e>
    141c:	86 95       	lsr	r24
    141e:	77 95       	ror	r23
    1420:	67 95       	ror	r22
    1422:	b3 95       	inc	r27
    1424:	d9 f7       	brne	.-10     	; 0x141c <__fixunssfsi+0x3c>
    1426:	3e f4       	brtc	.+14     	; 0x1436 <__fixunssfsi+0x56>
    1428:	90 95       	com	r25
    142a:	80 95       	com	r24
    142c:	70 95       	com	r23
    142e:	61 95       	neg	r22
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	08 95       	ret

00001438 <__fp_cmp>:
    1438:	99 0f       	add	r25, r25
    143a:	00 08       	sbc	r0, r0
    143c:	55 0f       	add	r21, r21
    143e:	aa 0b       	sbc	r26, r26
    1440:	e0 e8       	ldi	r30, 0x80	; 128
    1442:	fe ef       	ldi	r31, 0xFE	; 254
    1444:	16 16       	cp	r1, r22
    1446:	17 06       	cpc	r1, r23
    1448:	e8 07       	cpc	r30, r24
    144a:	f9 07       	cpc	r31, r25
    144c:	c0 f0       	brcs	.+48     	; 0x147e <__fp_cmp+0x46>
    144e:	12 16       	cp	r1, r18
    1450:	13 06       	cpc	r1, r19
    1452:	e4 07       	cpc	r30, r20
    1454:	f5 07       	cpc	r31, r21
    1456:	98 f0       	brcs	.+38     	; 0x147e <__fp_cmp+0x46>
    1458:	62 1b       	sub	r22, r18
    145a:	73 0b       	sbc	r23, r19
    145c:	84 0b       	sbc	r24, r20
    145e:	95 0b       	sbc	r25, r21
    1460:	39 f4       	brne	.+14     	; 0x1470 <__fp_cmp+0x38>
    1462:	0a 26       	eor	r0, r26
    1464:	61 f0       	breq	.+24     	; 0x147e <__fp_cmp+0x46>
    1466:	23 2b       	or	r18, r19
    1468:	24 2b       	or	r18, r20
    146a:	25 2b       	or	r18, r21
    146c:	21 f4       	brne	.+8      	; 0x1476 <__fp_cmp+0x3e>
    146e:	08 95       	ret
    1470:	0a 26       	eor	r0, r26
    1472:	09 f4       	brne	.+2      	; 0x1476 <__fp_cmp+0x3e>
    1474:	a1 40       	sbci	r26, 0x01	; 1
    1476:	a6 95       	lsr	r26
    1478:	8f ef       	ldi	r24, 0xFF	; 255
    147a:	81 1d       	adc	r24, r1
    147c:	81 1d       	adc	r24, r1
    147e:	08 95       	ret

00001480 <__fp_split3>:
    1480:	57 fd       	sbrc	r21, 7
    1482:	90 58       	subi	r25, 0x80	; 128
    1484:	44 0f       	add	r20, r20
    1486:	55 1f       	adc	r21, r21
    1488:	59 f0       	breq	.+22     	; 0x14a0 <__fp_splitA+0x10>
    148a:	5f 3f       	cpi	r21, 0xFF	; 255
    148c:	71 f0       	breq	.+28     	; 0x14aa <__fp_splitA+0x1a>
    148e:	47 95       	ror	r20

00001490 <__fp_splitA>:
    1490:	88 0f       	add	r24, r24
    1492:	97 fb       	bst	r25, 7
    1494:	99 1f       	adc	r25, r25
    1496:	61 f0       	breq	.+24     	; 0x14b0 <__fp_splitA+0x20>
    1498:	9f 3f       	cpi	r25, 0xFF	; 255
    149a:	79 f0       	breq	.+30     	; 0x14ba <__fp_splitA+0x2a>
    149c:	87 95       	ror	r24
    149e:	08 95       	ret
    14a0:	12 16       	cp	r1, r18
    14a2:	13 06       	cpc	r1, r19
    14a4:	14 06       	cpc	r1, r20
    14a6:	55 1f       	adc	r21, r21
    14a8:	f2 cf       	rjmp	.-28     	; 0x148e <__fp_split3+0xe>
    14aa:	46 95       	lsr	r20
    14ac:	f1 df       	rcall	.-30     	; 0x1490 <__fp_splitA>
    14ae:	08 c0       	rjmp	.+16     	; 0x14c0 <__fp_splitA+0x30>
    14b0:	16 16       	cp	r1, r22
    14b2:	17 06       	cpc	r1, r23
    14b4:	18 06       	cpc	r1, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	f1 cf       	rjmp	.-30     	; 0x149c <__fp_splitA+0xc>
    14ba:	86 95       	lsr	r24
    14bc:	71 05       	cpc	r23, r1
    14be:	61 05       	cpc	r22, r1
    14c0:	08 94       	sec
    14c2:	08 95       	ret

000014c4 <__fp_zero>:
    14c4:	e8 94       	clt

000014c6 <__fp_szero>:
    14c6:	bb 27       	eor	r27, r27
    14c8:	66 27       	eor	r22, r22
    14ca:	77 27       	eor	r23, r23
    14cc:	cb 01       	movw	r24, r22
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret

000014d2 <__gesf2>:
    14d2:	b2 df       	rcall	.-156    	; 0x1438 <__fp_cmp>
    14d4:	08 f4       	brcc	.+2      	; 0x14d8 <__gesf2+0x6>
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	08 95       	ret

000014da <__mulsf3>:
    14da:	0b d0       	rcall	.+22     	; 0x14f2 <__mulsf3x>
    14dc:	78 c0       	rjmp	.+240    	; 0x15ce <__fp_round>
    14de:	69 d0       	rcall	.+210    	; 0x15b2 <__fp_pscA>
    14e0:	28 f0       	brcs	.+10     	; 0x14ec <__mulsf3+0x12>
    14e2:	6e d0       	rcall	.+220    	; 0x15c0 <__fp_pscB>
    14e4:	18 f0       	brcs	.+6      	; 0x14ec <__mulsf3+0x12>
    14e6:	95 23       	and	r25, r21
    14e8:	09 f0       	breq	.+2      	; 0x14ec <__mulsf3+0x12>
    14ea:	5a c0       	rjmp	.+180    	; 0x15a0 <__fp_inf>
    14ec:	5f c0       	rjmp	.+190    	; 0x15ac <__fp_nan>
    14ee:	11 24       	eor	r1, r1
    14f0:	ea cf       	rjmp	.-44     	; 0x14c6 <__fp_szero>

000014f2 <__mulsf3x>:
    14f2:	c6 df       	rcall	.-116    	; 0x1480 <__fp_split3>
    14f4:	a0 f3       	brcs	.-24     	; 0x14de <__mulsf3+0x4>

000014f6 <__mulsf3_pse>:
    14f6:	95 9f       	mul	r25, r21
    14f8:	d1 f3       	breq	.-12     	; 0x14ee <__mulsf3+0x14>
    14fa:	95 0f       	add	r25, r21
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	55 1f       	adc	r21, r21
    1500:	62 9f       	mul	r22, r18
    1502:	f0 01       	movw	r30, r0
    1504:	72 9f       	mul	r23, r18
    1506:	bb 27       	eor	r27, r27
    1508:	f0 0d       	add	r31, r0
    150a:	b1 1d       	adc	r27, r1
    150c:	63 9f       	mul	r22, r19
    150e:	aa 27       	eor	r26, r26
    1510:	f0 0d       	add	r31, r0
    1512:	b1 1d       	adc	r27, r1
    1514:	aa 1f       	adc	r26, r26
    1516:	64 9f       	mul	r22, r20
    1518:	66 27       	eor	r22, r22
    151a:	b0 0d       	add	r27, r0
    151c:	a1 1d       	adc	r26, r1
    151e:	66 1f       	adc	r22, r22
    1520:	82 9f       	mul	r24, r18
    1522:	22 27       	eor	r18, r18
    1524:	b0 0d       	add	r27, r0
    1526:	a1 1d       	adc	r26, r1
    1528:	62 1f       	adc	r22, r18
    152a:	73 9f       	mul	r23, r19
    152c:	b0 0d       	add	r27, r0
    152e:	a1 1d       	adc	r26, r1
    1530:	62 1f       	adc	r22, r18
    1532:	83 9f       	mul	r24, r19
    1534:	a0 0d       	add	r26, r0
    1536:	61 1d       	adc	r22, r1
    1538:	22 1f       	adc	r18, r18
    153a:	74 9f       	mul	r23, r20
    153c:	33 27       	eor	r19, r19
    153e:	a0 0d       	add	r26, r0
    1540:	61 1d       	adc	r22, r1
    1542:	23 1f       	adc	r18, r19
    1544:	84 9f       	mul	r24, r20
    1546:	60 0d       	add	r22, r0
    1548:	21 1d       	adc	r18, r1
    154a:	82 2f       	mov	r24, r18
    154c:	76 2f       	mov	r23, r22
    154e:	6a 2f       	mov	r22, r26
    1550:	11 24       	eor	r1, r1
    1552:	9f 57       	subi	r25, 0x7F	; 127
    1554:	50 40       	sbci	r21, 0x00	; 0
    1556:	8a f0       	brmi	.+34     	; 0x157a <__mulsf3_pse+0x84>
    1558:	e1 f0       	breq	.+56     	; 0x1592 <__mulsf3_pse+0x9c>
    155a:	88 23       	and	r24, r24
    155c:	4a f0       	brmi	.+18     	; 0x1570 <__mulsf3_pse+0x7a>
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	bb 1f       	adc	r27, r27
    1564:	66 1f       	adc	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	88 1f       	adc	r24, r24
    156a:	91 50       	subi	r25, 0x01	; 1
    156c:	50 40       	sbci	r21, 0x00	; 0
    156e:	a9 f7       	brne	.-22     	; 0x155a <__mulsf3_pse+0x64>
    1570:	9e 3f       	cpi	r25, 0xFE	; 254
    1572:	51 05       	cpc	r21, r1
    1574:	70 f0       	brcs	.+28     	; 0x1592 <__mulsf3_pse+0x9c>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <__fp_inf>
    1578:	a6 cf       	rjmp	.-180    	; 0x14c6 <__fp_szero>
    157a:	5f 3f       	cpi	r21, 0xFF	; 255
    157c:	ec f3       	brlt	.-6      	; 0x1578 <__mulsf3_pse+0x82>
    157e:	98 3e       	cpi	r25, 0xE8	; 232
    1580:	dc f3       	brlt	.-10     	; 0x1578 <__mulsf3_pse+0x82>
    1582:	86 95       	lsr	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f7 95       	ror	r31
    158c:	e7 95       	ror	r30
    158e:	9f 5f       	subi	r25, 0xFF	; 255
    1590:	c1 f7       	brne	.-16     	; 0x1582 <__mulsf3_pse+0x8c>
    1592:	fe 2b       	or	r31, r30
    1594:	88 0f       	add	r24, r24
    1596:	91 1d       	adc	r25, r1
    1598:	96 95       	lsr	r25
    159a:	87 95       	ror	r24
    159c:	97 f9       	bld	r25, 7
    159e:	08 95       	ret

000015a0 <__fp_inf>:
    15a0:	97 f9       	bld	r25, 7
    15a2:	9f 67       	ori	r25, 0x7F	; 127
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	08 95       	ret

000015ac <__fp_nan>:
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	80 ec       	ldi	r24, 0xC0	; 192
    15b0:	08 95       	ret

000015b2 <__fp_pscA>:
    15b2:	00 24       	eor	r0, r0
    15b4:	0a 94       	dec	r0
    15b6:	16 16       	cp	r1, r22
    15b8:	17 06       	cpc	r1, r23
    15ba:	18 06       	cpc	r1, r24
    15bc:	09 06       	cpc	r0, r25
    15be:	08 95       	ret

000015c0 <__fp_pscB>:
    15c0:	00 24       	eor	r0, r0
    15c2:	0a 94       	dec	r0
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	14 06       	cpc	r1, r20
    15ca:	05 06       	cpc	r0, r21
    15cc:	08 95       	ret

000015ce <__fp_round>:
    15ce:	09 2e       	mov	r0, r25
    15d0:	03 94       	inc	r0
    15d2:	00 0c       	add	r0, r0
    15d4:	11 f4       	brne	.+4      	; 0x15da <__fp_round+0xc>
    15d6:	88 23       	and	r24, r24
    15d8:	52 f0       	brmi	.+20     	; 0x15ee <__fp_round+0x20>
    15da:	bb 0f       	add	r27, r27
    15dc:	40 f4       	brcc	.+16     	; 0x15ee <__fp_round+0x20>
    15de:	bf 2b       	or	r27, r31
    15e0:	11 f4       	brne	.+4      	; 0x15e6 <__fp_round+0x18>
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fp_round+0x20>
    15e6:	6f 5f       	subi	r22, 0xFF	; 255
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	08 95       	ret

000015f0 <_exit>:
    15f0:	f8 94       	cli

000015f2 <__stop_program>:
    15f2:	ff cf       	rjmp	.-2      	; 0x15f2 <__stop_program>
