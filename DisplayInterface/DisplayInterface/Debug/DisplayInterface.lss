
DisplayInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbd  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000831  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a7d  00000000  00000000  000020b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00010066  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e8  00000000  00000000  00012c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000060f  00000000  00000000  00012e76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	bf d1       	rcall	.+894    	; 0x3f4 <main>
  76:	b1 c4       	rjmp	.+2402   	; 0x9da <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	cd b7       	in	r28, 0x3d	; 61
  80:	de b7       	in	r29, 0x3e	; 62
  82:	2f 97       	sbiw	r28, 0x0f	; 15
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	f8 94       	cli
  88:	de bf       	out	0x3e, r29	; 62
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	cd bf       	out	0x3d, r28	; 61
  8e:	9e 87       	std	Y+14, r25	; 0x0e
  90:	8d 87       	std	Y+13, r24	; 0x0d
  92:	6f 87       	std	Y+15, r22	; 0x0f
  94:	8d 85       	ldd	r24, Y+13	; 0x0d
  96:	9e 85       	ldd	r25, Y+14	; 0x0e
  98:	9a 83       	std	Y+2, r25	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	8f 85       	ldd	r24, Y+15	; 0x0f
  9e:	8b 83       	std	Y+3, r24	; 0x03
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	9d 83       	std	Y+5, r25	; 0x05
  a6:	8c 83       	std	Y+4, r24	; 0x04
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
  a8:	8c 81       	ldd	r24, Y+4	; 0x04
  aa:	9d 81       	ldd	r25, Y+5	; 0x05
  ac:	96 95       	lsr	r25
  ae:	87 95       	ror	r24
  b0:	96 95       	lsr	r25
  b2:	87 95       	ror	r24
  b4:	96 95       	lsr	r25
  b6:	87 95       	ror	r24
  b8:	8e 83       	std	Y+6, r24	; 0x06
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
  ba:	8e 81       	ldd	r24, Y+6	; 0x06
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	c9 01       	movw	r24, r18
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	82 0f       	add	r24, r18
  c8:	93 1f       	adc	r25, r19
  ca:	80 96       	adiw	r24, 0x20	; 32
 */
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
  cc:	98 87       	std	Y+8, r25	; 0x08
  ce:	8f 83       	std	Y+7, r24	; 0x07
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	9a 87       	std	Y+10, r25	; 0x0a
  d6:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
  d8:	89 85       	ldd	r24, Y+9	; 0x09
  da:	9a 85       	ldd	r25, Y+10	; 0x0a
  dc:	9c 01       	movw	r18, r24
  de:	27 70       	andi	r18, 0x07	; 7
  e0:	33 27       	eor	r19, r19
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <ioport_set_pin_mode+0x72>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	2a 95       	dec	r18
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <ioport_set_pin_mode+0x6e>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	9c 87       	std	Y+12, r25	; 0x0c
  f6:	8b 87       	std	Y+11, r24	; 0x0b
	if (mode == IOPORT_MODE_PULLUP) {
  f8:	8b 81       	ldd	r24, Y+3	; 0x03
  fa:	88 23       	and	r24, r24
  fc:	61 f4       	brne	.+24     	; 0x116 <ioport_set_pin_mode+0x9c>
		base->PORTDATA |=  mask_pin;
  fe:	8f 81       	ldd	r24, Y+7	; 0x07
 100:	98 85       	ldd	r25, Y+8	; 0x08
 102:	fc 01       	movw	r30, r24
 104:	92 81       	ldd	r25, Z+2	; 0x02
 106:	8b 85       	ldd	r24, Y+11	; 0x0b
 108:	29 2f       	mov	r18, r25
 10a:	28 2b       	or	r18, r24
 10c:	8f 81       	ldd	r24, Y+7	; 0x07
 10e:	98 85       	ldd	r25, Y+8	; 0x08
 110:	fc 01       	movw	r30, r24
 112:	22 83       	std	Z+2, r18	; 0x02
 114:	0f c0       	rjmp	.+30     	; 0x134 <ioport_set_pin_mode+0xba>
	} else if (mode == IOPORT_MODE_PULLDOWN) {
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	61 f4       	brne	.+24     	; 0x134 <ioport_set_pin_mode+0xba>
		base->PORTDATA &= ~mask_pin;
 11c:	8f 81       	ldd	r24, Y+7	; 0x07
 11e:	98 85       	ldd	r25, Y+8	; 0x08
 120:	fc 01       	movw	r30, r24
 122:	92 81       	ldd	r25, Z+2	; 0x02
 124:	8b 85       	ldd	r24, Y+11	; 0x0b
 126:	80 95       	com	r24
 128:	29 2f       	mov	r18, r25
 12a:	28 23       	and	r18, r24
 12c:	8f 81       	ldd	r24, Y+7	; 0x07
 12e:	98 85       	ldd	r25, Y+8	; 0x08
 130:	fc 01       	movw	r30, r24
 132:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_mode(pin, mode);
}
 134:	2f 96       	adiw	r28, 0x0f	; 15
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	61 97       	sbiw	r28, 0x11	; 17
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	9f 87       	std	Y+15, r25	; 0x0f
 15c:	8e 87       	std	Y+14, r24	; 0x0e
 15e:	79 8b       	std	Y+17, r23	; 0x11
 160:	68 8b       	std	Y+16, r22	; 0x10
 162:	8e 85       	ldd	r24, Y+14	; 0x0e
 164:	9f 85       	ldd	r25, Y+15	; 0x0f
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
 16a:	88 89       	ldd	r24, Y+16	; 0x10
 16c:	99 89       	ldd	r25, Y+17	; 0x11
 16e:	9c 83       	std	Y+4, r25	; 0x04
 170:	8b 83       	std	Y+3, r24	; 0x03
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	9e 83       	std	Y+6, r25	; 0x06
 178:	8d 83       	std	Y+5, r24	; 0x05
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 17a:	8d 81       	ldd	r24, Y+5	; 0x05
 17c:	9e 81       	ldd	r25, Y+6	; 0x06
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	8f 83       	std	Y+7, r24	; 0x07
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 18c:	8f 81       	ldd	r24, Y+7	; 0x07
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	c9 01       	movw	r24, r18
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	82 0f       	add	r24, r18
 19a:	93 1f       	adc	r25, r19
 19c:	80 96       	adiw	r24, 0x20	; 32
 * \param mode dir, \refer ioport_direction
 */
__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
 19e:	99 87       	std	Y+9, r25	; 0x09
 1a0:	88 87       	std	Y+8, r24	; 0x08

	if (dir == IOPORT_DIR_OUTPUT) {
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	d9 f4       	brne	.+54     	; 0x1e0 <ioport_set_pin_dir+0x9a>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	9b 87       	std	Y+11, r25	; 0x0b
 1b0:	8a 87       	std	Y+10, r24	; 0x0a
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 1b2:	8a 85       	ldd	r24, Y+10	; 0x0a
 1b4:	9b 85       	ldd	r25, Y+11	; 0x0b
 1b6:	9c 01       	movw	r18, r24
 1b8:	27 70       	andi	r18, 0x07	; 7
 1ba:	33 27       	eor	r19, r19
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <ioport_set_pin_dir+0x80>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	2a 95       	dec	r18
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <ioport_set_pin_dir+0x7c>
 1ca:	28 2f       	mov	r18, r24
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 1cc:	88 85       	ldd	r24, Y+8	; 0x08
 1ce:	99 85       	ldd	r25, Y+9	; 0x09
 1d0:	fc 01       	movw	r30, r24
 1d2:	81 81       	ldd	r24, Z+1	; 0x01
 1d4:	28 2b       	or	r18, r24
 1d6:	88 85       	ldd	r24, Y+8	; 0x08
 1d8:	99 85       	ldd	r25, Y+9	; 0x09
 1da:	fc 01       	movw	r30, r24
 1dc:	21 83       	std	Z+1, r18	; 0x01
 1de:	25 c0       	rjmp	.+74     	; 0x22a <ioport_set_pin_dir+0xe4>
	} else if (dir == IOPORT_DIR_INPUT) {
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	89 2b       	or	r24, r25
 1e6:	09 f5       	brne	.+66     	; 0x22a <ioport_set_pin_dir+0xe4>
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	9a 81       	ldd	r25, Y+2	; 0x02
 1ec:	9d 87       	std	Y+13, r25	; 0x0d
 1ee:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 1f0:	8c 85       	ldd	r24, Y+12	; 0x0c
 1f2:	9d 85       	ldd	r25, Y+13	; 0x0d
 1f4:	9c 01       	movw	r18, r24
 1f6:	27 70       	andi	r18, 0x07	; 7
 1f8:	33 27       	eor	r19, r19
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <ioport_set_pin_dir+0xbe>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	2a 95       	dec	r18
 206:	e2 f7       	brpl	.-8      	; 0x200 <ioport_set_pin_dir+0xba>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9c 01       	movw	r18, r24
 20e:	20 95       	com	r18
 210:	30 95       	com	r19
 212:	88 85       	ldd	r24, Y+8	; 0x08
 214:	99 85       	ldd	r25, Y+9	; 0x09
 216:	fc 01       	movw	r30, r24
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	98 2f       	mov	r25, r24
 21c:	82 2f       	mov	r24, r18
 21e:	89 23       	and	r24, r25
 220:	28 2f       	mov	r18, r24
 222:	88 85       	ldd	r24, Y+8	; 0x08
 224:	99 85       	ldd	r25, Y+9	; 0x09
 226:	fc 01       	movw	r30, r24
 228:	21 83       	std	Z+1, r18	; 0x01
	arch_ioport_set_pin_dir(pin, dir);
}
 22a:	61 96       	adiw	r28, 0x11	; 17
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	2d 97       	sbiw	r28, 0x0d	; 13
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	9c 87       	std	Y+12, r25	; 0x0c
 252:	8b 87       	std	Y+11, r24	; 0x0b
 254:	6d 87       	std	Y+13, r22	; 0x0d
 256:	8b 85       	ldd	r24, Y+11	; 0x0b
 258:	9c 85       	ldd	r25, Y+12	; 0x0c
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
 25e:	8d 85       	ldd	r24, Y+13	; 0x0d
 260:	8b 83       	std	Y+3, r24	; 0x03
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	8c 83       	std	Y+4, r24	; 0x04
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	c9 01       	movw	r24, r18
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19
 284:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 286:	9e 83       	std	Y+6, r25	; 0x06
 288:	8d 83       	std	Y+5, r24	; 0x05

	if (level) {
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	88 23       	and	r24, r24
 28e:	d9 f0       	breq	.+54     	; 0x2c6 <ioport_set_pin_level+0x8a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	9e 81       	ldd	r25, Y+6	; 0x06
 294:	fc 01       	movw	r30, r24
 296:	42 81       	ldd	r20, Z+2	; 0x02
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	9a 81       	ldd	r25, Y+2	; 0x02
 29c:	98 87       	std	Y+8, r25	; 0x08
 29e:	8f 83       	std	Y+7, r24	; 0x07
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 2a0:	8f 81       	ldd	r24, Y+7	; 0x07
 2a2:	98 85       	ldd	r25, Y+8	; 0x08
 2a4:	9c 01       	movw	r18, r24
 2a6:	27 70       	andi	r18, 0x07	; 7
 2a8:	33 27       	eor	r19, r19
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <ioport_set_pin_level+0x78>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <ioport_set_pin_level+0x74>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 2b8:	24 2f       	mov	r18, r20
 2ba:	28 2b       	or	r18, r24
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	9e 81       	ldd	r25, Y+6	; 0x06
 2c0:	fc 01       	movw	r30, r24
 2c2:	22 83       	std	Z+2, r18	; 0x02
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <ioport_set_pin_level+0xc2>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 2c6:	8d 81       	ldd	r24, Y+5	; 0x05
 2c8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ca:	fc 01       	movw	r30, r24
 2cc:	82 81       	ldd	r24, Z+2	; 0x02
 2ce:	48 2f       	mov	r20, r24
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	9a 81       	ldd	r25, Y+2	; 0x02
 2d4:	9a 87       	std	Y+10, r25	; 0x0a
 2d6:	89 87       	std	Y+9, r24	; 0x09
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 2d8:	89 85       	ldd	r24, Y+9	; 0x09
 2da:	9a 85       	ldd	r25, Y+10	; 0x0a
 2dc:	9c 01       	movw	r18, r24
 2de:	27 70       	andi	r18, 0x07	; 7
 2e0:	33 27       	eor	r19, r19
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <ioport_set_pin_level+0xb0>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	2a 95       	dec	r18
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <ioport_set_pin_level+0xac>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	28 2f       	mov	r18, r24
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	fc 01       	movw	r30, r24
 2fc:	22 83       	std	Z+2, r18	; 0x02
	arch_ioport_set_pin_level(pin, level);
}
 2fe:	2d 96       	adiw	r28, 0x0d	; 13
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	2b 97       	sbiw	r28, 0x0b	; 11
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	de bf       	out	0x3e, r29	; 62
 320:	0f be       	out	0x3f, r0	; 63
 322:	cd bf       	out	0x3d, r28	; 61
 324:	9b 87       	std	Y+11, r25	; 0x0b
 326:	8a 87       	std	Y+10, r24	; 0x0a
 328:	8a 85       	ldd	r24, Y+10	; 0x0a
 32a:	9b 85       	ldd	r25, Y+11	; 0x0b
 32c:	9a 83       	std	Y+2, r25	; 0x02
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	9a 81       	ldd	r25, Y+2	; 0x02
 334:	9c 83       	std	Y+4, r25	; 0x04
 336:	8b 83       	std	Y+3, r24	; 0x03
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	8d 83       	std	Y+5, r24	; 0x05
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 34a:	8d 81       	ldd	r24, Y+5	; 0x05
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	c9 01       	movw	r24, r18
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	82 0f       	add	r24, r18
 358:	93 1f       	adc	r25, r19
 35a:	80 96       	adiw	r24, 0x20	; 32
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
 35c:	9f 83       	std	Y+7, r25	; 0x07
 35e:	8e 83       	std	Y+6, r24	; 0x06
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 360:	8e 81       	ldd	r24, Y+6	; 0x06
 362:	9f 81       	ldd	r25, Y+7	; 0x07
 364:	fc 01       	movw	r30, r24
 366:	40 81       	ld	r20, Z
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	99 87       	std	Y+9, r25	; 0x09
 36e:	88 87       	std	Y+8, r24	; 0x08
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 370:	88 85       	ldd	r24, Y+8	; 0x08
 372:	99 85       	ldd	r25, Y+9	; 0x09
 374:	9c 01       	movw	r18, r24
 376:	27 70       	andi	r18, 0x07	; 7
 378:	33 27       	eor	r19, r19
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <ioport_get_pin_level+0x74>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	2a 95       	dec	r18
 386:	e2 f7       	brpl	.-8      	; 0x380 <ioport_get_pin_level+0x70>
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 388:	94 2f       	mov	r25, r20
 38a:	98 23       	and	r25, r24
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	99 23       	and	r25, r25
 390:	09 f4       	brne	.+2      	; 0x394 <ioport_get_pin_level+0x84>
 392:	80 e0       	ldi	r24, 0x00	; 0
	return arch_ioport_get_pin_level(pin);
}
 394:	2b 96       	adiw	r28, 0x0b	; 11
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <SPI_MasterInit>:
//#define CARD_CS			IOPORT_CREATE_PIN(PORTB, 2)


// From page 218 of data sheet
void SPI_MasterInit(void)
{
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB3)|(1<<DDB5)|(1<<DDB2); // modified to make SS output
 3ae:	84 e2       	ldi	r24, 0x24	; 36
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	2c e2       	ldi	r18, 0x2C	; 44
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
	
	// To prevent it from getting pulled out of Master mode
	//ioport_set_pin_mode(SS_PIN, IOPORT_MODE_PULLUP);
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3b8:	8c e4       	ldi	r24, 0x4C	; 76
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	21 e5       	ldi	r18, 0x51	; 81
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <SPI_MasterTransmit>:

// from page 218 of data sheet
void SPI_MasterTransmit(uint8_t cData)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	1f 92       	push	r1
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	89 83       	std	Y+1, r24	; 0x01
	
	/* Start transmission */
	SPDR = cData;
 3d4:	8e e4       	ldi	r24, 0x4E	; 78
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	29 81       	ldd	r18, Y+1	; 0x01
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 3de:	00 00       	nop
 3e0:	8d e4       	ldi	r24, 0x4D	; 77
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	d4 f7       	brge	.-12     	; 0x3e0 <SPI_MasterTransmit+0x18>
	;
}
 3ec:	0f 90       	pop	r0
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <main>:


int main (void)
{
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	cf 52       	subi	r28, 0x2F	; 47
 3fe:	d0 46       	sbci	r29, 0x60	; 96
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
	uint8_t display[24576];
	
	//board_init();
	//ioport_init();

	SPI_MasterInit();
 40a:	cd df       	rcall	.-102    	; 0x3a6 <SPI_MasterInit>
	
	ioport_set_pin_dir(BACK_LIGHT, IOPORT_DIR_OUTPUT);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	89 e0       	ldi	r24, 0x09	; 9
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	98 de       	rcall	.-720    	; 0x146 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_DC, IOPORT_DIR_OUTPUT);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	88 e0       	ldi	r24, 0x08	; 8
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	93 de       	rcall	.-730    	; 0x146 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_RST, IOPORT_DIR_OUTPUT);
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	8f e1       	ldi	r24, 0x1F	; 31
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	8e de       	rcall	.-740    	; 0x146 <ioport_set_pin_dir>
	ioport_set_pin_dir(TFT_CS, IOPORT_DIR_OUTPUT);
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	8e e1       	ldi	r24, 0x1E	; 30
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	89 de       	rcall	.-750    	; 0x146 <ioport_set_pin_dir>
	ioport_set_pin_dir(CARD_CS, IOPORT_DIR_OUTPUT);
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	8d e1       	ldi	r24, 0x1D	; 29
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	84 de       	rcall	.-760    	; 0x146 <ioport_set_pin_dir>
	
	//ioport_set_pin_mode(BACK_LIGHT, IOPORT_MODE_PULLDOWN);
	
	ioport_set_pin_level(TFT_DC, 0);
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	88 e0       	ldi	r24, 0x08	; 8
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fb de       	rcall	.-522    	; 0x23c <ioport_set_pin_level>
	ioport_set_pin_level(TFT_CS, 1);  // serial interface initializes when CS is high pg 33
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	8e e1       	ldi	r24, 0x1E	; 30
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	f7 de       	rcall	.-530    	; 0x23c <ioport_set_pin_level>
	
	ioport_set_pin_level(TFT_RST, 0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8f e1       	ldi	r24, 0x1F	; 31
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	f3 de       	rcall	.-538    	; 0x23c <ioport_set_pin_level>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	a0 ea       	ldi	r26, 0xA0	; 160
 45c:	b0 e4       	ldi	r27, 0x40	; 64
 45e:	8c 8b       	std	Y+20, r24	; 0x14
 460:	9d 8b       	std	Y+21, r25	; 0x15
 462:	ae 8b       	std	Y+22, r26	; 0x16
 464:	bf 8b       	std	Y+23, r27	; 0x17

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	4a e7       	ldi	r20, 0x7A	; 122
 46c:	53 e4       	ldi	r21, 0x43	; 67
 46e:	6c 89       	ldd	r22, Y+20	; 0x14
 470:	7d 89       	ldd	r23, Y+21	; 0x15
 472:	8e 89       	ldd	r24, Y+22	; 0x16
 474:	9f 89       	ldd	r25, Y+23	; 0x17
 476:	26 d2       	rcall	.+1100   	; 0x8c4 <__mulsf3>
 478:	dc 01       	movw	r26, r24
 47a:	cb 01       	movw	r24, r22
 47c:	88 8f       	std	Y+24, r24	; 0x18
 47e:	99 8f       	std	Y+25, r25	; 0x19
 480:	aa 8f       	std	Y+26, r26	; 0x1a
 482:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e8       	ldi	r20, 0x80	; 128
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	68 8d       	ldd	r22, Y+24	; 0x18
 48e:	79 8d       	ldd	r23, Y+25	; 0x19
 490:	8a 8d       	ldd	r24, Y+26	; 0x1a
 492:	9b 8d       	ldd	r25, Y+27	; 0x1b
 494:	96 d1       	rcall	.+812    	; 0x7c2 <__cmpsf2>
 496:	88 23       	and	r24, r24
 498:	2c f4       	brge	.+10     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
		__ticks = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	9d 8f       	std	Y+29, r25	; 0x1d
 4a0:	8c 8f       	std	Y+28, r24	; 0x1c
 4a2:	3b c0       	rjmp	.+118    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
	else if (__tmp > 65535)
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	3f ef       	ldi	r19, 0xFF	; 255
 4a8:	4f e7       	ldi	r20, 0x7F	; 127
 4aa:	57 e4       	ldi	r21, 0x47	; 71
 4ac:	68 8d       	ldd	r22, Y+24	; 0x18
 4ae:	79 8d       	ldd	r23, Y+25	; 0x19
 4b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
 4b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4b4:	03 d2       	rcall	.+1030   	; 0x8bc <__gesf2>
 4b6:	18 16       	cp	r1, r24
 4b8:	3c f5       	brge	.+78     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	40 e2       	ldi	r20, 0x20	; 32
 4c0:	51 e4       	ldi	r21, 0x41	; 65
 4c2:	6c 89       	ldd	r22, Y+20	; 0x14
 4c4:	7d 89       	ldd	r23, Y+21	; 0x15
 4c6:	8e 89       	ldd	r24, Y+22	; 0x16
 4c8:	9f 89       	ldd	r25, Y+23	; 0x17
 4ca:	fc d1       	rcall	.+1016   	; 0x8c4 <__mulsf3>
 4cc:	dc 01       	movw	r26, r24
 4ce:	cb 01       	movw	r24, r22
 4d0:	bc 01       	movw	r22, r24
 4d2:	cd 01       	movw	r24, r26
 4d4:	7a d1       	rcall	.+756    	; 0x7ca <__fixunssfsi>
 4d6:	dc 01       	movw	r26, r24
 4d8:	cb 01       	movw	r24, r22
 4da:	9d 8f       	std	Y+29, r25	; 0x1d
 4dc:	8c 8f       	std	Y+28, r24	; 0x1c
 4de:	0f c0       	rjmp	.+30     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4e0:	89 e1       	ldi	r24, 0x19	; 25
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9f 8f       	std	Y+31, r25	; 0x1f
 4e6:	8e 8f       	std	Y+30, r24	; 0x1e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
 4ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 4f0:	9f 8f       	std	Y+31, r25	; 0x1f
 4f2:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	9d 8f       	std	Y+29, r25	; 0x1d
 4fc:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
 500:	9d 8d       	ldd	r25, Y+29	; 0x1d
 502:	89 2b       	or	r24, r25
 504:	69 f7       	brne	.-38     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 506:	13 c0       	rjmp	.+38     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 508:	68 8d       	ldd	r22, Y+24	; 0x18
 50a:	79 8d       	ldd	r23, Y+25	; 0x19
 50c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 50e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 510:	5c d1       	rcall	.+696    	; 0x7ca <__fixunssfsi>
 512:	dc 01       	movw	r26, r24
 514:	cb 01       	movw	r24, r22
 516:	9d 8f       	std	Y+29, r25	; 0x1d
 518:	8c 8f       	std	Y+28, r24	; 0x1c
 51a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 51c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 51e:	99 a3       	std	Y+33, r25	; 0x21
 520:	88 a3       	std	Y+32, r24	; 0x20
 522:	88 a1       	ldd	r24, Y+32	; 0x20
 524:	99 a1       	ldd	r25, Y+33	; 0x21
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 52a:	99 a3       	std	Y+33, r25	; 0x21
 52c:	88 a3       	std	Y+32, r24	; 0x20
	_delay_ms(5);
	ioport_set_pin_level(TFT_RST, 1);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	8f e1       	ldi	r24, 0x1F	; 31
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	83 de       	rcall	.-762    	; 0x23c <ioport_set_pin_level>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	a0 ea       	ldi	r26, 0xA0	; 160
 53c:	b0 e4       	ldi	r27, 0x40	; 64
 53e:	8a a3       	std	Y+34, r24	; 0x22
 540:	9b a3       	std	Y+35, r25	; 0x23
 542:	ac a3       	std	Y+36, r26	; 0x24
 544:	bd a3       	std	Y+37, r27	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 546:	20 e0       	ldi	r18, 0x00	; 0
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	4a e7       	ldi	r20, 0x7A	; 122
 54c:	53 e4       	ldi	r21, 0x43	; 67
 54e:	6a a1       	ldd	r22, Y+34	; 0x22
 550:	7b a1       	ldd	r23, Y+35	; 0x23
 552:	8c a1       	ldd	r24, Y+36	; 0x24
 554:	9d a1       	ldd	r25, Y+37	; 0x25
 556:	b6 d1       	rcall	.+876    	; 0x8c4 <__mulsf3>
 558:	dc 01       	movw	r26, r24
 55a:	cb 01       	movw	r24, r22
 55c:	8e a3       	std	Y+38, r24	; 0x26
 55e:	9f a3       	std	Y+39, r25	; 0x27
 560:	a8 a7       	std	Y+40, r26	; 0x28
 562:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
 564:	20 e0       	ldi	r18, 0x00	; 0
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	40 e8       	ldi	r20, 0x80	; 128
 56a:	5f e3       	ldi	r21, 0x3F	; 63
 56c:	6e a1       	ldd	r22, Y+38	; 0x26
 56e:	7f a1       	ldd	r23, Y+39	; 0x27
 570:	88 a5       	ldd	r24, Y+40	; 0x28
 572:	99 a5       	ldd	r25, Y+41	; 0x29
 574:	26 d1       	rcall	.+588    	; 0x7c2 <__cmpsf2>
 576:	88 23       	and	r24, r24
 578:	2c f4       	brge	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		__ticks = 1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9b a7       	std	Y+43, r25	; 0x2b
 580:	8a a7       	std	Y+42, r24	; 0x2a
 582:	3b c0       	rjmp	.+118    	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
	else if (__tmp > 65535)
 584:	20 e0       	ldi	r18, 0x00	; 0
 586:	3f ef       	ldi	r19, 0xFF	; 255
 588:	4f e7       	ldi	r20, 0x7F	; 127
 58a:	57 e4       	ldi	r21, 0x47	; 71
 58c:	6e a1       	ldd	r22, Y+38	; 0x26
 58e:	7f a1       	ldd	r23, Y+39	; 0x27
 590:	88 a5       	ldd	r24, Y+40	; 0x28
 592:	99 a5       	ldd	r25, Y+41	; 0x29
 594:	93 d1       	rcall	.+806    	; 0x8bc <__gesf2>
 596:	18 16       	cp	r1, r24
 598:	3c f5       	brge	.+78     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	40 e2       	ldi	r20, 0x20	; 32
 5a0:	51 e4       	ldi	r21, 0x41	; 65
 5a2:	6a a1       	ldd	r22, Y+34	; 0x22
 5a4:	7b a1       	ldd	r23, Y+35	; 0x23
 5a6:	8c a1       	ldd	r24, Y+36	; 0x24
 5a8:	9d a1       	ldd	r25, Y+37	; 0x25
 5aa:	8c d1       	rcall	.+792    	; 0x8c4 <__mulsf3>
 5ac:	dc 01       	movw	r26, r24
 5ae:	cb 01       	movw	r24, r22
 5b0:	bc 01       	movw	r22, r24
 5b2:	cd 01       	movw	r24, r26
 5b4:	0a d1       	rcall	.+532    	; 0x7ca <__fixunssfsi>
 5b6:	dc 01       	movw	r26, r24
 5b8:	cb 01       	movw	r24, r22
 5ba:	9b a7       	std	Y+43, r25	; 0x2b
 5bc:	8a a7       	std	Y+42, r24	; 0x2a
 5be:	0f c0       	rjmp	.+30     	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5c0:	89 e1       	ldi	r24, 0x19	; 25
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	9d a7       	std	Y+45, r25	; 0x2d
 5c6:	8c a7       	std	Y+44, r24	; 0x2c
 5c8:	8c a5       	ldd	r24, Y+44	; 0x2c
 5ca:	9d a5       	ldd	r25, Y+45	; 0x2d
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5d0:	9d a7       	std	Y+45, r25	; 0x2d
 5d2:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5d4:	8a a5       	ldd	r24, Y+42	; 0x2a
 5d6:	9b a5       	ldd	r25, Y+43	; 0x2b
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	9b a7       	std	Y+43, r25	; 0x2b
 5dc:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5de:	8a a5       	ldd	r24, Y+42	; 0x2a
 5e0:	9b a5       	ldd	r25, Y+43	; 0x2b
 5e2:	89 2b       	or	r24, r25
 5e4:	69 f7       	brne	.-38     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5e6:	13 c0       	rjmp	.+38     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5e8:	6e a1       	ldd	r22, Y+38	; 0x26
 5ea:	7f a1       	ldd	r23, Y+39	; 0x27
 5ec:	88 a5       	ldd	r24, Y+40	; 0x28
 5ee:	99 a5       	ldd	r25, Y+41	; 0x29
 5f0:	ec d0       	rcall	.+472    	; 0x7ca <__fixunssfsi>
 5f2:	dc 01       	movw	r26, r24
 5f4:	cb 01       	movw	r24, r22
 5f6:	9b a7       	std	Y+43, r25	; 0x2b
 5f8:	8a a7       	std	Y+42, r24	; 0x2a
 5fa:	8a a5       	ldd	r24, Y+42	; 0x2a
 5fc:	9b a5       	ldd	r25, Y+43	; 0x2b
 5fe:	9f a7       	std	Y+47, r25	; 0x2f
 600:	8e a7       	std	Y+46, r24	; 0x2e
 602:	8e a5       	ldd	r24, Y+46	; 0x2e
 604:	9f a5       	ldd	r25, Y+47	; 0x2f
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 60a:	9f a7       	std	Y+47, r25	; 0x2f
 60c:	8e a7       	std	Y+46, r24	; 0x2e
	_delay_ms(5);

	ioport_set_pin_level(TFT_CS, 0);
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	8e e1       	ldi	r24, 0x1E	; 30
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	13 de       	rcall	.-986    	; 0x23c <ioport_set_pin_level>
	ioport_set_pin_level(TFT_DC, 0);
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	88 e0       	ldi	r24, 0x08	; 8
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0f de       	rcall	.-994    	; 0x23c <ioport_set_pin_level>
	

	transmitByte = 0x04; // Color mode
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte);
 622:	89 89       	ldd	r24, Y+17	; 0x11
 624:	d1 de       	rcall	.-606    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	88 e0       	ldi	r24, 0x08	; 8
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	07 de       	rcall	.-1010   	; 0x23c <ioport_set_pin_level>
	uint8_t temp;
	for (int i = 0; i <=2; i++)
 62e:	1a 82       	std	Y+2, r1	; 0x02
 630:	19 82       	std	Y+1, r1	; 0x01
 632:	0a c0       	rjmp	.+20     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
	{
		temp = SPDR;
 634:	8e e4       	ldi	r24, 0x4E	; 78
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	fc 01       	movw	r30, r24
 63a:	80 81       	ld	r24, Z
 63c:	8a 8b       	std	Y+18, r24	; 0x12

	transmitByte = 0x04; // Color mode
	SPI_MasterTransmit(transmitByte);
	ioport_set_pin_level(TFT_DC, 1);
	uint8_t temp;
	for (int i = 0; i <=2; i++)
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	9a 81       	ldd	r25, Y+2	; 0x02
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	9a 83       	std	Y+2, r25	; 0x02
 646:	89 83       	std	Y+1, r24	; 0x01
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	03 97       	sbiw	r24, 0x03	; 3
 64e:	94 f3       	brlt	.-28     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
		temp = SPDR;
	}
	


	transmitByte = 0x3a; // Color mode
 650:	8a e3       	ldi	r24, 0x3A	; 58
 652:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte);
 654:	89 89       	ldd	r24, Y+17	; 0x11
 656:	b8 de       	rcall	.-656    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	88 e0       	ldi	r24, 0x08	; 8
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	ee dd       	rcall	.-1060   	; 0x23c <ioport_set_pin_level>
	transmitByte = 0x03;// 4-4-4 RGB
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte); // send byte
 664:	89 89       	ldd	r24, Y+17	; 0x11
 666:	b0 de       	rcall	.-672    	; 0x3c8 <SPI_MasterTransmit>
	
	// Here be were I program the LUT
	ioport_set_pin_level(TFT_DC, 0);
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	88 e0       	ldi	r24, 0x08	; 8
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	e6 dd       	rcall	.-1076   	; 0x23c <ioport_set_pin_level>
	transmitByte = 0x2d;  // write command
 670:	8d e2       	ldi	r24, 0x2D	; 45
 672:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte); // Sen byte
 674:	89 89       	ldd	r24, Y+17	; 0x11
 676:	a8 de       	rcall	.-688    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
 678:	61 e0       	ldi	r22, 0x01	; 1
 67a:	88 e0       	ldi	r24, 0x08	; 8
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	de dd       	rcall	.-1092   	; 0x23c <ioport_set_pin_level>

	for(int i = 0; i <= 0x0f; i++) // Red part1
 680:	1c 82       	std	Y+4, r1	; 0x04
 682:	1b 82       	std	Y+3, r1	; 0x03
 684:	09 c0       	rjmp	.+18     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
	{
		transmitByte = i;
 686:	8b 81       	ldd	r24, Y+3	; 0x03
 688:	89 8b       	std	Y+17, r24	; 0x11
		SPI_MasterTransmit(transmitByte);
 68a:	89 89       	ldd	r24, Y+17	; 0x11
 68c:	9d de       	rcall	.-710    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 0);
	transmitByte = 0x2d;  // write command
	SPI_MasterTransmit(transmitByte); // Sen byte
	ioport_set_pin_level(TFT_DC, 1);

	for(int i = 0; i <= 0x0f; i++) // Red part1
 68e:	8b 81       	ldd	r24, Y+3	; 0x03
 690:	9c 81       	ldd	r25, Y+4	; 0x04
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	9c 83       	std	Y+4, r25	; 0x04
 696:	8b 83       	std	Y+3, r24	; 0x03
 698:	8b 81       	ldd	r24, Y+3	; 0x03
 69a:	9c 81       	ldd	r25, Y+4	; 0x04
 69c:	40 97       	sbiw	r24, 0x10	; 16
 69e:	9c f3       	brlt	.-26     	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
 6a0:	81 e1       	ldi	r24, 0x11	; 17
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	9e 83       	std	Y+6, r25	; 0x06
 6a6:	8d 83       	std	Y+5, r24	; 0x05
 6a8:	08 c0       	rjmp	.+16     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
	{
		transmitByte = 0;
 6aa:	19 8a       	std	Y+17, r1	; 0x11
		SPI_MasterTransmit(transmitByte);
 6ac:	89 89       	ldd	r24, Y+17	; 0x11
 6ae:	8c de       	rcall	.-744    	; 0x3c8 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Red part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 17; i <= 32; i++) // red part2
 6b0:	8d 81       	ldd	r24, Y+5	; 0x05
 6b2:	9e 81       	ldd	r25, Y+6	; 0x06
 6b4:	01 96       	adiw	r24, 0x01	; 1
 6b6:	9e 83       	std	Y+6, r25	; 0x06
 6b8:	8d 83       	std	Y+5, r24	; 0x05
 6ba:	8d 81       	ldd	r24, Y+5	; 0x05
 6bc:	9e 81       	ldd	r25, Y+6	; 0x06
 6be:	81 97       	sbiw	r24, 0x21	; 33
 6c0:	a4 f3       	brlt	.-24     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
 6c2:	18 86       	std	Y+8, r1	; 0x08
 6c4:	1f 82       	std	Y+7, r1	; 0x07
 6c6:	09 c0       	rjmp	.+18     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
	{
		transmitByte = i;
 6c8:	8f 81       	ldd	r24, Y+7	; 0x07
 6ca:	89 8b       	std	Y+17, r24	; 0x11
		SPI_MasterTransmit(transmitByte);
 6cc:	89 89       	ldd	r24, Y+17	; 0x11
 6ce:	7c de       	rcall	.-776    	; 0x3c8 <SPI_MasterTransmit>
	for(int i = 17; i <= 32; i++) // red part2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // green part1
 6d0:	8f 81       	ldd	r24, Y+7	; 0x07
 6d2:	98 85       	ldd	r25, Y+8	; 0x08
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	98 87       	std	Y+8, r25	; 0x08
 6d8:	8f 83       	std	Y+7, r24	; 0x07
 6da:	8f 81       	ldd	r24, Y+7	; 0x07
 6dc:	98 85       	ldd	r25, Y+8	; 0x08
 6de:	40 97       	sbiw	r24, 0x10	; 16
 6e0:	9c f3       	brlt	.-26     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
 6e2:	81 e3       	ldi	r24, 0x31	; 49
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	9a 87       	std	Y+10, r25	; 0x0a
 6e8:	89 87       	std	Y+9, r24	; 0x09
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
	{
		transmitByte = 0;
 6ec:	19 8a       	std	Y+17, r1	; 0x11
		SPI_MasterTransmit(transmitByte);
 6ee:	89 89       	ldd	r24, Y+17	; 0x11
 6f0:	6b de       	rcall	.-810    	; 0x3c8 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // green part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 49; i <= 96; i++) // green part 2
 6f2:	89 85       	ldd	r24, Y+9	; 0x09
 6f4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	9a 87       	std	Y+10, r25	; 0x0a
 6fa:	89 87       	std	Y+9, r24	; 0x09
 6fc:	89 85       	ldd	r24, Y+9	; 0x09
 6fe:	9a 85       	ldd	r25, Y+10	; 0x0a
 700:	81 36       	cpi	r24, 0x61	; 97
 702:	91 05       	cpc	r25, r1
 704:	9c f3       	brlt	.-26     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
 706:	1c 86       	std	Y+12, r1	; 0x0c
 708:	1b 86       	std	Y+11, r1	; 0x0b
 70a:	09 c0       	rjmp	.+18     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
	{
		transmitByte = i;
 70c:	8b 85       	ldd	r24, Y+11	; 0x0b
 70e:	89 8b       	std	Y+17, r24	; 0x11
		SPI_MasterTransmit(transmitByte);
 710:	89 89       	ldd	r24, Y+17	; 0x11
 712:	5a de       	rcall	.-844    	; 0x3c8 <SPI_MasterTransmit>
	for(int i = 49; i <= 96; i++) // green part 2
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 0; i <= 0x0f; i++) // Blue part1
 714:	8b 85       	ldd	r24, Y+11	; 0x0b
 716:	9c 85       	ldd	r25, Y+12	; 0x0c
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	9c 87       	std	Y+12, r25	; 0x0c
 71c:	8b 87       	std	Y+11, r24	; 0x0b
 71e:	8b 85       	ldd	r24, Y+11	; 0x0b
 720:	9c 85       	ldd	r25, Y+12	; 0x0c
 722:	40 97       	sbiw	r24, 0x10	; 16
 724:	9c f3       	brlt	.-26     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
 726:	81 e7       	ldi	r24, 0x71	; 113
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	9e 87       	std	Y+14, r25	; 0x0e
 72c:	8d 87       	std	Y+13, r24	; 0x0d
 72e:	08 c0       	rjmp	.+16     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
	{
		transmitByte = 0;
 730:	19 8a       	std	Y+17, r1	; 0x11
		SPI_MasterTransmit(transmitByte);
 732:	89 89       	ldd	r24, Y+17	; 0x11
 734:	49 de       	rcall	.-878    	; 0x3c8 <SPI_MasterTransmit>
	for(int i = 0; i <= 0x0f; i++) // Blue part1
	{
		transmitByte = i;
		SPI_MasterTransmit(transmitByte);
	}
	for(int i = 113; i <= 128; i++) // blue part 2
 736:	8d 85       	ldd	r24, Y+13	; 0x0d
 738:	9e 85       	ldd	r25, Y+14	; 0x0e
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	9e 87       	std	Y+14, r25	; 0x0e
 73e:	8d 87       	std	Y+13, r24	; 0x0d
 740:	8d 85       	ldd	r24, Y+13	; 0x0d
 742:	9e 85       	ldd	r25, Y+14	; 0x0e
 744:	81 38       	cpi	r24, 0x81	; 129
 746:	91 05       	cpc	r25, r1
 748:	9c f3       	brlt	.-26     	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
	{
		transmitByte = 0;
		SPI_MasterTransmit(transmitByte);
	}

	ioport_set_pin_level(TFT_DC, 0);
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	88 e0       	ldi	r24, 0x08	; 8
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	75 dd       	rcall	.-1302   	; 0x23c <ioport_set_pin_level>
	transmitByte = 0x2c;  // write command
 752:	8c e2       	ldi	r24, 0x2C	; 44
 754:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte); // Sen byte
 756:	89 89       	ldd	r24, Y+17	; 0x11
 758:	37 de       	rcall	.-914    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 1);
 75a:	61 e0       	ldi	r22, 0x01	; 1
 75c:	88 e0       	ldi	r24, 0x08	; 8
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	6d dd       	rcall	.-1318   	; 0x23c <ioport_set_pin_level>
	
	for (int i = 0; i <= 8192; i++) // once for every three bytes
 762:	18 8a       	std	Y+16, r1	; 0x10
 764:	1f 86       	std	Y+15, r1	; 0x0f
 766:	10 c0       	rjmp	.+32     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
	{
		transmitByte = 0xf0;
 768:	80 ef       	ldi	r24, 0xF0	; 240
 76a:	89 8b       	std	Y+17, r24	; 0x11
		SPI_MasterTransmit(transmitByte);
 76c:	89 89       	ldd	r24, Y+17	; 0x11
 76e:	2c de       	rcall	.-936    	; 0x3c8 <SPI_MasterTransmit>
		transmitByte = 0x0f;
 770:	8f e0       	ldi	r24, 0x0F	; 15
 772:	89 8b       	std	Y+17, r24	; 0x11
		SPI_MasterTransmit(transmitByte);
 774:	89 89       	ldd	r24, Y+17	; 0x11
 776:	28 de       	rcall	.-944    	; 0x3c8 <SPI_MasterTransmit>
		transmitByte = 0x00;
 778:	19 8a       	std	Y+17, r1	; 0x11
		SPI_MasterTransmit(transmitByte);
 77a:	89 89       	ldd	r24, Y+17	; 0x11
 77c:	25 de       	rcall	.-950    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_DC, 0);
	transmitByte = 0x2c;  // write command
	SPI_MasterTransmit(transmitByte); // Sen byte
	ioport_set_pin_level(TFT_DC, 1);
	
	for (int i = 0; i <= 8192; i++) // once for every three bytes
 77e:	8f 85       	ldd	r24, Y+15	; 0x0f
 780:	98 89       	ldd	r25, Y+16	; 0x10
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	98 8b       	std	Y+16, r25	; 0x10
 786:	8f 87       	std	Y+15, r24	; 0x0f
 788:	8f 85       	ldd	r24, Y+15	; 0x0f
 78a:	98 89       	ldd	r25, Y+16	; 0x10
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	90 42       	sbci	r25, 0x20	; 32
 790:	5c f3       	brlt	.-42     	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
		SPI_MasterTransmit(transmitByte);
		//display[i*3    ] = 0xf0;
		//display[i*3 + 1] = 0x0f;
		//display[i*3 + 2] = 0x00;	
	}
	ioport_set_pin_level(TFT_DC, 0);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	51 dd       	rcall	.-1374   	; 0x23c <ioport_set_pin_level>
	transmitByte = 0x13;
 79a:	83 e1       	ldi	r24, 0x13	; 19
 79c:	89 8b       	std	Y+17, r24	; 0x11
	SPI_MasterTransmit(transmitByte);
 79e:	89 89       	ldd	r24, Y+17	; 0x11
 7a0:	13 de       	rcall	.-986    	; 0x3c8 <SPI_MasterTransmit>
	ioport_set_pin_level(TFT_CS, 1);
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	8e e1       	ldi	r24, 0x1E	; 30
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	49 dd       	rcall	.-1390   	; 0x23c <ioport_set_pin_level>
	while(1){
		button_state = ioport_get_pin_level(GPIO_PUSH_BUTTON_0);
 7aa:	8f e0       	ldi	r24, 0x0F	; 15
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	b0 dd       	rcall	.-1184   	; 0x310 <ioport_get_pin_level>
 7b0:	8b 8b       	std	Y+19, r24	; 0x13
		if(button_state){
 7b2:	8b 89       	ldd	r24, Y+19	; 0x13
 7b4:	88 23       	and	r24, r24
 7b6:	21 f4       	brne	.+8      	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
				//LED_Off(LED0);
			}else{
				//LED_On(LED0);
				// Turns on display (-:
				
				ioport_set_pin_mode(BACK_LIGHT, IOPORT_MODE_PULLUP);
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	89 e0       	ldi	r24, 0x09	; 9
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	5d dc       	rcall	.-1862   	; 0x7a <ioport_set_pin_mode>
			//ioport_set_pin_level(TFT_DC, 0);
			//transmitBit = 0x01;
			//SPI_MasterTransmit(transmitBit);
			}
			}
 7c0:	f4 cf       	rjmp	.-24     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>

000007c2 <__cmpsf2>:
 7c2:	2f d0       	rcall	.+94     	; 0x822 <__fp_cmp>
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <__cmpsf2+0x6>
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	08 95       	ret

000007ca <__fixunssfsi>:
 7ca:	57 d0       	rcall	.+174    	; 0x87a <__fp_splitA>
 7cc:	88 f0       	brcs	.+34     	; 0x7f0 <__fixunssfsi+0x26>
 7ce:	9f 57       	subi	r25, 0x7F	; 127
 7d0:	90 f0       	brcs	.+36     	; 0x7f6 <__fixunssfsi+0x2c>
 7d2:	b9 2f       	mov	r27, r25
 7d4:	99 27       	eor	r25, r25
 7d6:	b7 51       	subi	r27, 0x17	; 23
 7d8:	a0 f0       	brcs	.+40     	; 0x802 <__fixunssfsi+0x38>
 7da:	d1 f0       	breq	.+52     	; 0x810 <__fixunssfsi+0x46>
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	1a f0       	brmi	.+6      	; 0x7ec <__fixunssfsi+0x22>
 7e6:	ba 95       	dec	r27
 7e8:	c9 f7       	brne	.-14     	; 0x7dc <__fixunssfsi+0x12>
 7ea:	12 c0       	rjmp	.+36     	; 0x810 <__fixunssfsi+0x46>
 7ec:	b1 30       	cpi	r27, 0x01	; 1
 7ee:	81 f0       	breq	.+32     	; 0x810 <__fixunssfsi+0x46>
 7f0:	5e d0       	rcall	.+188    	; 0x8ae <__fp_zero>
 7f2:	b1 e0       	ldi	r27, 0x01	; 1
 7f4:	08 95       	ret
 7f6:	5b c0       	rjmp	.+182    	; 0x8ae <__fp_zero>
 7f8:	67 2f       	mov	r22, r23
 7fa:	78 2f       	mov	r23, r24
 7fc:	88 27       	eor	r24, r24
 7fe:	b8 5f       	subi	r27, 0xF8	; 248
 800:	39 f0       	breq	.+14     	; 0x810 <__fixunssfsi+0x46>
 802:	b9 3f       	cpi	r27, 0xF9	; 249
 804:	cc f3       	brlt	.-14     	; 0x7f8 <__fixunssfsi+0x2e>
 806:	86 95       	lsr	r24
 808:	77 95       	ror	r23
 80a:	67 95       	ror	r22
 80c:	b3 95       	inc	r27
 80e:	d9 f7       	brne	.-10     	; 0x806 <__fixunssfsi+0x3c>
 810:	3e f4       	brtc	.+14     	; 0x820 <__fixunssfsi+0x56>
 812:	90 95       	com	r25
 814:	80 95       	com	r24
 816:	70 95       	com	r23
 818:	61 95       	neg	r22
 81a:	7f 4f       	sbci	r23, 0xFF	; 255
 81c:	8f 4f       	sbci	r24, 0xFF	; 255
 81e:	9f 4f       	sbci	r25, 0xFF	; 255
 820:	08 95       	ret

00000822 <__fp_cmp>:
 822:	99 0f       	add	r25, r25
 824:	00 08       	sbc	r0, r0
 826:	55 0f       	add	r21, r21
 828:	aa 0b       	sbc	r26, r26
 82a:	e0 e8       	ldi	r30, 0x80	; 128
 82c:	fe ef       	ldi	r31, 0xFE	; 254
 82e:	16 16       	cp	r1, r22
 830:	17 06       	cpc	r1, r23
 832:	e8 07       	cpc	r30, r24
 834:	f9 07       	cpc	r31, r25
 836:	c0 f0       	brcs	.+48     	; 0x868 <__fp_cmp+0x46>
 838:	12 16       	cp	r1, r18
 83a:	13 06       	cpc	r1, r19
 83c:	e4 07       	cpc	r30, r20
 83e:	f5 07       	cpc	r31, r21
 840:	98 f0       	brcs	.+38     	; 0x868 <__fp_cmp+0x46>
 842:	62 1b       	sub	r22, r18
 844:	73 0b       	sbc	r23, r19
 846:	84 0b       	sbc	r24, r20
 848:	95 0b       	sbc	r25, r21
 84a:	39 f4       	brne	.+14     	; 0x85a <__fp_cmp+0x38>
 84c:	0a 26       	eor	r0, r26
 84e:	61 f0       	breq	.+24     	; 0x868 <__fp_cmp+0x46>
 850:	23 2b       	or	r18, r19
 852:	24 2b       	or	r18, r20
 854:	25 2b       	or	r18, r21
 856:	21 f4       	brne	.+8      	; 0x860 <__fp_cmp+0x3e>
 858:	08 95       	ret
 85a:	0a 26       	eor	r0, r26
 85c:	09 f4       	brne	.+2      	; 0x860 <__fp_cmp+0x3e>
 85e:	a1 40       	sbci	r26, 0x01	; 1
 860:	a6 95       	lsr	r26
 862:	8f ef       	ldi	r24, 0xFF	; 255
 864:	81 1d       	adc	r24, r1
 866:	81 1d       	adc	r24, r1
 868:	08 95       	ret

0000086a <__fp_split3>:
 86a:	57 fd       	sbrc	r21, 7
 86c:	90 58       	subi	r25, 0x80	; 128
 86e:	44 0f       	add	r20, r20
 870:	55 1f       	adc	r21, r21
 872:	59 f0       	breq	.+22     	; 0x88a <__fp_splitA+0x10>
 874:	5f 3f       	cpi	r21, 0xFF	; 255
 876:	71 f0       	breq	.+28     	; 0x894 <__fp_splitA+0x1a>
 878:	47 95       	ror	r20

0000087a <__fp_splitA>:
 87a:	88 0f       	add	r24, r24
 87c:	97 fb       	bst	r25, 7
 87e:	99 1f       	adc	r25, r25
 880:	61 f0       	breq	.+24     	; 0x89a <__fp_splitA+0x20>
 882:	9f 3f       	cpi	r25, 0xFF	; 255
 884:	79 f0       	breq	.+30     	; 0x8a4 <__fp_splitA+0x2a>
 886:	87 95       	ror	r24
 888:	08 95       	ret
 88a:	12 16       	cp	r1, r18
 88c:	13 06       	cpc	r1, r19
 88e:	14 06       	cpc	r1, r20
 890:	55 1f       	adc	r21, r21
 892:	f2 cf       	rjmp	.-28     	; 0x878 <__fp_split3+0xe>
 894:	46 95       	lsr	r20
 896:	f1 df       	rcall	.-30     	; 0x87a <__fp_splitA>
 898:	08 c0       	rjmp	.+16     	; 0x8aa <__fp_splitA+0x30>
 89a:	16 16       	cp	r1, r22
 89c:	17 06       	cpc	r1, r23
 89e:	18 06       	cpc	r1, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	f1 cf       	rjmp	.-30     	; 0x886 <__fp_splitA+0xc>
 8a4:	86 95       	lsr	r24
 8a6:	71 05       	cpc	r23, r1
 8a8:	61 05       	cpc	r22, r1
 8aa:	08 94       	sec
 8ac:	08 95       	ret

000008ae <__fp_zero>:
 8ae:	e8 94       	clt

000008b0 <__fp_szero>:
 8b0:	bb 27       	eor	r27, r27
 8b2:	66 27       	eor	r22, r22
 8b4:	77 27       	eor	r23, r23
 8b6:	cb 01       	movw	r24, r22
 8b8:	97 f9       	bld	r25, 7
 8ba:	08 95       	ret

000008bc <__gesf2>:
 8bc:	b2 df       	rcall	.-156    	; 0x822 <__fp_cmp>
 8be:	08 f4       	brcc	.+2      	; 0x8c2 <__gesf2+0x6>
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__mulsf3>:
 8c4:	0b d0       	rcall	.+22     	; 0x8dc <__mulsf3x>
 8c6:	78 c0       	rjmp	.+240    	; 0x9b8 <__fp_round>
 8c8:	69 d0       	rcall	.+210    	; 0x99c <__fp_pscA>
 8ca:	28 f0       	brcs	.+10     	; 0x8d6 <__mulsf3+0x12>
 8cc:	6e d0       	rcall	.+220    	; 0x9aa <__fp_pscB>
 8ce:	18 f0       	brcs	.+6      	; 0x8d6 <__mulsf3+0x12>
 8d0:	95 23       	and	r25, r21
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__mulsf3+0x12>
 8d4:	5a c0       	rjmp	.+180    	; 0x98a <__fp_inf>
 8d6:	5f c0       	rjmp	.+190    	; 0x996 <__fp_nan>
 8d8:	11 24       	eor	r1, r1
 8da:	ea cf       	rjmp	.-44     	; 0x8b0 <__fp_szero>

000008dc <__mulsf3x>:
 8dc:	c6 df       	rcall	.-116    	; 0x86a <__fp_split3>
 8de:	a0 f3       	brcs	.-24     	; 0x8c8 <__mulsf3+0x4>

000008e0 <__mulsf3_pse>:
 8e0:	95 9f       	mul	r25, r21
 8e2:	d1 f3       	breq	.-12     	; 0x8d8 <__mulsf3+0x14>
 8e4:	95 0f       	add	r25, r21
 8e6:	50 e0       	ldi	r21, 0x00	; 0
 8e8:	55 1f       	adc	r21, r21
 8ea:	62 9f       	mul	r22, r18
 8ec:	f0 01       	movw	r30, r0
 8ee:	72 9f       	mul	r23, r18
 8f0:	bb 27       	eor	r27, r27
 8f2:	f0 0d       	add	r31, r0
 8f4:	b1 1d       	adc	r27, r1
 8f6:	63 9f       	mul	r22, r19
 8f8:	aa 27       	eor	r26, r26
 8fa:	f0 0d       	add	r31, r0
 8fc:	b1 1d       	adc	r27, r1
 8fe:	aa 1f       	adc	r26, r26
 900:	64 9f       	mul	r22, r20
 902:	66 27       	eor	r22, r22
 904:	b0 0d       	add	r27, r0
 906:	a1 1d       	adc	r26, r1
 908:	66 1f       	adc	r22, r22
 90a:	82 9f       	mul	r24, r18
 90c:	22 27       	eor	r18, r18
 90e:	b0 0d       	add	r27, r0
 910:	a1 1d       	adc	r26, r1
 912:	62 1f       	adc	r22, r18
 914:	73 9f       	mul	r23, r19
 916:	b0 0d       	add	r27, r0
 918:	a1 1d       	adc	r26, r1
 91a:	62 1f       	adc	r22, r18
 91c:	83 9f       	mul	r24, r19
 91e:	a0 0d       	add	r26, r0
 920:	61 1d       	adc	r22, r1
 922:	22 1f       	adc	r18, r18
 924:	74 9f       	mul	r23, r20
 926:	33 27       	eor	r19, r19
 928:	a0 0d       	add	r26, r0
 92a:	61 1d       	adc	r22, r1
 92c:	23 1f       	adc	r18, r19
 92e:	84 9f       	mul	r24, r20
 930:	60 0d       	add	r22, r0
 932:	21 1d       	adc	r18, r1
 934:	82 2f       	mov	r24, r18
 936:	76 2f       	mov	r23, r22
 938:	6a 2f       	mov	r22, r26
 93a:	11 24       	eor	r1, r1
 93c:	9f 57       	subi	r25, 0x7F	; 127
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	8a f0       	brmi	.+34     	; 0x964 <__stack+0x65>
 942:	e1 f0       	breq	.+56     	; 0x97c <__stack+0x7d>
 944:	88 23       	and	r24, r24
 946:	4a f0       	brmi	.+18     	; 0x95a <__stack+0x5b>
 948:	ee 0f       	add	r30, r30
 94a:	ff 1f       	adc	r31, r31
 94c:	bb 1f       	adc	r27, r27
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	91 50       	subi	r25, 0x01	; 1
 956:	50 40       	sbci	r21, 0x00	; 0
 958:	a9 f7       	brne	.-22     	; 0x944 <__stack+0x45>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	70 f0       	brcs	.+28     	; 0x97c <__stack+0x7d>
 960:	14 c0       	rjmp	.+40     	; 0x98a <__fp_inf>
 962:	a6 cf       	rjmp	.-180    	; 0x8b0 <__fp_szero>
 964:	5f 3f       	cpi	r21, 0xFF	; 255
 966:	ec f3       	brlt	.-6      	; 0x962 <__stack+0x63>
 968:	98 3e       	cpi	r25, 0xE8	; 232
 96a:	dc f3       	brlt	.-10     	; 0x962 <__stack+0x63>
 96c:	86 95       	lsr	r24
 96e:	77 95       	ror	r23
 970:	67 95       	ror	r22
 972:	b7 95       	ror	r27
 974:	f7 95       	ror	r31
 976:	e7 95       	ror	r30
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	c1 f7       	brne	.-16     	; 0x96c <__stack+0x6d>
 97c:	fe 2b       	or	r31, r30
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret

0000098a <__fp_inf>:
 98a:	97 f9       	bld	r25, 7
 98c:	9f 67       	ori	r25, 0x7F	; 127
 98e:	80 e8       	ldi	r24, 0x80	; 128
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	08 95       	ret

00000996 <__fp_nan>:
 996:	9f ef       	ldi	r25, 0xFF	; 255
 998:	80 ec       	ldi	r24, 0xC0	; 192
 99a:	08 95       	ret

0000099c <__fp_pscA>:
 99c:	00 24       	eor	r0, r0
 99e:	0a 94       	dec	r0
 9a0:	16 16       	cp	r1, r22
 9a2:	17 06       	cpc	r1, r23
 9a4:	18 06       	cpc	r1, r24
 9a6:	09 06       	cpc	r0, r25
 9a8:	08 95       	ret

000009aa <__fp_pscB>:
 9aa:	00 24       	eor	r0, r0
 9ac:	0a 94       	dec	r0
 9ae:	12 16       	cp	r1, r18
 9b0:	13 06       	cpc	r1, r19
 9b2:	14 06       	cpc	r1, r20
 9b4:	05 06       	cpc	r0, r21
 9b6:	08 95       	ret

000009b8 <__fp_round>:
 9b8:	09 2e       	mov	r0, r25
 9ba:	03 94       	inc	r0
 9bc:	00 0c       	add	r0, r0
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0xc>
 9c0:	88 23       	and	r24, r24
 9c2:	52 f0       	brmi	.+20     	; 0x9d8 <__fp_round+0x20>
 9c4:	bb 0f       	add	r27, r27
 9c6:	40 f4       	brcc	.+16     	; 0x9d8 <__fp_round+0x20>
 9c8:	bf 2b       	or	r27, r31
 9ca:	11 f4       	brne	.+4      	; 0x9d0 <__fp_round+0x18>
 9cc:	60 ff       	sbrs	r22, 0
 9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__fp_round+0x20>
 9d0:	6f 5f       	subi	r22, 0xFF	; 255
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
